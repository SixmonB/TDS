
tds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ee0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08006078  08006078  00016078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000f1e4  20000000  080061a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005e4  2000f1e4  0801538c  0002f1e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000f7c8  0801538c  0002f7c8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002f1e4  2**0
                  CONTENTS, READONLY
  9 .debug_line   0001c1b3  00000000  00000000  0002f212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00011ff1  00000000  00000000  0004b3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e52  00000000  00000000  0005d3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001010  00000000  00000000  00060208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00076fbc  00000000  00000000  00061218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000e98  00000000  00000000  000d81d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00009117  00000000  00000000  000d9070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  000e2187  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000043c4  00000000  00000000  000e21d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000f1e4 	.word	0x2000f1e4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006060 	.word	0x08006060

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000f1e8 	.word	0x2000f1e8
 80001d4:	08006060 	.word	0x08006060

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8000a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a1a:	e003      	b.n	8000a24 <LoopCopyDataInit>

08000a1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a22:	3104      	adds	r1, #4

08000a24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a2c:	d3f6      	bcc.n	8000a1c <CopyDataInit>
  ldr  r2, =_sbss
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a30:	e002      	b.n	8000a38 <LoopFillZerobss>

08000a32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a34:	f842 3b04 	str.w	r3, [r2], #4

08000a38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a3c:	d3f9      	bcc.n	8000a32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a3e:	f004 fd77 	bl	8005530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a42:	f005 fa81 	bl	8005f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a46:	f003 fc37 	bl	80042b8 <main>
  bx  lr    
 8000a4a:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 8000a4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a50:	080061a8 	.word	0x080061a8
  ldr  r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a58:	2000f1e4 	.word	0x2000f1e4
  ldr  r2, =_sbss
 8000a5c:	2000f1e4 	.word	0x2000f1e4
  ldr  r3, = _ebss
 8000a60:	2000f7c8 	.word	0x2000f7c8

08000a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <HAL_Init+0x40>)
 8000a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_Init+0x40>)
 8000a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_Init+0x40>)
 8000a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f93f 	bl	8000d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a96:	200f      	movs	r0, #15
 8000a98:	f000 f808 	bl	8000aac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f004 fb12 	bl	80050c4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023c00 	.word	0x40023c00

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000ab4:	f001 ffb4 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <HAL_InitTick+0x34>)
 8000abc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac0:	099b      	lsrs	r3, r3, #6
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f969 	bl	8000d9a <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f000 f92b 	bl	8000d2a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	10624dd3 	.word	0x10624dd3

08000ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick++;
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <HAL_IncTick+0x18>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4a03      	ldr	r2, [pc, #12]	; (8000afc <HAL_IncTick+0x18>)
 8000af0:	6013      	str	r3, [r2, #0]
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	2000f200 	.word	0x2000f200

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	2000f200 	.word	0x2000f200

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  tickstart = HAL_GetTick();
 8000b24:	f7ff ffec 	bl	8000b00 <HAL_GetTick>
 8000b28:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffe8 	bl	8000b00 <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	1ad2      	subs	r2, r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d3f7      	bcc.n	8000b2c <HAL_Delay+0x14>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <NVIC_SetPriorityGrouping+0x44>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8000b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7a:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <NVIC_SetPriorityGrouping+0x44>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	60d3      	str	r3, [r2, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <NVIC_GetPriorityGrouping+0x18>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	f003 0307 	and.w	r3, r3, #7
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 031f 	and.w	r3, r3, #31
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	fa02 f103 	lsl.w	r1, r2, r3
 8000bc2:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <NVIC_EnableIRQ+0x30>)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	095b      	lsrs	r3, r3, #5
 8000bca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 031f 	and.w	r3, r3, #31
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	fa02 f103 	lsl.w	r1, r2, r3
 8000bf6:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <NVIC_DisableIRQ+0x30>)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	095b      	lsrs	r3, r3, #5
 8000bfe:	3320      	adds	r3, #32
 8000c00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	da0b      	bge.n	8000c40 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	; (8000c60 <NVIC_SetPriority+0x4c>)
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 030f 	and.w	r3, r3, #15
 8000c34:	3b04      	subs	r3, #4
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000c3e:	e009      	b.n	8000c54 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4907      	ldr	r1, [pc, #28]	; (8000c64 <NVIC_SetPriority+0x50>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	0112      	lsls	r2, r2, #4
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	440b      	add	r3, r1
 8000c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	4619      	mov	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	; 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce0:	d301      	bcc.n	8000ce6 <SysTick_Config+0x16>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00f      	b.n	8000d06 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <SysTick_Config+0x40>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000cee:	210f      	movs	r1, #15
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f7ff ff8e 	bl	8000c14 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <SysTick_Config+0x40>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <SysTick_Config+0x40>)
 8000d00:	2207      	movs	r2, #7
 8000d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	e000e010 	.word	0xe000e010

08000d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff13 	bl	8000b48 <NVIC_SetPriorityGrouping>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3c:	f7ff ff28 	bl	8000b90 <NVIC_GetPriorityGrouping>
 8000d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	6978      	ldr	r0, [r7, #20]
 8000d48:	f7ff ff8e 	bl	8000c68 <NVIC_EncodePriority>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff5d 	bl	8000c14 <NVIC_SetPriority>
}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff1b 	bl	8000bac <NVIC_EnableIRQ>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff27 	bl	8000be0 <NVIC_DisableIRQ>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ff94 	bl	8000cd0 <SysTick_Config>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b087      	sub	sp, #28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  uint32_t iocurrent = 0x00;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  uint32_t temp = 0x00;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	e16f      	b.n	80010b0 <HAL_GPIO_Init+0x2fc>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	60fb      	str	r3, [r7, #12]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]

    if(iocurrent == ioposition)
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	f040 815e 	bne.w	80010aa <HAL_GPIO_Init+0x2f6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_Init+0x4a>
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b12      	cmp	r3, #18
 8000dfc:	d123      	bne.n	8000e46 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3208      	adds	r2, #8
 8000e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	220f      	movs	r2, #15
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	691a      	ldr	r2, [r3, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	6939      	ldr	r1, [r7, #16]
 8000e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0203 	and.w	r2, r3, #3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d00b      	beq.n	8000e9a <HAL_GPIO_Init+0xe6>
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8e:	2b11      	cmp	r3, #17
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b12      	cmp	r3, #18
 8000e98:	d130      	bne.n	8000efc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	f003 0201 	and.w	r2, r3, #1
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 80b8 	beq.w	80010aa <HAL_GPIO_Init+0x2f6>
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
 8000f3a:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <HAL_GPIO_Init+0x314>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a62      	ldr	r2, [pc, #392]	; (80010c8 <HAL_GPIO_Init+0x314>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2];
 8000f46:	4a61      	ldr	r2, [pc, #388]	; (80010cc <HAL_GPIO_Init+0x318>)
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a58      	ldr	r2, [pc, #352]	; (80010d0 <HAL_GPIO_Init+0x31c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d037      	beq.n	8000fe2 <HAL_GPIO_Init+0x22e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a57      	ldr	r2, [pc, #348]	; (80010d4 <HAL_GPIO_Init+0x320>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d031      	beq.n	8000fde <HAL_GPIO_Init+0x22a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a56      	ldr	r2, [pc, #344]	; (80010d8 <HAL_GPIO_Init+0x324>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d02b      	beq.n	8000fda <HAL_GPIO_Init+0x226>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a55      	ldr	r2, [pc, #340]	; (80010dc <HAL_GPIO_Init+0x328>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d025      	beq.n	8000fd6 <HAL_GPIO_Init+0x222>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a54      	ldr	r2, [pc, #336]	; (80010e0 <HAL_GPIO_Init+0x32c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d01f      	beq.n	8000fd2 <HAL_GPIO_Init+0x21e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a53      	ldr	r2, [pc, #332]	; (80010e4 <HAL_GPIO_Init+0x330>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d019      	beq.n	8000fce <HAL_GPIO_Init+0x21a>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a52      	ldr	r2, [pc, #328]	; (80010e8 <HAL_GPIO_Init+0x334>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0x216>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a51      	ldr	r2, [pc, #324]	; (80010ec <HAL_GPIO_Init+0x338>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00d      	beq.n	8000fc6 <HAL_GPIO_Init+0x212>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a50      	ldr	r2, [pc, #320]	; (80010f0 <HAL_GPIO_Init+0x33c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x20e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4f      	ldr	r2, [pc, #316]	; (80010f4 <HAL_GPIO_Init+0x340>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_GPIO_Init+0x20a>
 8000fba:	2309      	movs	r3, #9
 8000fbc:	e012      	b.n	8000fe4 <HAL_GPIO_Init+0x230>
 8000fbe:	230a      	movs	r3, #10
 8000fc0:	e010      	b.n	8000fe4 <HAL_GPIO_Init+0x230>
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	e00e      	b.n	8000fe4 <HAL_GPIO_Init+0x230>
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	e00c      	b.n	8000fe4 <HAL_GPIO_Init+0x230>
 8000fca:	2306      	movs	r3, #6
 8000fcc:	e00a      	b.n	8000fe4 <HAL_GPIO_Init+0x230>
 8000fce:	2305      	movs	r3, #5
 8000fd0:	e008      	b.n	8000fe4 <HAL_GPIO_Init+0x230>
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x230>
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e004      	b.n	8000fe4 <HAL_GPIO_Init+0x230>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_Init+0x230>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x230>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	f002 0203 	and.w	r2, r2, #3
 8000fea:	0092      	lsls	r2, r2, #2
 8000fec:	4093      	lsls	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ff4:	4935      	ldr	r1, [pc, #212]	; (80010cc <HAL_GPIO_Init+0x318>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <HAL_GPIO_Init+0x344>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001026:	4a34      	ldr	r2, [pc, #208]	; (80010f8 <HAL_GPIO_Init+0x344>)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800102c:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <HAL_GPIO_Init+0x344>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001050:	4a29      	ldr	r2, [pc, #164]	; (80010f8 <HAL_GPIO_Init+0x344>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <HAL_GPIO_Init+0x344>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800107a:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <HAL_GPIO_Init+0x344>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_GPIO_Init+0x344>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x2f0>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <HAL_GPIO_Init+0x344>)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	2b0f      	cmp	r3, #15
 80010b4:	f67f ae8c 	bls.w	8000dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	371c      	adds	r7, #28
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40013800 	.word	0x40013800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40021400 	.word	0x40021400
 80010e8:	40021800 	.word	0x40021800
 80010ec:	40021c00 	.word	0x40021c00
 80010f0:	40022000 	.word	0x40022000
 80010f4:	40022400 	.word	0x40022400
 80010f8:	40013c00 	.word	0x40013c00

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	887a      	ldrh	r2, [r7, #2]
 8001116:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8001118:	e002      	b.n	8001120 <HAL_GPIO_WritePin+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	887a      	ldrh	r2, [r7, #2]
 800111e:	835a      	strh	r2, [r3, #26]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001138:	695a      	ldr	r2, [r3, #20]
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	4618      	mov	r0, r3
 800114c:	f004 fc02 	bl	8005954 <HAL_GPIO_EXTI_Callback>
  }
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40013c00 	.word	0x40013c00

0800115c <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e0be      	b.n	80012f4 <HAL_I2C_Init+0x198>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d102      	bne.n	8001188 <HAL_I2C_Init+0x2c>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 f8c0 	bl	8001308 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2202      	movs	r2, #2
 800118c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0201 	bic.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80011a0:	f001 fc6a 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 80011a4:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	4a54      	ldr	r2, [pc, #336]	; (80012fc <HAL_I2C_Init+0x1a0>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	0c9b      	lsrs	r3, r3, #18
 80011b0:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	4a50      	ldr	r2, [pc, #320]	; (8001300 <HAL_I2C_Init+0x1a4>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d802      	bhi.n	80011ca <HAL_I2C_Init+0x6e>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3301      	adds	r3, #1
 80011c8:	e009      	b.n	80011de <HAL_I2C_Init+0x82>
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011d0:	fb02 f303 	mul.w	r3, r2, r3
 80011d4:	4a4b      	ldr	r2, [pc, #300]	; (8001304 <HAL_I2C_Init+0x1a8>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	099b      	lsrs	r3, r3, #6
 80011dc:	3301      	adds	r3, #1
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4a45      	ldr	r2, [pc, #276]	; (8001300 <HAL_I2C_Init+0x1a4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d813      	bhi.n	8001216 <HAL_I2C_Init+0xba>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	68ba      	ldr	r2, [r7, #8]
 80011f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80011fa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011fe:	4013      	ands	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d006      	beq.n	8001212 <HAL_I2C_Init+0xb6>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001210:	e045      	b.n	800129e <HAL_I2C_Init+0x142>
 8001212:	2304      	movs	r3, #4
 8001214:	e043      	b.n	800129e <HAL_I2C_Init+0x142>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10f      	bne.n	800123e <HAL_I2C_Init+0xe2>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf0c      	ite	eq
 8001236:	2301      	moveq	r3, #1
 8001238:	2300      	movne	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	e010      	b.n	8001260 <HAL_I2C_Init+0x104>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	009a      	lsls	r2, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001256:	2b00      	cmp	r3, #0
 8001258:	bf0c      	ite	eq
 800125a:	2301      	moveq	r3, #1
 800125c:	2300      	movne	r3, #0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_I2C_Init+0x10c>
 8001264:	2301      	movs	r3, #1
 8001266:	e01a      	b.n	800129e <HAL_I2C_Init+0x142>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10a      	bne.n	8001286 <HAL_I2C_Init+0x12a>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001284:	e00b      	b.n	800129e <HAL_I2C_Init+0x142>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	009a      	lsls	r2, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69d9      	ldr	r1, [r3, #28]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1a      	ldr	r2, [r3, #32]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6919      	ldr	r1, [r3, #16]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68da      	ldr	r2, [r3, #12]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6959      	ldr	r1, [r3, #20]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699a      	ldr	r2, [r3, #24]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	431bde83 	.word	0x431bde83
 8001300:	000186a0 	.word	0x000186a0
 8001304:	10624dd3 	.word	0x10624dd3

08001308 <HAL_I2C_MspInit>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_I2C_Master_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	461a      	mov	r2, r3
 8001328:	460b      	mov	r3, r1
 800132a:	817b      	strh	r3, [r7, #10]
 800132c:	4613      	mov	r3, r2
 800132e:	813b      	strh	r3, [r7, #8]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b01      	cmp	r3, #1
 800133a:	f040 809a 	bne.w	8001472 <HAL_I2C_Master_Transmit+0x156>
  {
    if((pData == NULL) || (Size == 0))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <HAL_I2C_Master_Transmit+0x2e>
 8001344:	893b      	ldrh	r3, [r7, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_I2C_Master_Transmit+0x32>
    {
      return  HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e092      	b.n	8001474 <HAL_I2C_Master_Transmit+0x158>
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b02      	cmp	r3, #2
 800135a:	d101      	bne.n	8001360 <HAL_I2C_Master_Transmit+0x44>
    {
      return HAL_BUSY;
 800135c:	2302      	movs	r3, #2
 800135e:	e089      	b.n	8001474 <HAL_I2C_Master_Transmit+0x158>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_I2C_Master_Transmit+0x52>
 800136a:	2302      	movs	r3, #2
 800136c:	e082      	b.n	8001474 <HAL_I2C_Master_Transmit+0x158>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hi2c->State = HAL_I2C_STATE_BUSY_TX;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2212      	movs	r2, #18
 800137a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	639a      	str	r2, [r3, #56]	; 0x38

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout) != HAL_OK)
 8001384:	897b      	ldrh	r3, [r7, #10]
 8001386:	6a3a      	ldr	r2, [r7, #32]
 8001388:	4619      	mov	r1, r3
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 fdb0 	bl	8001ef0 <I2C_MasterRequestWrite>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00f      	beq.n	80013b6 <HAL_I2C_Master_Transmit+0x9a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139a:	2b04      	cmp	r3, #4
 800139c:	d105      	bne.n	80013aa <HAL_I2C_Master_Transmit+0x8e>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e064      	b.n	8001474 <HAL_I2C_Master_Transmit+0x158>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e05e      	b.n	8001474 <HAL_I2C_Master_Transmit+0x158>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697b      	ldr	r3, [r7, #20]

    while(Size > 0)
 80013c8:	e028      	b.n	800141c <HAL_I2C_Master_Transmit+0x100>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	2200      	movs	r2, #0
 80013ce:	492b      	ldr	r1, [pc, #172]	; (800147c <HAL_I2C_Master_Transmit+0x160>)
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f000 fdf1 	bl	8001fb8 <I2C_WaitOnFlagUntilTimeout>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_I2C_Master_Transmit+0xc4>
      {
        return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e049      	b.n	8001474 <HAL_I2C_Master_Transmit+0x158>
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*pData++);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	781a      	ldrb	r2, [r3, #0]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	611a      	str	r2, [r3, #16]
      Size--;
 80013ee:	893b      	ldrh	r3, [r7, #8]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	813b      	strh	r3, [r7, #8]

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (Size != 0))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d10c      	bne.n	800141c <HAL_I2C_Master_Transmit+0x100>
 8001402:	893b      	ldrh	r3, [r7, #8]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d009      	beq.n	800141c <HAL_I2C_Master_Transmit+0x100>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*pData++);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	611a      	str	r2, [r3, #16]
        Size--;
 8001416:	893b      	ldrh	r3, [r7, #8]
 8001418:	3b01      	subs	r3, #1
 800141a:	813b      	strh	r3, [r7, #8]
    while(Size > 0)
 800141c:	893b      	ldrh	r3, [r7, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1d3      	bne.n	80013ca <HAL_I2C_Master_Transmit+0xae>
      }
    }

    /* Wait until TXE flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	2200      	movs	r2, #0
 8001426:	4915      	ldr	r1, [pc, #84]	; (800147c <HAL_I2C_Master_Transmit+0x160>)
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f000 fdc5 	bl	8001fb8 <I2C_WaitOnFlagUntilTimeout>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_I2C_Master_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e01d      	b.n	8001474 <HAL_I2C_Master_Transmit+0x158>
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001446:	601a      	str	r2, [r3, #0]

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout) != HAL_OK)
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	2201      	movs	r2, #1
 800144c:	490c      	ldr	r1, [pc, #48]	; (8001480 <HAL_I2C_Master_Transmit+0x164>)
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 fdb2 	bl	8001fb8 <I2C_WaitOnFlagUntilTimeout>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_I2C_Master_Transmit+0x142>
    {
      return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e00a      	b.n	8001474 <HAL_I2C_Master_Transmit+0x158>
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e000      	b.n	8001474 <HAL_I2C_Master_Transmit+0x158>
  }
  else
  {
    return HAL_BUSY;
 8001472:	2302      	movs	r3, #2
  }
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	00010080 	.word	0x00010080
 8001480:	00100002 	.word	0x00100002

08001484 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0, tmp3 = 0, tmp4 = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  /* Master mode selected */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_MSL) == SET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	f040 8095 	bne.w	80015d6 <HAL_I2C_EV_IRQHandler+0x152>
  {
    /* I2C in mode Transmitter -----------------------------------------------*/
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == SET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d146      	bne.n	8001548 <HAL_I2C_EV_IRQHandler+0xc4>
    {
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c4:	2b80      	cmp	r3, #128	; 0x80
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	617b      	str	r3, [r7, #20]
      tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_BUF);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014de:	bf0c      	ite	eq
 80014e0:	2301      	moveq	r3, #1
 80014e2:	2300      	movne	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	613b      	str	r3, [r7, #16]
      tmp3 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf0c      	ite	eq
 80014f6:	2301      	moveq	r3, #1
 80014f8:	2300      	movne	r3, #0
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	60fb      	str	r3, [r7, #12]
      tmp4 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_EVT);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800150c:	bf0c      	ite	eq
 800150e:	2301      	moveq	r3, #1
 8001510:	2300      	movne	r3, #0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	60bb      	str	r3, [r7, #8]
      /* TXE set and BTF reset -----------------------------------------------*/
      if((tmp1 == SET) && (tmp2 == SET) && (tmp3 == RESET))
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d109      	bne.n	8001530 <HAL_I2C_EV_IRQHandler+0xac>
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d106      	bne.n	8001530 <HAL_I2C_EV_IRQHandler+0xac>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d103      	bne.n	8001530 <HAL_I2C_EV_IRQHandler+0xac>
      {
        I2C_MasterTransmit_TXE(hi2c);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 fa52 	bl	80019d2 <I2C_MasterTransmit_TXE>
 800152e:	e120      	b.n	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
      }
      /* BTF set -------------------------------------------------------------*/
      else if((tmp3 == SET) && (tmp4 == SET))
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b01      	cmp	r3, #1
 8001534:	f040 811d 	bne.w	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b01      	cmp	r3, #1
 800153c:	f040 8119 	bne.w	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
      {
        I2C_MasterTransmit_BTF(hi2c);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 fa6f 	bl	8001a24 <I2C_MasterTransmit_BTF>
      {
        I2C_SlaveReceive_BTF(hi2c);
      }
    }
  }
}
 8001546:	e114      	b.n	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001552:	2b40      	cmp	r3, #64	; 0x40
 8001554:	bf0c      	ite	eq
 8001556:	2301      	moveq	r3, #1
 8001558:	2300      	movne	r3, #0
 800155a:	b2db      	uxtb	r3, r3
 800155c:	617b      	str	r3, [r7, #20]
      tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_BUF);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800156c:	bf0c      	ite	eq
 800156e:	2301      	moveq	r3, #1
 8001570:	2300      	movne	r3, #0
 8001572:	b2db      	uxtb	r3, r3
 8001574:	613b      	str	r3, [r7, #16]
      tmp3 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b04      	cmp	r3, #4
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	60fb      	str	r3, [r7, #12]
      tmp4 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_EVT);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	60bb      	str	r3, [r7, #8]
      if((tmp1 == SET) && (tmp2 == SET) && (tmp3 == RESET))
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d109      	bne.n	80015be <HAL_I2C_EV_IRQHandler+0x13a>
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d106      	bne.n	80015be <HAL_I2C_EV_IRQHandler+0x13a>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d103      	bne.n	80015be <HAL_I2C_EV_IRQHandler+0x13a>
        I2C_MasterReceive_RXNE(hi2c);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 fa86 	bl	8001ac8 <I2C_MasterReceive_RXNE>
 80015bc:	e0d9      	b.n	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
      else if((tmp3 == SET) && (tmp4 == SET))
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	f040 80d6 	bne.w	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	f040 80d2 	bne.w	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
        I2C_MasterReceive_BTF(hi2c);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 faf0 	bl	8001bb4 <I2C_MasterReceive_BTF>
}
 80015d4:	e0cd      	b.n	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
    tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	617b      	str	r3, [r7, #20]
    tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, (I2C_IT_EVT));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	613b      	str	r3, [r7, #16]
    tmp3 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f003 0310 	and.w	r3, r3, #16
 800160e:	2b10      	cmp	r3, #16
 8001610:	bf0c      	ite	eq
 8001612:	2301      	moveq	r3, #1
 8001614:	2300      	movne	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	60fb      	str	r3, [r7, #12]
    tmp4 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b04      	cmp	r3, #4
 8001626:	bf0c      	ite	eq
 8001628:	2301      	moveq	r3, #1
 800162a:	2300      	movne	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	60bb      	str	r3, [r7, #8]
    if((tmp1 == SET) && (tmp2 == SET))
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d106      	bne.n	8001644 <HAL_I2C_EV_IRQHandler+0x1c0>
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d103      	bne.n	8001644 <HAL_I2C_EV_IRQHandler+0x1c0>
      I2C_Slave_ADDR(hi2c);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 fbd7 	bl	8001df0 <I2C_Slave_ADDR>
 8001642:	e096      	b.n	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
    else if((tmp3 == SET) && (tmp2 == SET))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d106      	bne.n	8001658 <HAL_I2C_EV_IRQHandler+0x1d4>
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d103      	bne.n	8001658 <HAL_I2C_EV_IRQHandler+0x1d4>
      I2C_Slave_STOPF(hi2c);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fbe1 	bl	8001e18 <I2C_Slave_STOPF>
 8001656:	e08c      	b.n	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
    else if(tmp4 == SET)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d144      	bne.n	80016e8 <HAL_I2C_EV_IRQHandler+0x264>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001668:	2b80      	cmp	r3, #128	; 0x80
 800166a:	bf0c      	ite	eq
 800166c:	2301      	moveq	r3, #1
 800166e:	2300      	movne	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	617b      	str	r3, [r7, #20]
      tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_BUF);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001682:	bf0c      	ite	eq
 8001684:	2301      	moveq	r3, #1
 8001686:	2300      	movne	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	613b      	str	r3, [r7, #16]
      tmp3 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf0c      	ite	eq
 800169a:	2301      	moveq	r3, #1
 800169c:	2300      	movne	r3, #0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	60fb      	str	r3, [r7, #12]
      tmp4 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_EVT);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016b0:	bf0c      	ite	eq
 80016b2:	2301      	moveq	r3, #1
 80016b4:	2300      	movne	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	60bb      	str	r3, [r7, #8]
      if((tmp1 == SET) && (tmp2 == SET) && (tmp3 == RESET))
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d109      	bne.n	80016d4 <HAL_I2C_EV_IRQHandler+0x250>
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d106      	bne.n	80016d4 <HAL_I2C_EV_IRQHandler+0x250>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d103      	bne.n	80016d4 <HAL_I2C_EV_IRQHandler+0x250>
        I2C_SlaveTransmit_TXE(hi2c);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fb0d 	bl	8001cec <I2C_SlaveTransmit_TXE>
 80016d2:	e04e      	b.n	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
      else if((tmp3 == SET) && (tmp4 == SET))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d14b      	bne.n	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d148      	bne.n	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
        I2C_SlaveTransmit_BTF(hi2c);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 fb23 	bl	8001d2c <I2C_SlaveTransmit_BTF>
}
 80016e6:	e044      	b.n	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f2:	2b40      	cmp	r3, #64	; 0x40
 80016f4:	bf0c      	ite	eq
 80016f6:	2301      	moveq	r3, #1
 80016f8:	2300      	movne	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	617b      	str	r3, [r7, #20]
      tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_BUF);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170c:	bf0c      	ite	eq
 800170e:	2301      	moveq	r3, #1
 8001710:	2300      	movne	r3, #0
 8001712:	b2db      	uxtb	r3, r3
 8001714:	613b      	str	r3, [r7, #16]
      tmp3 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b04      	cmp	r3, #4
 8001722:	bf0c      	ite	eq
 8001724:	2301      	moveq	r3, #1
 8001726:	2300      	movne	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	60fb      	str	r3, [r7, #12]
      tmp4 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_EVT);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800173a:	bf0c      	ite	eq
 800173c:	2301      	moveq	r3, #1
 800173e:	2300      	movne	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	60bb      	str	r3, [r7, #8]
      if((tmp1 == SET) && (tmp2 == SET) && (tmp3 == RESET))
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d109      	bne.n	800175e <HAL_I2C_EV_IRQHandler+0x2da>
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d106      	bne.n	800175e <HAL_I2C_EV_IRQHandler+0x2da>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d103      	bne.n	800175e <HAL_I2C_EV_IRQHandler+0x2da>
        I2C_SlaveReceive_RXNE(hi2c);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fb08 	bl	8001d6c <I2C_SlaveReceive_RXNE>
 800175c:	e009      	b.n	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
      else if((tmp3 == SET) && (tmp4 == SET))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d106      	bne.n	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d103      	bne.n	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
        I2C_SlaveReceive_BTF(hi2c);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fb1f 	bl	8001dae <I2C_SlaveReceive_BTF>
}
 8001770:	e7ff      	b.n	8001772 <HAL_I2C_EV_IRQHandler+0x2ee>
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0, tmp3 = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]

  tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BERR);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800179c:	bf0c      	ite	eq
 800179e:	2301      	moveq	r3, #1
 80017a0:	2300      	movne	r3, #0
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	617b      	str	r3, [r7, #20]
  tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_ERR);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017b4:	bf0c      	ite	eq
 80017b6:	2301      	moveq	r3, #1
 80017b8:	2300      	movne	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	613b      	str	r3, [r7, #16]
  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if((tmp1 == SET) && (tmp2 == SET))
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d10d      	bne.n	80017e0 <HAL_I2C_ER_IRQHandler+0x66>
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d10a      	bne.n	80017e0 <HAL_I2C_ER_IRQHandler+0x66>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ce:	f043 0201 	orr.w	r2, r3, #1
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80017de:	615a      	str	r2, [r3, #20]
  }

  tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ARLO);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	617b      	str	r3, [r7, #20]
  tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_ERR);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001806:	bf0c      	ite	eq
 8001808:	2301      	moveq	r3, #1
 800180a:	2300      	movne	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	613b      	str	r3, [r7, #16]
  /* I2C Arbitration Loss error interrupt occurred ---------------------------*/
  if((tmp1 == SET) && (tmp2 == SET))
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d10d      	bne.n	8001832 <HAL_I2C_ER_IRQHandler+0xb8>
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d10a      	bne.n	8001832 <HAL_I2C_ER_IRQHandler+0xb8>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001820:	f043 0202 	orr.w	r2, r3, #2
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	639a      	str	r2, [r3, #56]	; 0x38

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001830:	615a      	str	r2, [r3, #20]
  }

  tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001840:	bf0c      	ite	eq
 8001842:	2301      	moveq	r3, #1
 8001844:	2300      	movne	r3, #0
 8001846:	b2db      	uxtb	r3, r3
 8001848:	617b      	str	r3, [r7, #20]
  tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_ERR);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001858:	bf0c      	ite	eq
 800185a:	2301      	moveq	r3, #1
 800185c:	2300      	movne	r3, #0
 800185e:	b2db      	uxtb	r3, r3
 8001860:	613b      	str	r3, [r7, #16]
  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if((tmp1 == SET) && (tmp2 == SET))
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d12e      	bne.n	80018c6 <HAL_I2C_ER_IRQHandler+0x14c>
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d12b      	bne.n	80018c6 <HAL_I2C_ER_IRQHandler+0x14c>
  {
    tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_MSL);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b01      	cmp	r3, #1
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	617b      	str	r3, [r7, #20]
    tmp2 = hi2c->XferCount;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001888:	b29b      	uxth	r3, r3
 800188a:	613b      	str	r3, [r7, #16]
    tmp3 = hi2c->State;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001892:	b2db      	uxtb	r3, r3
 8001894:	60fb      	str	r3, [r7, #12]
    if((tmp1 == RESET) && (tmp2 == 0) && (tmp3 == HAL_I2C_STATE_BUSY_TX))
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d109      	bne.n	80018b0 <HAL_I2C_ER_IRQHandler+0x136>
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d106      	bne.n	80018b0 <HAL_I2C_ER_IRQHandler+0x136>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b12      	cmp	r3, #18
 80018a6:	d103      	bne.n	80018b0 <HAL_I2C_ER_IRQHandler+0x136>
    {
      I2C_Slave_AF(hi2c);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 faef 	bl	8001e8c <I2C_Slave_AF>
 80018ae:	e00a      	b.n	80018c6 <HAL_I2C_ER_IRQHandler+0x14c>
    }
    else
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b4:	f043 0204 	orr.w	r2, r3, #4
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	639a      	str	r2, [r3, #56]	; 0x38
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018c4:	615a      	str	r2, [r3, #20]
    }
  }

  tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_OVR);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018d4:	bf0c      	ite	eq
 80018d6:	2301      	moveq	r3, #1
 80018d8:	2300      	movne	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	617b      	str	r3, [r7, #20]
  tmp2 = __HAL_I2C_GET_IT_SOURCE(hi2c, I2C_IT_ERR);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ec:	bf0c      	ite	eq
 80018ee:	2301      	moveq	r3, #1
 80018f0:	2300      	movne	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	613b      	str	r3, [r7, #16]
  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if((tmp1 == SET) && (tmp2 == SET))
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d10d      	bne.n	8001918 <HAL_I2C_ER_IRQHandler+0x19e>
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d10a      	bne.n	8001918 <HAL_I2C_ER_IRQHandler+0x19e>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001906:	f043 0208 	orr.w	r2, r3, #8
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001916:	615a      	str	r2, [r3, #20]
  }

  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00e      	beq.n	800193e <HAL_I2C_ER_IRQHandler+0x1c4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001936:	601a      	str	r2, [r3, #0]
    
    HAL_I2C_ErrorCallback(hi2c);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f840 	bl	80019be <HAL_I2C_ErrorCallback>
  }
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_TxCpltCallback could be implemented in the user file
   */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_TxCpltCallback could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_TxCpltCallback could be implemented in the user file
   */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_TxCpltCallback could be implemented in the user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_TxCpltCallback could be implemented in the user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_TxCpltCallback could be implemented in the user file
   */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <HAL_I2C_ErrorCallback>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
 __weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  /* Write data to DR */
  hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	1c59      	adds	r1, r3, #1
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6251      	str	r1, [r2, #36]	; 0x24
 80019e4:	781a      	ldrb	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	611a      	str	r2, [r3, #16]
  hi2c->XferCount--;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if(hi2c->XferCount == 0)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d107      	bne.n	8001a14 <I2C_MasterTransmit_TXE+0x42>
  {
    /* Disable BUF interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <I2C_MasterTransmit_BTF>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d010      	beq.n	8001a58 <I2C_MasterTransmit_BTF+0x34>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	1c59      	adds	r1, r3, #1
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6251      	str	r1, [r2, #36]	; 0x24
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a56:	e02f      	b.n	8001ab8 <I2C_MasterTransmit_BTF+0x94>
  }
  else
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a66:	605a      	str	r2, [r3, #4]

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a76:	601a      	str	r2, [r3, #0]

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_FLAG) != HAL_OK)
 8001a78:	2323      	movs	r3, #35	; 0x23
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4911      	ldr	r1, [pc, #68]	; (8001ac4 <I2C_MasterTransmit_BTF+0xa0>)
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fa9a 	bl	8001fb8 <I2C_WaitOnFlagUntilTimeout>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <I2C_MasterTransmit_BTF+0x6a>
    {
      return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e015      	b.n	8001aba <I2C_MasterTransmit_BTF+0x96>
    }

    if(hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b32      	cmp	r3, #50	; 0x32
 8001a98:	d107      	bne.n	8001aaa <I2C_MasterTransmit_BTF+0x86>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      HAL_I2C_MemTxCpltCallback(hi2c);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff77 	bl	8001996 <HAL_I2C_MemTxCpltCallback>
 8001aa8:	e006      	b.n	8001ab8 <I2C_MasterTransmit_BTF+0x94>
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ff47 	bl	8001946 <HAL_I2C_MasterTxCpltCallback>
    }
  }
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	00100002 	.word	0x00100002

08001ac8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]

  tmp = hi2c->XferCount;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	60fb      	str	r3, [r7, #12]
  if(tmp > 3)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d911      	bls.n	8001b06 <I2C_MasterReceive_RXNE+0x3e>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6918      	ldr	r0, [r3, #16]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	1c59      	adds	r1, r3, #1
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6251      	str	r1, [r2, #36]	; 0x24
 8001af2:	b2c2      	uxtb	r2, r0
 8001af4:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b04:	e04f      	b.n	8001ba6 <I2C_MasterReceive_RXNE+0xde>
  }
  else if((tmp == 2) || (tmp == 3))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d002      	beq.n	8001b12 <I2C_MasterReceive_RXNE+0x4a>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d108      	bne.n	8001b24 <I2C_MasterReceive_RXNE+0x5c>
  {
    /* Disable BUF interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	e040      	b.n	8001ba6 <I2C_MasterReceive_RXNE+0xde>
  }
  else
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b32:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6918      	ldr	r0, [r3, #16]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	1c59      	adds	r1, r3, #1
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6251      	str	r1, [r2, #36]	; 0x24
 8001b44:	b2c2      	uxtb	r2, r0
 8001b46:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_FLAG) != HAL_OK)
 8001b56:	2323      	movs	r3, #35	; 0x23
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4915      	ldr	r1, [pc, #84]	; (8001bb0 <I2C_MasterReceive_RXNE+0xe8>)
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 fa2b 	bl	8001fb8 <I2C_WaitOnFlagUntilTimeout>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <I2C_MasterReceive_RXNE+0xa4>
    {
      return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e01d      	b.n	8001ba8 <I2C_MasterReceive_RXNE+0xe0>
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b7a:	601a      	str	r2, [r3, #0]
    
    if(hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b42      	cmp	r3, #66	; 0x42
 8001b86:	d107      	bne.n	8001b98 <I2C_MasterReceive_RXNE+0xd0>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      HAL_I2C_MemRxCpltCallback(hi2c);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff0a 	bl	80019aa <HAL_I2C_MemRxCpltCallback>
 8001b96:	e006      	b.n	8001ba6 <I2C_MasterReceive_RXNE+0xde>
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff feda 	bl	800195a <HAL_I2C_MasterRxCpltCallback>
    }
  }
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	00100002 	.word	0x00100002

08001bb4 <I2C_MasterReceive_BTF>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount == 3)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d119      	bne.n	8001bfa <I2C_MasterReceive_BTF+0x46>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bd4:	601a      	str	r2, [r3, #0]

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6918      	ldr	r0, [r3, #16]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	1c59      	adds	r1, r3, #1
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6251      	str	r1, [r2, #36]	; 0x24
 8001be6:	b2c2      	uxtb	r2, r0
 8001be8:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bf8:	e070      	b.n	8001cdc <I2C_MasterReceive_BTF+0x128>
  }
  else if(hi2c->XferCount == 2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d15a      	bne.n	8001cba <I2C_MasterReceive_BTF+0x106>
  {
    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c12:	601a      	str	r2, [r3, #0]

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6918      	ldr	r0, [r3, #16]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	1c59      	adds	r1, r3, #1
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6251      	str	r1, [r2, #36]	; 0x24
 8001c24:	b2c2      	uxtb	r2, r0
 8001c26:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6918      	ldr	r0, [r3, #16]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	1c59      	adds	r1, r3, #1
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6251      	str	r1, [r2, #36]	; 0x24
 8001c46:	b2c2      	uxtb	r2, r0
 8001c48:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c66:	605a      	str	r2, [r3, #4]

    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_FLAG) != HAL_OK)
 8001c68:	2323      	movs	r3, #35	; 0x23
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	491e      	ldr	r1, [pc, #120]	; (8001ce8 <I2C_MasterReceive_BTF+0x134>)
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f9a2 	bl	8001fb8 <I2C_WaitOnFlagUntilTimeout>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <I2C_MasterReceive_BTF+0xca>
    {
      return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e02f      	b.n	8001cde <I2C_MasterReceive_BTF+0x12a>
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c8c:	601a      	str	r2, [r3, #0]
    
    if(hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b42      	cmp	r3, #66	; 0x42
 8001c98:	d107      	bne.n	8001caa <I2C_MasterReceive_BTF+0xf6>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      HAL_I2C_MemRxCpltCallback(hi2c);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fe81 	bl	80019aa <HAL_I2C_MemRxCpltCallback>
 8001ca8:	e018      	b.n	8001cdc <I2C_MasterReceive_BTF+0x128>
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fe51 	bl	800195a <HAL_I2C_MasterRxCpltCallback>
 8001cb8:	e010      	b.n	8001cdc <I2C_MasterReceive_BTF+0x128>
    }
  }
  else
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6918      	ldr	r0, [r3, #16]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	1c59      	adds	r1, r3, #1
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6251      	str	r1, [r2, #36]	; 0x24
 8001cca:	b2c2      	uxtb	r2, r0
 8001ccc:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	00100002 	.word	0x00100002

08001cec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00f      	beq.n	8001d1e <I2C_SlaveTransmit_TXE+0x32>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	1c59      	adds	r1, r3, #1
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6251      	str	r1, [r2, #36]	; 0x24
 8001d08:	781a      	ldrb	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00f      	beq.n	8001d5e <I2C_SlaveTransmit_BTF+0x32>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	1c59      	adds	r1, r3, #1
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6251      	str	r1, [r2, #36]	; 0x24
 8001d48:	781a      	ldrb	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d010      	beq.n	8001da0 <I2C_SlaveReceive_RXNE+0x34>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6918      	ldr	r0, [r3, #16]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	1c59      	adds	r1, r3, #1
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6251      	str	r1, [r2, #36]	; 0x24
 8001d8e:	b2c2      	uxtb	r2, r0
 8001d90:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <I2C_SlaveReceive_BTF>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  if(hi2c->XferCount != 0)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d010      	beq.n	8001de2 <I2C_SlaveReceive_BTF+0x34>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6918      	ldr	r0, [r3, #16]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	1c59      	adds	r1, r3, #1
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6251      	str	r1, [r2, #36]	; 0x24
 8001dd0:	b2c2      	uxtb	r2, r0
 8001dd2:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <I2C_Slave_ADDR>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <I2C_Slave_STOPF>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e2e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e58:	601a      	str	r2, [r3, #0]

  /* Wait until BUSY flag is reset */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_FLAG) != HAL_OK)
 8001e5a:	2323      	movs	r3, #35	; 0x23
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	490a      	ldr	r1, [pc, #40]	; (8001e88 <I2C_Slave_STOPF+0x70>)
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f8a9 	bl	8001fb8 <I2C_WaitOnFlagUntilTimeout>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <I2C_Slave_STOPF+0x58>
  {
    return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e007      	b.n	8001e80 <I2C_Slave_STOPF+0x68>
  }

  hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff fd82 	bl	8001982 <HAL_I2C_SlaveRxCpltCallback>

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	00100002 	.word	0x00100002

08001e8c <I2C_Slave_AF>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ea2:	605a      	str	r2, [r3, #4]

  /* Clear AF flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eac:	615a      	str	r2, [r3, #20]

  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ebc:	601a      	str	r2, [r3, #0]

  /* Wait until BUSY flag is reset */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_FLAG) != HAL_OK)
 8001ebe:	2323      	movs	r3, #35	; 0x23
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	490a      	ldr	r1, [pc, #40]	; (8001eec <I2C_Slave_AF+0x60>)
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f877 	bl	8001fb8 <I2C_WaitOnFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <I2C_Slave_AF+0x48>
  {
    return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e007      	b.n	8001ee4 <I2C_Slave_AF+0x58>
  }

  hi2c->State = HAL_I2C_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff fd46 	bl	800196e <HAL_I2C_SlaveTxCpltCallback>

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	00100002 	.word	0x00100002

08001ef0 <I2C_MasterRequestWrite>:
  * @param  DevAddress: Target device address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	817b      	strh	r3, [r7, #10]
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout) != HAL_OK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f84e 	bl	8001fb8 <I2C_WaitOnFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <I2C_MasterRequestWrite+0x36>
  {
    return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e03f      	b.n	8001fa6 <I2C_MasterRequestWrite+0xb6>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f2e:	d108      	bne.n	8001f42 <I2C_MasterRequestWrite+0x52>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f30:	897b      	ldrh	r3, [r7, #10]
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f3e:	611a      	str	r2, [r3, #16]
 8001f40:	e020      	b.n	8001f84 <I2C_MasterRequestWrite+0x94>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f42:	897b      	ldrh	r3, [r7, #10]
 8001f44:	11db      	asrs	r3, r3, #7
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f003 0306 	and.w	r3, r3, #6
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	f063 030f 	orn	r3, r3, #15
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout) != HAL_OK)
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4914      	ldr	r1, [pc, #80]	; (8001fb0 <I2C_MasterRequestWrite+0xc0>)
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f8b3 	bl	80020ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <I2C_MasterRequestWrite+0x8a>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d101      	bne.n	8001f76 <I2C_MasterRequestWrite+0x86>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e017      	b.n	8001fa6 <I2C_MasterRequestWrite+0xb6>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e015      	b.n	8001fa6 <I2C_MasterRequestWrite+0xb6>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f7a:	897b      	ldrh	r3, [r7, #10]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout) != HAL_OK)
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	490b      	ldr	r1, [pc, #44]	; (8001fb4 <I2C_MasterRequestWrite+0xc4>)
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f89e 	bl	80020ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <I2C_MasterRequestWrite+0xb4>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d101      	bne.n	8001fa0 <I2C_MasterRequestWrite+0xb0>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e002      	b.n	8001fa6 <I2C_MasterRequestWrite+0xb6>
    }
    else
    {
      return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <I2C_MasterRequestWrite+0xb6>
    }
  }

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	00010008 	.word	0x00010008
 8001fb4:	00010002 	.word	0x00010002

08001fb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fcc:	f7fe fd98 	bl	8000b00 <HAL_GetTick>
 8001fd0:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d153      	bne.n	8002080 <I2C_WaitOnFlagUntilTimeout+0xc8>
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fd8:	e018      	b.n	800200c <I2C_WaitOnFlagUntilTimeout+0x54>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d014      	beq.n	800200c <I2C_WaitOnFlagUntilTimeout+0x54>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <I2C_WaitOnFlagUntilTimeout+0x40>
 8001fe8:	f7fe fd8a 	bl	8000b00 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d209      	bcs.n	800200c <I2C_WaitOnFlagUntilTimeout+0x54>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e05a      	b.n	80020c2 <I2C_WaitOnFlagUntilTimeout+0x10a>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	0c1b      	lsrs	r3, r3, #16
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b01      	cmp	r3, #1
 8002014:	d10c      	bne.n	8002030 <I2C_WaitOnFlagUntilTimeout+0x78>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	43da      	mvns	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	4013      	ands	r3, r2
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf14      	ite	ne
 8002028:	2301      	movne	r3, #1
 800202a:	2300      	moveq	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	e00b      	b.n	8002048 <I2C_WaitOnFlagUntilTimeout+0x90>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4013      	ands	r3, r2
 800203c:	b29b      	uxth	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf14      	ite	ne
 8002042:	2301      	movne	r3, #1
 8002044:	2300      	moveq	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1c6      	bne.n	8001fda <I2C_WaitOnFlagUntilTimeout+0x22>
 800204c:	e038      	b.n	80020c0 <I2C_WaitOnFlagUntilTimeout+0x108>
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d014      	beq.n	8002080 <I2C_WaitOnFlagUntilTimeout+0xc8>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <I2C_WaitOnFlagUntilTimeout+0xb4>
 800205c:	f7fe fd50 	bl	8000b00 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d209      	bcs.n	8002080 <I2C_WaitOnFlagUntilTimeout+0xc8>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e020      	b.n	80020c2 <I2C_WaitOnFlagUntilTimeout+0x10a>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	0c1b      	lsrs	r3, r3, #16
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d10c      	bne.n	80020a4 <I2C_WaitOnFlagUntilTimeout+0xec>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	43da      	mvns	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	4013      	ands	r3, r2
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	e00b      	b.n	80020bc <I2C_WaitOnFlagUntilTimeout+0x104>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4013      	ands	r3, r2
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bf0c      	ite	eq
 80020b6:	2301      	moveq	r3, #1
 80020b8:	2300      	movne	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1c6      	bne.n	800204e <I2C_WaitOnFlagUntilTimeout+0x96>
        }
      }
    }
  }
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Flag: specifies the I2C flag to check.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020da:	f7fe fd11 	bl	8000b00 <HAL_GetTick>
 80020de:	6178      	str	r0, [r7, #20]

  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020e0:	e03a      	b.n	8002158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8e>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f0:	d119      	bne.n	8002126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5c>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002100:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800210a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2204      	movs	r2, #4
 8002110:	639a      	str	r2, [r3, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e039      	b.n	800219a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d014      	beq.n	8002158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8e>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x7a>
 8002134:	f7fe fce4 	bl	8000b00 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	d209      	bcs.n	8002158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8e>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e020      	b.n	800219a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	0c1b      	lsrs	r3, r3, #16
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d10c      	bne.n	800217c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	43da      	mvns	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	4013      	ands	r3, r2
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf14      	ite	ne
 8002174:	2301      	movne	r3, #1
 8002176:	2300      	moveq	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	e00b      	b.n	8002194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xca>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	43da      	mvns	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4013      	ands	r3, r2
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	bf14      	ite	ne
 800218e:	2301      	movne	r3, #1
 8002190:	2300      	moveq	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1a4      	bne.n	80020e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b098      	sub	sp, #96	; 0x60
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;  
 80021ac:	2300      	movs	r3, #0
 80021ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d06c      	beq.n	8002296 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021bc:	4b91      	ldr	r3, [pc, #580]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d00c      	beq.n	80021e2 <HAL_RCC_OscConfig+0x3e>
 80021c8:	4b8e      	ldr	r3, [pc, #568]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d112      	bne.n	80021fa <HAL_RCC_OscConfig+0x56>
 80021d4:	4b8b      	ldr	r3, [pc, #556]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e0:	d10b      	bne.n	80021fa <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e2:	4b88      	ldr	r3, [pc, #544]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d052      	beq.n	8002294 <HAL_RCC_OscConfig+0xf0>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d14e      	bne.n	8002294 <HAL_RCC_OscConfig+0xf0>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e21e      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80021fa:	4b83      	ldr	r3, [pc, #524]	; (8002408 <HAL_RCC_OscConfig+0x264>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7fe fc7e 	bl	8000b00 <HAL_GetTick>
 8002204:	65f8      	str	r0, [r7, #92]	; 0x5c
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002208:	f7fe fc7a 	bl	8000b00 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e20c      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	4b79      	ldr	r3, [pc, #484]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ee      	bne.n	8002208 <HAL_RCC_OscConfig+0x64>
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4b76      	ldr	r3, [pc, #472]	; (8002408 <HAL_RCC_OscConfig+0x264>)
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d015      	beq.n	8002268 <HAL_RCC_OscConfig+0xc4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe fc60 	bl	8000b00 <HAL_GetTick>
 8002240:	65f8      	str	r0, [r7, #92]	; 0x5c
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	e00a      	b.n	800225a <HAL_RCC_OscConfig+0xb6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002244:	f7fe fc5c 	bl	8000b00 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xb6>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e1ee      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	4b6a      	ldr	r3, [pc, #424]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0ee      	beq.n	8002244 <HAL_RCC_OscConfig+0xa0>
 8002266:	e016      	b.n	8002296 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002268:	f7fe fc4a 	bl	8000b00 <HAL_GetTick>
 800226c:	65f8      	str	r0, [r7, #92]	; 0x5c

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	e00a      	b.n	8002286 <HAL_RCC_OscConfig+0xe2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002270:	f7fe fc46 	bl	8000b00 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1d8      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	4b5f      	ldr	r3, [pc, #380]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1ee      	bne.n	8002270 <HAL_RCC_OscConfig+0xcc>
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0xf2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d07f      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1fe>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a2:	4b58      	ldr	r3, [pc, #352]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_RCC_OscConfig+0x122>
 80022ae:	4b55      	ldr	r3, [pc, #340]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d12a      	bne.n	8002310 <HAL_RCC_OscConfig+0x16c>
 80022ba:	4b52      	ldr	r3, [pc, #328]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d124      	bne.n	8002310 <HAL_RCC_OscConfig+0x16c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	4b4f      	ldr	r3, [pc, #316]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_RCC_OscConfig+0x13a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d001      	beq.n	80022de <HAL_RCC_OscConfig+0x13a>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e1ac      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022de:	4b49      	ldr	r3, [pc, #292]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	21f8      	movs	r1, #248	; 0xf8
 80022ec:	6539      	str	r1, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80022f0:	fa91 f1a1 	rbit	r1, r1
 80022f4:	64f9      	str	r1, [r7, #76]	; 0x4c
   return(result);
 80022f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80022f8:	65b9      	str	r1, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80022fc:	fab1 f181 	clz	r1, r1
 8002300:	6579      	str	r1, [r7, #84]	; 0x54
  return(result);
 8002302:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002304:	b2c9      	uxtb	r1, r1
 8002306:	408b      	lsls	r3, r1
 8002308:	493e      	ldr	r1, [pc, #248]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	e048      	b.n	80023a2 <HAL_RCC_OscConfig+0x1fe>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d02e      	beq.n	8002376 <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002318:	4b3c      	ldr	r3, [pc, #240]	; (800240c <HAL_RCC_OscConfig+0x268>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231e:	f7fe fbef 	bl	8000b00 <HAL_GetTick>
 8002322:	65f8      	str	r0, [r7, #92]	; 0x5c

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x194>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002326:	f7fe fbeb 	bl	8000b00 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b64      	cmp	r3, #100	; 0x64
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x194>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e17f      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	4b32      	ldr	r3, [pc, #200]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x182>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	21f8      	movs	r1, #248	; 0xf8
 8002352:	6439      	str	r1, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002356:	fa91 f1a1 	rbit	r1, r1
 800235a:	63f9      	str	r1, [r7, #60]	; 0x3c
   return(result);
 800235c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800235e:	64b9      	str	r1, [r7, #72]	; 0x48
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002360:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002362:	fab1 f181 	clz	r1, r1
 8002366:	6479      	str	r1, [r7, #68]	; 0x44
  return(result);
 8002368:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800236a:	b2c9      	uxtb	r1, r1
 800236c:	408b      	lsls	r3, r1
 800236e:	4925      	ldr	r1, [pc, #148]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]
 8002374:	e015      	b.n	80023a2 <HAL_RCC_OscConfig+0x1fe>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002376:	4b25      	ldr	r3, [pc, #148]	; (800240c <HAL_RCC_OscConfig+0x268>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fbc0 	bl	8000b00 <HAL_GetTick>
 8002380:	65f8      	str	r0, [r7, #92]	; 0x5c
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002384:	f7fe fbbc 	bl	8000b00 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e150      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x1e0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d038      	beq.n	8002420 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d016      	beq.n	80023e4 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023bc:	f7fe fba0 	bl	8000b00 <HAL_GetTick>
 80023c0:	65f8      	str	r0, [r7, #92]	; 0x5c
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x232>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c4:	f7fe fb9c 	bl	8000b00 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	; 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e130      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RCC_OscConfig+0x260>)
 80023d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0f0      	beq.n	80023c4 <HAL_RCC_OscConfig+0x220>
 80023e2:	e01d      	b.n	8002420 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ea:	f7fe fb89 	bl	8000b00 <HAL_GetTick>
 80023ee:	65f8      	str	r0, [r7, #92]	; 0x5c
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f0:	e010      	b.n	8002414 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f2:	f7fe fb85 	bl	8000b00 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b64      	cmp	r3, #100	; 0x64
 80023fe:	d909      	bls.n	8002414 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e119      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
 8002404:	40023800 	.word	0x40023800
 8002408:	40023802 	.word	0x40023802
 800240c:	42470000 	.word	0x42470000
 8002410:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002414:	4b8a      	ldr	r3, [pc, #552]	; (8002640 <HAL_RCC_OscConfig+0x49c>)
 8002416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1e8      	bne.n	80023f2 <HAL_RCC_OscConfig+0x24e>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d06a      	beq.n	8002502 <HAL_RCC_OscConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800242c:	4b84      	ldr	r3, [pc, #528]	; (8002640 <HAL_RCC_OscConfig+0x49c>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	4a83      	ldr	r2, [pc, #524]	; (8002640 <HAL_RCC_OscConfig+0x49c>)
 8002432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002436:	6413      	str	r3, [r2, #64]	; 0x40
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002438:	4b82      	ldr	r3, [pc, #520]	; (8002644 <HAL_RCC_OscConfig+0x4a0>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a81      	ldr	r2, [pc, #516]	; (8002644 <HAL_RCC_OscConfig+0x4a0>)
 800243e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002442:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002444:	f7fe fb5c 	bl	8000b00 <HAL_GetTick>
 8002448:	65f8      	str	r0, [r7, #92]	; 0x5c
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x2ba>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800244c:	f7fe fb58 	bl	8000b00 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x2ba>
      {
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e0ec      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800245e:	4b79      	ldr	r3, [pc, #484]	; (8002644 <HAL_RCC_OscConfig+0x4a0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x2a8>
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 800246a:	4b77      	ldr	r3, [pc, #476]	; (8002648 <HAL_RCC_OscConfig+0x4a4>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002470:	f7fe fb46 	bl	8000b00 <HAL_GetTick>
 8002474:	65f8      	str	r0, [r7, #92]	; 0x5c
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002476:	e00a      	b.n	800248e <HAL_RCC_OscConfig+0x2ea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002478:	f7fe fb42 	bl	8000b00 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	f241 3288 	movw	r2, #5000	; 0x1388
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e0d4      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248e:	4b6c      	ldr	r3, [pc, #432]	; (8002640 <HAL_RCC_OscConfig+0x49c>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1ee      	bne.n	8002478 <HAL_RCC_OscConfig+0x2d4>
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	4b6a      	ldr	r3, [pc, #424]	; (8002648 <HAL_RCC_OscConfig+0x4a4>)
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) == RCC_LSE_ON)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d115      	bne.n	80024d8 <HAL_RCC_OscConfig+0x334>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7fe fb28 	bl	8000b00 <HAL_GetTick>
 80024b0:	65f8      	str	r0, [r7, #92]	; 0x5c
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7fe fb24 	bl	8000b00 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e0b6      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ca:	4b5d      	ldr	r3, [pc, #372]	; (8002640 <HAL_RCC_OscConfig+0x49c>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0ee      	beq.n	80024b4 <HAL_RCC_OscConfig+0x310>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x35e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7fe fb12 	bl	8000b00 <HAL_GetTick>
 80024dc:	65f8      	str	r0, [r7, #92]	; 0x5c
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_OscConfig+0x352>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e0:	f7fe fb0e 	bl	8000b00 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x352>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e0a0      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f6:	4b52      	ldr	r3, [pc, #328]	; (8002640 <HAL_RCC_OscConfig+0x49c>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ee      	bne.n	80024e0 <HAL_RCC_OscConfig+0x33c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8095 	beq.w	8002636 <HAL_RCC_OscConfig+0x492>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800250c:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <HAL_RCC_OscConfig+0x49c>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b08      	cmp	r3, #8
 8002516:	f000 808c 	beq.w	8002632 <HAL_RCC_OscConfig+0x48e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d170      	bne.n	8002604 <HAL_RCC_OscConfig+0x460>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002522:	4b4a      	ldr	r3, [pc, #296]	; (800264c <HAL_RCC_OscConfig+0x4a8>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7fe faea 	bl	8000b00 <HAL_GetTick>
 800252c:	65f8      	str	r0, [r7, #92]	; 0x5c
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x39e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe fae6 	bl	8000b00 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x39e>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e07a      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <HAL_RCC_OscConfig+0x49c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x38c>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1a      	ldr	r2, [r3, #32]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800255a:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6939      	ldr	r1, [r7, #16]
 800255e:	fa91 f1a1 	rbit	r1, r1
 8002562:	60f9      	str	r1, [r7, #12]
   return(result);
 8002564:	68f9      	ldr	r1, [r7, #12]
 8002566:	61b9      	str	r1, [r7, #24]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002568:	69b9      	ldr	r1, [r7, #24]
 800256a:	fab1 f181 	clz	r1, r1
 800256e:	6179      	str	r1, [r7, #20]
  return(result);
 8002570:	6979      	ldr	r1, [r7, #20]
 8002572:	b2c9      	uxtb	r1, r1
 8002574:	408b      	lsls	r3, r1
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	085b      	lsrs	r3, r3, #1
 800257e:	3b01      	subs	r3, #1
 8002580:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8002584:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6a39      	ldr	r1, [r7, #32]
 8002588:	fa91 f1a1 	rbit	r1, r1
 800258c:	61f9      	str	r1, [r7, #28]
   return(result);
 800258e:	69f9      	ldr	r1, [r7, #28]
 8002590:	62b9      	str	r1, [r7, #40]	; 0x28
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002594:	fab1 f181 	clz	r1, r1
 8002598:	6279      	str	r1, [r7, #36]	; 0x24
  return(result);
 800259a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800259c:	b2c9      	uxtb	r1, r1
 800259e:	408b      	lsls	r3, r1
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80025b0:	6339      	str	r1, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025b4:	fa91 f1a1 	rbit	r1, r1
 80025b8:	62f9      	str	r1, [r7, #44]	; 0x2c
   return(result);
 80025ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025bc:	63b9      	str	r1, [r7, #56]	; 0x38
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80025be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025c0:	fab1 f181 	clz	r1, r1
 80025c4:	6379      	str	r1, [r7, #52]	; 0x34
  return(result);
 80025c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025c8:	b2c9      	uxtb	r1, r1
 80025ca:	408b      	lsls	r3, r1
 80025cc:	4313      	orrs	r3, r2
 80025ce:	4a1c      	ldr	r2, [pc, #112]	; (8002640 <HAL_RCC_OscConfig+0x49c>)
 80025d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80025d4:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLM,
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_RCC_OscConfig+0x4a8>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe fa90 	bl	8000b00 <HAL_GetTick>
 80025e0:	65f8      	str	r0, [r7, #92]	; 0x5c
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x452>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe fa8c 	bl	8000b00 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b64      	cmp	r3, #100	; 0x64
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x452>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e020      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_RCC_OscConfig+0x49c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x440>
 8002602:	e018      	b.n	8002636 <HAL_RCC_OscConfig+0x492>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_RCC_OscConfig+0x4a8>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7fe fa79 	bl	8000b00 <HAL_GetTick>
 800260e:	65f8      	str	r0, [r7, #92]	; 0x5c
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x480>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002612:	f7fe fa75 	bl	8000b00 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b64      	cmp	r3, #100	; 0x64
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x480>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e009      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_RCC_OscConfig+0x49c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f0      	bne.n	8002612 <HAL_RCC_OscConfig+0x46e>
 8002630:	e001      	b.n	8002636 <HAL_RCC_OscConfig+0x492>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_RCC_OscConfig+0x494>
    }
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3760      	adds	r7, #96	; 0x60
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	40007000 	.word	0x40007000
 8002648:	40023870 	.word	0x40023870
 800264c:	42470060 	.word	0x42470060

08002650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;   
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800265e:	4b92      	ldr	r3, [pc, #584]	; (80028a8 <HAL_RCC_ClockConfig+0x258>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	f240 808f 	bls.w	800278c <HAL_RCC_ClockConfig+0x13c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b8e      	ldr	r3, [pc, #568]	; (80028a8 <HAL_RCC_ClockConfig+0x258>)
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002676:	4b8c      	ldr	r3, [pc, #560]	; (80028a8 <HAL_RCC_ClockConfig+0x258>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x38>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e136      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2a6>
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x56>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002694:	4b85      	ldr	r3, [pc, #532]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4982      	ldr	r1, [pc, #520]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80fe 	beq.w	80028b0 <HAL_RCC_ClockConfig+0x260>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d107      	bne.n	80026cc <HAL_RCC_ClockConfig+0x7c>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026bc:	4b7b      	ldr	r3, [pc, #492]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d115      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e114      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2a6>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d107      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x94>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d4:	4b75      	ldr	r3, [pc, #468]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d109      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e108      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	4b71      	ldr	r3, [pc, #452]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e100      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2a6>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026f4:	4b6d      	ldr	r3, [pc, #436]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f023 0203 	bic.w	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	496a      	ldr	r1, [pc, #424]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
 
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002706:	f7fe f9fb 	bl	8000b00 <HAL_GetTick>
 800270a:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d112      	bne.n	800273a <HAL_RCC_ClockConfig+0xea>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002714:	e00a      	b.n	800272c <HAL_RCC_ClockConfig+0xdc>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002716:	f7fe f9f3 	bl	8000b00 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	f241 3288 	movw	r2, #5000	; 0x1388
 8002724:	4293      	cmp	r3, r2
 8002726:	d901      	bls.n	800272c <HAL_RCC_ClockConfig+0xdc>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e0e4      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2a6>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800272c:	4b5f      	ldr	r3, [pc, #380]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b04      	cmp	r3, #4
 8002736:	d1ee      	bne.n	8002716 <HAL_RCC_ClockConfig+0xc6>
 8002738:	e0ba      	b.n	80028b0 <HAL_RCC_ClockConfig+0x260>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d11d      	bne.n	800277e <HAL_RCC_ClockConfig+0x12e>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002742:	e00a      	b.n	800275a <HAL_RCC_ClockConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002744:	f7fe f9dc 	bl	8000b00 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_ClockConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0cd      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2a6>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800275a:	4b54      	ldr	r3, [pc, #336]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b08      	cmp	r3, #8
 8002764:	d1ee      	bne.n	8002744 <HAL_RCC_ClockConfig+0xf4>
 8002766:	e0a3      	b.n	80028b0 <HAL_RCC_ClockConfig+0x260>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002768:	f7fe f9ca 	bl	8000b00 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	; 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e0bb      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2a6>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800277e:	4b4b      	ldr	r3, [pc, #300]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1ee      	bne.n	8002768 <HAL_RCC_ClockConfig+0x118>
 800278a:	e091      	b.n	80028b0 <HAL_RCC_ClockConfig+0x260>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_RCC_ClockConfig+0x15a>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002798:	4b44      	ldr	r3, [pc, #272]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4941      	ldr	r1, [pc, #260]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d06a      	beq.n	800288c <HAL_RCC_ClockConfig+0x23c>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0x17e>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d115      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1a6>
        {
          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e093      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2a6>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0x196>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d6:	4b35      	ldr	r3, [pc, #212]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1a6>
        {
          return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e087      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e6:	4b31      	ldr	r3, [pc, #196]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1a6>
        {
          return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e07f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2a6>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027f6:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f023 0203 	bic.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	492a      	ldr	r1, [pc, #168]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe f97a 	bl	8000b00 <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d112      	bne.n	800283c <HAL_RCC_ClockConfig+0x1ec>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x1de>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7fe f972 	bl	8000b00 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x1de>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e063      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2a6>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800282e:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b04      	cmp	r3, #4
 8002838:	d1ee      	bne.n	8002818 <HAL_RCC_ClockConfig+0x1c8>
 800283a:	e027      	b.n	800288c <HAL_RCC_ClockConfig+0x23c>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d11d      	bne.n	8002880 <HAL_RCC_ClockConfig+0x230>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002844:	e00a      	b.n	800285c <HAL_RCC_ClockConfig+0x20c>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002846:	f7fe f95b 	bl	8000b00 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_ClockConfig+0x20c>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e04c      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2a6>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d1ee      	bne.n	8002846 <HAL_RCC_ClockConfig+0x1f6>
 8002868:	e010      	b.n	800288c <HAL_RCC_ClockConfig+0x23c>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286a:	f7fe f949 	bl	8000b00 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	; 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_ClockConfig+0x230>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e03a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2a6>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_RCC_ClockConfig+0x25c>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ee      	bne.n	800286a <HAL_RCC_ClockConfig+0x21a>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_RCC_ClockConfig+0x258>)
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <HAL_RCC_ClockConfig+0x258>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d006      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x260>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e027      	b.n	80028f6 <HAL_RCC_ClockConfig+0x2a6>
 80028a6:	bf00      	nop
 80028a8:	40023c00 	.word	0x40023c00
 80028ac:	40023800 	.word	0x40023800
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_RCC_ClockConfig+0x27e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028bc:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_RCC_ClockConfig+0x2b0>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	490d      	ldr	r1, [pc, #52]	; (8002900 <HAL_RCC_ClockConfig+0x2b0>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_RCC_ClockConfig+0x29e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_RCC_ClockConfig+0x2b0>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4905      	ldr	r1, [pc, #20]	; (8002900 <HAL_RCC_ClockConfig+0x2b0>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028ee:	200f      	movs	r0, #15
 80028f0:	f7fe f8dc 	bl	8000aac <HAL_InitTick>
  
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800

08002904 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b091      	sub	sp, #68	; 0x44
 8002908:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	637b      	str	r3, [r7, #52]	; 0x34
 800290e:	2300      	movs	r3, #0
 8002910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002912:	2300      	movs	r3, #0
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800291a:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x114>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b08      	cmp	r3, #8
 8002924:	d00c      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x3c>
 8002926:	2b08      	cmp	r3, #8
 8002928:	d86b      	bhi.n	8002a02 <HAL_RCC_GetSysClockFreq+0xfe>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x30>
 800292e:	2b04      	cmp	r3, #4
 8002930:	d003      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x36>
 8002932:	e066      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0xfe>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002934:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x118>)
 8002936:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002938:	e066      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x104>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800293a:	4b38      	ldr	r3, [pc, #224]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x118>)
 800293c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800293e:	e063      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x104>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002940:	4b35      	ldr	r3, [pc, #212]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x114>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800294a:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x114>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d01c      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8002956:	4a31      	ldr	r2, [pc, #196]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x118>)
 8002958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295a:	fbb2 f2f3 	udiv	r2, r2, r3
 800295e:	4b2e      	ldr	r3, [pc, #184]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x114>)
 8002960:	6859      	ldr	r1, [r3, #4]
 8002962:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002966:	400b      	ands	r3, r1
 8002968:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800296c:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002970:	fa91 f1a1 	rbit	r1, r1
 8002974:	6239      	str	r1, [r7, #32]
   return(result);
 8002976:	6a39      	ldr	r1, [r7, #32]
 8002978:	62f9      	str	r1, [r7, #44]	; 0x2c
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800297a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800297c:	fab1 f181 	clz	r1, r1
 8002980:	62b9      	str	r1, [r7, #40]	; 0x28
  return(result);
 8002982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002984:	b2c9      	uxtb	r1, r1
 8002986:	40cb      	lsrs	r3, r1
 8002988:	fb02 f303 	mul.w	r3, r2, r3
 800298c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800298e:	e01b      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0xc4>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8002990:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x118>)
 8002992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002994:	fbb2 f2f3 	udiv	r2, r2, r3
 8002998:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x114>)
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029a0:	400b      	ands	r3, r1
 80029a2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80029a6:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	6979      	ldr	r1, [r7, #20]
 80029aa:	fa91 f1a1 	rbit	r1, r1
 80029ae:	6139      	str	r1, [r7, #16]
   return(result);
 80029b0:	6939      	ldr	r1, [r7, #16]
 80029b2:	61f9      	str	r1, [r7, #28]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	69f9      	ldr	r1, [r7, #28]
 80029b6:	fab1 f181 	clz	r1, r1
 80029ba:	61b9      	str	r1, [r7, #24]
  return(result);
 80029bc:	69b9      	ldr	r1, [r7, #24]
 80029be:	b2c9      	uxtb	r1, r1
 80029c0:	40cb      	lsrs	r3, r1
 80029c2:	fb02 f303 	mul.w	r3, r2, r3
 80029c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x114>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	fa92 f2a2 	rbit	r2, r2
 80029dc:	603a      	str	r2, [r7, #0]
   return(result);
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	60fa      	str	r2, [r7, #12]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	fab2 f282 	clz	r2, r2
 80029e8:	60ba      	str	r2, [r7, #8]
  return(result);
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	40d3      	lsrs	r3, r2
 80029f0:	3301      	adds	r3, #1
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	633b      	str	r3, [r7, #48]	; 0x30
      
      sysclockfreq = pllvco/pllp;
 80029f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a00:	e002      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x104>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x118>)
 8002a04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3744      	adds	r7, #68	; 0x44
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	00f42400 	.word	0x00f42400

08002a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002a26:	f7ff ff6d 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 8002a2a:	4601      	mov	r1, r0
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <HAL_RCC_GetHCLKFreq+0x4c>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a34:	22f0      	movs	r2, #240	; 0xf0
 8002a36:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	fa92 f2a2 	rbit	r2, r2
 8002a3e:	603a      	str	r2, [r7, #0]
   return(result);
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	60fa      	str	r2, [r7, #12]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	fab2 f282 	clz	r2, r2
 8002a4a:	60ba      	str	r2, [r7, #8]
  return(result);
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	40d3      	lsrs	r3, r2
 8002a52:	4a07      	ldr	r2, [pc, #28]	; (8002a70 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a54:	5cd3      	ldrb	r3, [r2, r3]
 8002a56:	fa21 f303 	lsr.w	r3, r1, r3
 8002a5a:	4a06      	ldr	r2, [pc, #24]	; (8002a74 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a5c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a60:	681b      	ldr	r3, [r3, #0]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	08006078 	.word	0x08006078
 8002a74:	2000ed8c 	.word	0x2000ed8c

08002a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002a7e:	f7ff ffcf 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a82:	4601      	mov	r1, r0
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x44>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002a8c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002a90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	fa92 f2a2 	rbit	r2, r2
 8002a98:	603a      	str	r2, [r7, #0]
   return(result);
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	60fa      	str	r2, [r7, #12]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	fab2 f282 	clz	r2, r2
 8002aa4:	60ba      	str	r2, [r7, #8]
  return(result);
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	40d3      	lsrs	r3, r2
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x48>)
 8002aae:	5cd3      	ldrb	r3, [r2, r3]
 8002ab0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	08006078 	.word	0x08006078

08002ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002aca:	f7ff ffa9 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002ace:	4601      	mov	r1, r0
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x44>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002ad8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002adc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	fa92 f2a2 	rbit	r2, r2
 8002ae4:	603a      	str	r2, [r7, #0]
   return(result);
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	60fa      	str	r2, [r7, #12]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	fab2 f282 	clz	r2, r2
 8002af0:	60ba      	str	r2, [r7, #8]
  return(result);
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	40d3      	lsrs	r3, r2
 8002af8:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <HAL_RCC_GetPCLK2Freq+0x48>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	08006078 	.word	0x08006078

08002b10 <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d122      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d11b      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0202 	mvn.w	r2, #2
 8002b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f8ee 	bl	8002d34 <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8e0 	bl	8002d20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f8f1 	bl	8002d48 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d122      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d11b      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0204 	mvn.w	r2, #4
 8002b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8c4 	bl	8002d34 <HAL_TIM_IC_CaptureCallback>
 8002bac:	e005      	b.n	8002bba <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f8b6 	bl	8002d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f8c7 	bl	8002d48 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d122      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d11b      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0208 	mvn.w	r2, #8
 8002be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2204      	movs	r2, #4
 8002bea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f89a 	bl	8002d34 <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f88c 	bl	8002d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f89d 	bl	8002d48 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d122      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d11b      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0210 	mvn.w	r2, #16
 8002c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f870 	bl	8002d34 <HAL_TIM_IC_CaptureCallback>
 8002c54:	e005      	b.n	8002c62 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f862 	bl	8002d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f873 	bl	8002d48 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d10e      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d107      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0201 	mvn.w	r2, #1
 8002c8c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f001 fb08 	bl	80042a4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9e:	2b80      	cmp	r3, #128	; 0x80
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cac:	2b80      	cmp	r3, #128	; 0x80
 8002cae:	d107      	bne.n	8002cc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cb8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f862 	bl	8002d84 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cca:	2b40      	cmp	r3, #64	; 0x40
 8002ccc:	d10e      	bne.n	8002cec <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d107      	bne.n	8002cec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ce4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f838 	bl	8002d5c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	d10e      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d107      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0220 	mvn.w	r2, #32
 8002d10:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f82c 	bl	8002d70 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e037      	b.n	8002e1a <HAL_UART_Init+0x82>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <HAL_UART_Init+0x24>
  {  
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f833 	bl	8002e22 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dd2:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fc73 	bl	80036c0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002de8:	611a      	str	r2, [r3, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002df8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e08:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_UART_MspInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */ 
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tmp1 = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
  
  tmp1 = huart->State;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	617b      	str	r3, [r7, #20]
  if((tmp1 == HAL_UART_STATE_READY) || (tmp1 == HAL_UART_STATE_BUSY_RX))
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d003      	beq.n	8002e62 <HAL_UART_Transmit+0x2c>
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b22      	cmp	r3, #34	; 0x22
 8002e5e:	f040 808e 	bne.w	8002f7e <HAL_UART_Transmit+0x148>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <HAL_UART_Transmit+0x38>
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_UART_Transmit+0x3c>
    {
      return  HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e086      	b.n	8002f80 <HAL_UART_Transmit+0x14a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_UART_Transmit+0x4a>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e07f      	b.n	8002f80 <HAL_UART_Transmit+0x14a>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b22      	cmp	r3, #34	; 0x22
 8002e98:	d104      	bne.n	8002ea4 <HAL_UART_Transmit+0x6e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2232      	movs	r2, #50	; 0x32
 8002e9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002ea2:	e003      	b.n	8002eac <HAL_UART_Transmit+0x76>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2212      	movs	r2, #18
 8002ea8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    huart->TxXferSize = Size;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	88fa      	ldrh	r2, [r7, #6]
 8002eb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	88fa      	ldrh	r2, [r7, #6]
 8002eb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0)
 8002eb8:	e03d      	b.n	8002f36 <HAL_UART_Transmit+0x100>
    {
      huart->TxXferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ece:	d120      	bne.n	8002f12 <HAL_UART_Transmit+0xdc>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fa35 	bl	8003346 <UART_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_UART_Transmit+0xb0>
        { 
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e04c      	b.n	8002f80 <HAL_UART_Transmit+0x14a>
        }
        tmp = (uint16_t*) pData;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ef8:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d103      	bne.n	8002f0a <HAL_UART_Transmit+0xd4>
        {
          pData +=2;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3302      	adds	r3, #2
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	e015      	b.n	8002f36 <HAL_UART_Transmit+0x100>
        }
        else
        { 
          pData +=1;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	e011      	b.n	8002f36 <HAL_UART_Transmit+0x100>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	2180      	movs	r1, #128	; 0x80
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fa14 	bl	8003346 <UART_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_UART_Transmit+0xf2>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e02b      	b.n	8002f80 <HAL_UART_Transmit+0x14a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	60ba      	str	r2, [r7, #8]
 8002f2e:	781a      	ldrb	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1bd      	bne.n	8002eba <HAL_UART_Transmit+0x84>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2200      	movs	r2, #0
 8002f42:	2140      	movs	r1, #64	; 0x40
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f9fe 	bl	8003346 <UART_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_UART_Transmit+0x11e>
    { 
      return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e015      	b.n	8002f80 <HAL_UART_Transmit+0x14a>
    }
    
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b32      	cmp	r3, #50	; 0x32
 8002f5e:	d104      	bne.n	8002f6a <HAL_UART_Transmit+0x134>
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2222      	movs	r2, #34	; 0x22
 8002f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8002f68:	e003      	b.n	8002f72 <HAL_UART_Transmit+0x13c>
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e000      	b.n	8002f80 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;   
 8002f7e:	2302      	movs	r3, #2
  }
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3718      	adds	r7, #24
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	4613      	mov	r3, r2
 8002f94:	80fb      	strh	r3, [r7, #6]
  uint32_t tmp = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
  
  tmp = huart->State;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	617b      	str	r3, [r7, #20]
  if((tmp == HAL_UART_STATE_READY) || (tmp == HAL_UART_STATE_BUSY_RX))
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d002      	beq.n	8002fb0 <HAL_UART_Transmit_IT+0x28>
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b22      	cmp	r3, #34	; 0x22
 8002fae:	d14b      	bne.n	8003048 <HAL_UART_Transmit_IT+0xc0>
  {
    if((pData == NULL ) || (Size == 0)) 
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_UART_Transmit_IT+0x34>
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_UART_Transmit_IT+0x38>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e044      	b.n	800304a <HAL_UART_Transmit_IT+0xc2>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Transmit_IT+0x46>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e03d      	b.n	800304a <HAL_UART_Transmit_IT+0xc2>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pTxBuffPtr = pData;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	88fa      	ldrh	r2, [r7, #6]
 8002fe0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	88fa      	ldrh	r2, [r7, #6]
 8002fe6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b22      	cmp	r3, #34	; 0x22
 8002ff8:	d104      	bne.n	8003004 <HAL_UART_Transmit_IT+0x7c>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2232      	movs	r2, #50	; 0x32
 8002ffe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8003002:	e003      	b.n	800300c <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2212      	movs	r2, #18
 8003008:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800301a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	615a      	str	r2, [r3, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003042:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	e000      	b.n	800304a <HAL_UART_Transmit_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;   
 8003048:	2302      	movs	r3, #2
  }
}
 800304a:	4618      	mov	r0, r3
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003056:	b480      	push	{r7}
 8003058:	b087      	sub	sp, #28
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	4613      	mov	r3, r2
 8003062:	80fb      	strh	r3, [r7, #6]
  uint32_t tmp = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
  
  tmp = huart->State;  
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800306e:	b2db      	uxtb	r3, r3
 8003070:	617b      	str	r3, [r7, #20]
  if((tmp == HAL_UART_STATE_READY) || (tmp == HAL_UART_STATE_BUSY_TX))
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d002      	beq.n	800307e <HAL_UART_Receive_IT+0x28>
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b12      	cmp	r3, #18
 800307c:	d14b      	bne.n	8003116 <HAL_UART_Receive_IT+0xc0>
  {
    if((pData == NULL ) || (Size == 0)) 
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <HAL_UART_Receive_IT+0x34>
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_UART_Receive_IT+0x38>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e044      	b.n	8003118 <HAL_UART_Receive_IT+0xc2>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_UART_Receive_IT+0x46>
 8003098:	2302      	movs	r3, #2
 800309a:	e03d      	b.n	8003118 <HAL_UART_Receive_IT+0xc2>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	88fa      	ldrh	r2, [r7, #6]
 80030ae:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	88fa      	ldrh	r2, [r7, #6]
 80030b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX) 
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b12      	cmp	r3, #18
 80030c6:	d104      	bne.n	80030d2 <HAL_UART_Receive_IT+0x7c>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2232      	movs	r2, #50	; 0x32
 80030cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80030d0:	e003      	b.n	80030da <HAL_UART_Receive_IT+0x84>
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2222      	movs	r2, #34	; 0x22
 80030d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
    
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e8:	60da      	str	r2, [r3, #12]
    
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	615a      	str	r2, [r3, #20]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0220 	orr.w	r2, r2, #32
 8003110:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e000      	b.n	8003118 <HAL_UART_Receive_IT+0xc2>
  }
  else
  {
    return HAL_BUSY; 
 8003116:	2302      	movs	r3, #2
  }
}
 8003118:	4618      	mov	r0, r3
 800311a:	371c      	adds	r7, #28
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	2300      	movs	r3, #0
 8003132:	61bb      	str	r3, [r7, #24]

  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	bf0c      	ite	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	2300      	movne	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	61fb      	str	r3, [r7, #28]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003154:	61bb      	str	r3, [r7, #24]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d011      	beq.n	8003180 <HAL_UART_IRQHandler+0x5c>
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00e      	beq.n	8003180 <HAL_UART_IRQHandler+0x5c>
  { 
    __HAL_UART_CLEAR_PEFLAG(huart);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	697b      	ldr	r3, [r7, #20]
    
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b02      	cmp	r3, #2
 800318c:	bf0c      	ite	eq
 800318e:	2301      	moveq	r3, #1
 8003190:	2300      	movne	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	61fb      	str	r3, [r7, #28]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	61bb      	str	r3, [r7, #24]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d011      	beq.n	80031cc <HAL_UART_IRQHandler+0xa8>
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00e      	beq.n	80031cc <HAL_UART_IRQHandler+0xa8>
  { 
    __HAL_UART_CLEAR_FEFLAG(huart);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	693b      	ldr	r3, [r7, #16]
    
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c4:	f043 0204 	orr.w	r2, r3, #4
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	bf0c      	ite	eq
 80031da:	2301      	moveq	r3, #1
 80031dc:	2300      	movne	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	61fb      	str	r3, [r7, #28]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	61bb      	str	r3, [r7, #24]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d011      	beq.n	8003218 <HAL_UART_IRQHandler+0xf4>
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00e      	beq.n	8003218 <HAL_UART_IRQHandler+0xf4>
  { 
    __HAL_UART_CLEAR_NEFLAG(huart);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
    
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003210:	f043 0202 	orr.w	r2, r3, #2
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b08      	cmp	r3, #8
 8003224:	bf0c      	ite	eq
 8003226:	2301      	moveq	r3, #1
 8003228:	2300      	movne	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	61fb      	str	r3, [r7, #28]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	61bb      	str	r3, [r7, #24]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d011      	beq.n	8003264 <HAL_UART_IRQHandler+0x140>
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00e      	beq.n	8003264 <HAL_UART_IRQHandler+0x140>
  { 
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]
    
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	f043 0208 	orr.w	r2, r3, #8
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b20      	cmp	r3, #32
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	61fb      	str	r3, [r7, #28]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	61bb      	str	r3, [r7, #24]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_UART_IRQHandler+0x174>
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_UART_IRQHandler+0x174>
  { 
    UART_Receive_IT(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f980 	bl	8003598 <UART_Receive_IT>
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a2:	2b80      	cmp	r3, #128	; 0x80
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	61fb      	str	r3, [r7, #28]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b8:	61bb      	str	r3, [r7, #24]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_UART_IRQHandler+0x1a8>
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_UART_IRQHandler+0x1a8>
  {
    UART_Transmit_IT(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f8d6 	bl	8003478 <UART_Transmit_IT>
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	bf0c      	ite	eq
 80032da:	2301      	moveq	r3, #1
 80032dc:	2300      	movne	r3, #0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	61fb      	str	r3, [r7, #28]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ec:	61bb      	str	r3, [r7, #24]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_UART_IRQHandler+0x1dc>
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_UART_IRQHandler+0x1dc>
  {
    UART_EndTransmit_IT(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f919 	bl	8003532 <UART_EndTransmit_IT>
  }

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d006      	beq.n	8003316 <HAL_UART_IRQHandler+0x1f2>
  {
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f80e 	bl	8003332 <HAL_UART_ErrorCallback>
  }  
}
 8003316:	bf00      	nop
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	4613      	mov	r3, r2
 8003354:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800335a:	f7fd fbd1 	bl	8000b00 <HAL_GetTick>
 800335e:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if(Status == RESET)
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d17b      	bne.n	800345e <UART_WaitOnFlagUntilTimeout+0x118>
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8003366:	e038      	b.n	80033da <UART_WaitOnFlagUntilTimeout+0x94>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336e:	d034      	beq.n	80033da <UART_WaitOnFlagUntilTimeout+0x94>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <UART_WaitOnFlagUntilTimeout+0x40>
 8003376:	f7fd fbc3 	bl	8000b00 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d229      	bcs.n	80033da <UART_WaitOnFlagUntilTimeout+0x94>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003394:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0220 	bic.w	r2, r2, #32
 80033a4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033b4:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e04a      	b.n	8003470 <UART_WaitOnFlagUntilTimeout+0x12a>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4013      	ands	r3, r2
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d1be      	bne.n	8003368 <UART_WaitOnFlagUntilTimeout+0x22>
 80033ea:	e040      	b.n	800346e <UART_WaitOnFlagUntilTimeout+0x128>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d034      	beq.n	800345e <UART_WaitOnFlagUntilTimeout+0x118>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <UART_WaitOnFlagUntilTimeout+0xc4>
 80033fa:	f7fd fb81 	bl	8000b00 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d229      	bcs.n	800345e <UART_WaitOnFlagUntilTimeout+0x118>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003418:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0220 	bic.w	r2, r2, #32
 8003428:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003438:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	615a      	str	r2, [r3, #20]

          huart->State= HAL_UART_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e008      	b.n	8003470 <UART_WaitOnFlagUntilTimeout+0x12a>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	4013      	ands	r3, r2
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	d0be      	beq.n	80033ec <UART_WaitOnFlagUntilTimeout+0xa6>
        }
      }
    }
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp1 = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
  
  tmp1 = huart->State;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800348a:	b2db      	uxtb	r3, r3
 800348c:	60fb      	str	r3, [r7, #12]
  if((tmp1 == HAL_UART_STATE_BUSY_TX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b12      	cmp	r3, #18
 8003492:	d002      	beq.n	800349a <UART_Transmit_IT+0x22>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b32      	cmp	r3, #50	; 0x32
 8003498:	d144      	bne.n	8003524 <UART_Transmit_IT+0xac>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a2:	d11a      	bne.n	80034da <UART_Transmit_IT+0x62>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	60bb      	str	r3, [r7, #8]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b8:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d105      	bne.n	80034ce <UART_Transmit_IT+0x56>
      {
        huart->pTxBuffPtr += 2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	1c9a      	adds	r2, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	621a      	str	r2, [r3, #32]
 80034cc:	e00e      	b.n	80034ec <UART_Transmit_IT+0x74>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	621a      	str	r2, [r3, #32]
 80034d8:	e008      	b.n	80034ec <UART_Transmit_IT+0x74>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	1c59      	adds	r1, r3, #1
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6211      	str	r1, [r2, #32]
 80034e4:	781a      	ldrb	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	84da      	strh	r2, [r3, #38]	; 0x26
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10f      	bne.n	8003520 <UART_Transmit_IT+0xa8>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800350e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800351e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e000      	b.n	8003526 <UART_Transmit_IT+0xae>
  }
  else
  {
    return HAL_BUSY;
 8003524:	2302      	movs	r3, #2
  }
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003548:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b32      	cmp	r3, #50	; 0x32
 8003554:	d104      	bne.n	8003560 <UART_EndTransmit_IT+0x2e>
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2222      	movs	r2, #34	; 0x22
 800355a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800355e:	e013      	b.n	8003588 <UART_EndTransmit_IT+0x56>
  }
  else
  {
    /* Disable the UART Parity Error Interrupt */
    __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800356e:	60da      	str	r2, [r3, #12]

    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	615a      	str	r2, [r3, #20]

    huart->State = HAL_UART_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff fec8 	bl	800331e <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint32_t tmp1 = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
  
  tmp1 = huart->State; 
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	60fb      	str	r3, [r7, #12]
  if((tmp1 == HAL_UART_STATE_BUSY_RX) || (tmp1 == HAL_UART_STATE_BUSY_TX_RX))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b22      	cmp	r3, #34	; 0x22
 80035b2:	d002      	beq.n	80035ba <UART_Receive_IT+0x22>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b32      	cmp	r3, #50	; 0x32
 80035b8:	d17c      	bne.n	80036b4 <UART_Receive_IT+0x11c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c2:	d123      	bne.n	800360c <UART_Receive_IT+0x74>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	60bb      	str	r3, [r7, #8]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10e      	bne.n	80035f0 <UART_Receive_IT+0x58>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	1c9a      	adds	r2, r3, #2
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	629a      	str	r2, [r3, #40]	; 0x28
 80035ee:	e029      	b.n	8003644 <UART_Receive_IT+0xac>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	629a      	str	r2, [r3, #40]	; 0x28
 800360a:	e01b      	b.n	8003644 <UART_Receive_IT+0xac>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10a      	bne.n	800362a <UART_Receive_IT+0x92>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6858      	ldr	r0, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	1c59      	adds	r1, r3, #1
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6291      	str	r1, [r2, #40]	; 0x28
 8003624:	b2c2      	uxtb	r2, r0
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	e00c      	b.n	8003644 <UART_Receive_IT+0xac>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	1c58      	adds	r0, r3, #1
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	6288      	str	r0, [r1, #40]	; 0x28
 800363c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003654:	2b00      	cmp	r3, #0
 8003656:	d12b      	bne.n	80036b0 <UART_Receive_IT+0x118>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0220 	bic.w	r2, r2, #32
 8003666:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b32      	cmp	r3, #50	; 0x32
 8003672:	d104      	bne.n	800367e <UART_Receive_IT+0xe6>
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2212      	movs	r2, #18
 8003678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800367c:	e013      	b.n	80036a6 <UART_Receive_IT+0x10e>
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800368c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0201 	bic.w	r2, r2, #1
 800369c:	615a      	str	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f002 fa7c 	bl	8005ba4 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e002      	b.n	80036b6 <UART_Receive_IT+0x11e>
    }
    return HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	e000      	b.n	80036b6 <UART_Receive_IT+0x11e>
  }
  else
  {
    return HAL_BUSY; 
 80036b4:	2302      	movs	r3, #2
  }
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c0:	b5b0      	push	{r4, r5, r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036da:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036fc:	f023 030c 	bic.w	r3, r3, #12
 8003700:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	4313      	orrs	r3, r2
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003734:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003750:	f040 808c 	bne.w	800386c <UART_SetConfig+0x1ac>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a8c      	ldr	r2, [pc, #560]	; (800398c <UART_SetConfig+0x2cc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d004      	beq.n	8003768 <UART_SetConfig+0xa8>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a8b      	ldr	r2, [pc, #556]	; (8003990 <UART_SetConfig+0x2d0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d140      	bne.n	80037ea <UART_SetConfig+0x12a>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003768:	f7ff f9ac 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 800376c:	4602      	mov	r2, r0
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	009a      	lsls	r2, r3, #2
 8003776:	441a      	add	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003782:	4a84      	ldr	r2, [pc, #528]	; (8003994 <UART_SetConfig+0x2d4>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	011c      	lsls	r4, r3, #4
 800378c:	f7ff f99a 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8003790:	4602      	mov	r2, r0
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	009a      	lsls	r2, r3, #2
 800379a:	441a      	add	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fbb2 f5f3 	udiv	r5, r2, r3
 80037a6:	f7ff f98d 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 80037aa:	4602      	mov	r2, r0
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009a      	lsls	r2, r3, #2
 80037b4:	441a      	add	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	4a74      	ldr	r2, [pc, #464]	; (8003994 <UART_SetConfig+0x2d4>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	095b      	lsrs	r3, r3, #5
 80037c8:	2264      	movs	r2, #100	; 0x64
 80037ca:	fb02 f303 	mul.w	r3, r2, r3
 80037ce:	1aeb      	subs	r3, r5, r3
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	3332      	adds	r3, #50	; 0x32
 80037d4:	4a6f      	ldr	r2, [pc, #444]	; (8003994 <UART_SetConfig+0x2d4>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	f003 020f 	and.w	r2, r3, #15
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4322      	orrs	r2, r4
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	e0cc      	b.n	8003984 <UART_SetConfig+0x2c4>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80037ea:	f7ff f945 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 80037ee:	4602      	mov	r2, r0
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009a      	lsls	r2, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	4a63      	ldr	r2, [pc, #396]	; (8003994 <UART_SetConfig+0x2d4>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	011c      	lsls	r4, r3, #4
 800380e:	f7ff f933 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8003812:	4602      	mov	r2, r0
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009a      	lsls	r2, r3, #2
 800381c:	441a      	add	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fbb2 f5f3 	udiv	r5, r2, r3
 8003828:	f7ff f926 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 800382c:	4602      	mov	r2, r0
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	009a      	lsls	r2, r3, #2
 8003836:	441a      	add	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	4a54      	ldr	r2, [pc, #336]	; (8003994 <UART_SetConfig+0x2d4>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	2264      	movs	r2, #100	; 0x64
 800384c:	fb02 f303 	mul.w	r3, r2, r3
 8003850:	1aeb      	subs	r3, r5, r3
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	3332      	adds	r3, #50	; 0x32
 8003856:	4a4f      	ldr	r2, [pc, #316]	; (8003994 <UART_SetConfig+0x2d4>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	f003 020f 	and.w	r2, r3, #15
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4322      	orrs	r2, r4
 8003868:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800386a:	e08b      	b.n	8003984 <UART_SetConfig+0x2c4>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a46      	ldr	r2, [pc, #280]	; (800398c <UART_SetConfig+0x2cc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <UART_SetConfig+0x1c0>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a45      	ldr	r2, [pc, #276]	; (8003990 <UART_SetConfig+0x2d0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d140      	bne.n	8003902 <UART_SetConfig+0x242>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003880:	f7ff f920 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8003884:	4602      	mov	r2, r0
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	009a      	lsls	r2, r3, #2
 800388e:	441a      	add	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	fbb2 f3f3 	udiv	r3, r2, r3
 800389a:	4a3e      	ldr	r2, [pc, #248]	; (8003994 <UART_SetConfig+0x2d4>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	095b      	lsrs	r3, r3, #5
 80038a2:	011c      	lsls	r4, r3, #4
 80038a4:	f7ff f90e 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	009a      	lsls	r2, r3, #2
 80038b2:	441a      	add	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	fbb2 f5f3 	udiv	r5, r2, r3
 80038be:	f7ff f901 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 80038c2:	4602      	mov	r2, r0
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009a      	lsls	r2, r3, #2
 80038cc:	441a      	add	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	4a2e      	ldr	r2, [pc, #184]	; (8003994 <UART_SetConfig+0x2d4>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	2264      	movs	r2, #100	; 0x64
 80038e2:	fb02 f303 	mul.w	r3, r2, r3
 80038e6:	1aeb      	subs	r3, r5, r3
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	3332      	adds	r3, #50	; 0x32
 80038ec:	4a29      	ldr	r2, [pc, #164]	; (8003994 <UART_SetConfig+0x2d4>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	f003 020f 	and.w	r2, r3, #15
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4322      	orrs	r2, r4
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	e040      	b.n	8003984 <UART_SetConfig+0x2c4>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003902:	f7ff f8b9 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8003906:	4602      	mov	r2, r0
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	009a      	lsls	r2, r3, #2
 8003910:	441a      	add	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <UART_SetConfig+0x2d4>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	011c      	lsls	r4, r3, #4
 8003926:	f7ff f8a7 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 800392a:	4602      	mov	r2, r0
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	009a      	lsls	r2, r3, #2
 8003934:	441a      	add	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003940:	f7ff f89a 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8003944:	4602      	mov	r2, r0
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	009a      	lsls	r2, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	fbb2 f3f3 	udiv	r3, r2, r3
 800395a:	4a0e      	ldr	r2, [pc, #56]	; (8003994 <UART_SetConfig+0x2d4>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	2264      	movs	r2, #100	; 0x64
 8003964:	fb02 f303 	mul.w	r3, r2, r3
 8003968:	1aeb      	subs	r3, r5, r3
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	3332      	adds	r3, #50	; 0x32
 800396e:	4a09      	ldr	r2, [pc, #36]	; (8003994 <UART_SetConfig+0x2d4>)
 8003970:	fba2 2303 	umull	r2, r3, r2, r3
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	f003 020f 	and.w	r2, r3, #15
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4322      	orrs	r2, r4
 8003980:	609a      	str	r2, [r3, #8]
}
 8003982:	e7ff      	b.n	8003984 <UART_SetConfig+0x2c4>
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bdb0      	pop	{r4, r5, r7, pc}
 800398c:	40011000 	.word	0x40011000
 8003990:	40011400 	.word	0x40011400
 8003994:	51eb851f 	.word	0x51eb851f

08003998 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  //assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 0201 	bic.w	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	605a      	str	r2, [r3, #4]

  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]

  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2221      	movs	r2, #33	; 0x21
 80039ce:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a46      	ldr	r2, [pc, #280]	; (8003aec <DMA_DeInit+0x154>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d103      	bne.n	80039e0 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80039d8:	4b45      	ldr	r3, [pc, #276]	; (8003af0 <DMA_DeInit+0x158>)
 80039da:	223d      	movs	r2, #61	; 0x3d
 80039dc:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80039de:	e07e      	b.n	8003ade <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a44      	ldr	r2, [pc, #272]	; (8003af4 <DMA_DeInit+0x15c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d104      	bne.n	80039f2 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80039e8:	4b41      	ldr	r3, [pc, #260]	; (8003af0 <DMA_DeInit+0x158>)
 80039ea:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80039ee:	609a      	str	r2, [r3, #8]
}
 80039f0:	e075      	b.n	8003ade <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a40      	ldr	r2, [pc, #256]	; (8003af8 <DMA_DeInit+0x160>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d104      	bne.n	8003a04 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80039fa:	4b3d      	ldr	r3, [pc, #244]	; (8003af0 <DMA_DeInit+0x158>)
 80039fc:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8003a00:	609a      	str	r2, [r3, #8]
}
 8003a02:	e06c      	b.n	8003ade <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a3d      	ldr	r2, [pc, #244]	; (8003afc <DMA_DeInit+0x164>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d104      	bne.n	8003a16 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8003a0c:	4b38      	ldr	r3, [pc, #224]	; (8003af0 <DMA_DeInit+0x158>)
 8003a0e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8003a12:	609a      	str	r2, [r3, #8]
}
 8003a14:	e063      	b.n	8003ade <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a39      	ldr	r2, [pc, #228]	; (8003b00 <DMA_DeInit+0x168>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d103      	bne.n	8003a26 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8003a1e:	4b34      	ldr	r3, [pc, #208]	; (8003af0 <DMA_DeInit+0x158>)
 8003a20:	4a38      	ldr	r2, [pc, #224]	; (8003b04 <DMA_DeInit+0x16c>)
 8003a22:	60da      	str	r2, [r3, #12]
}
 8003a24:	e05b      	b.n	8003ade <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a37      	ldr	r2, [pc, #220]	; (8003b08 <DMA_DeInit+0x170>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d103      	bne.n	8003a36 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8003a2e:	4b30      	ldr	r3, [pc, #192]	; (8003af0 <DMA_DeInit+0x158>)
 8003a30:	4a36      	ldr	r2, [pc, #216]	; (8003b0c <DMA_DeInit+0x174>)
 8003a32:	60da      	str	r2, [r3, #12]
}
 8003a34:	e053      	b.n	8003ade <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a35      	ldr	r2, [pc, #212]	; (8003b10 <DMA_DeInit+0x178>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d103      	bne.n	8003a46 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8003a3e:	4b2c      	ldr	r3, [pc, #176]	; (8003af0 <DMA_DeInit+0x158>)
 8003a40:	4a34      	ldr	r2, [pc, #208]	; (8003b14 <DMA_DeInit+0x17c>)
 8003a42:	60da      	str	r2, [r3, #12]
}
 8003a44:	e04b      	b.n	8003ade <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a33      	ldr	r2, [pc, #204]	; (8003b18 <DMA_DeInit+0x180>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d104      	bne.n	8003a58 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8003a4e:	4b28      	ldr	r3, [pc, #160]	; (8003af0 <DMA_DeInit+0x158>)
 8003a50:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8003a54:	60da      	str	r2, [r3, #12]
}
 8003a56:	e042      	b.n	8003ade <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a30      	ldr	r2, [pc, #192]	; (8003b1c <DMA_DeInit+0x184>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d103      	bne.n	8003a68 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8003a60:	4b2f      	ldr	r3, [pc, #188]	; (8003b20 <DMA_DeInit+0x188>)
 8003a62:	223d      	movs	r2, #61	; 0x3d
 8003a64:	609a      	str	r2, [r3, #8]
}
 8003a66:	e03a      	b.n	8003ade <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a2e      	ldr	r2, [pc, #184]	; (8003b24 <DMA_DeInit+0x18c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d104      	bne.n	8003a7a <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8003a70:	4b2b      	ldr	r3, [pc, #172]	; (8003b20 <DMA_DeInit+0x188>)
 8003a72:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8003a76:	609a      	str	r2, [r3, #8]
}
 8003a78:	e031      	b.n	8003ade <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <DMA_DeInit+0x190>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d104      	bne.n	8003a8c <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8003a82:	4b27      	ldr	r3, [pc, #156]	; (8003b20 <DMA_DeInit+0x188>)
 8003a84:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8003a88:	609a      	str	r2, [r3, #8]
}
 8003a8a:	e028      	b.n	8003ade <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a27      	ldr	r2, [pc, #156]	; (8003b2c <DMA_DeInit+0x194>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d104      	bne.n	8003a9e <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8003a94:	4b22      	ldr	r3, [pc, #136]	; (8003b20 <DMA_DeInit+0x188>)
 8003a96:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8003a9a:	609a      	str	r2, [r3, #8]
}
 8003a9c:	e01f      	b.n	8003ade <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a23      	ldr	r2, [pc, #140]	; (8003b30 <DMA_DeInit+0x198>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d103      	bne.n	8003aae <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8003aa6:	4b1e      	ldr	r3, [pc, #120]	; (8003b20 <DMA_DeInit+0x188>)
 8003aa8:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <DMA_DeInit+0x16c>)
 8003aaa:	60da      	str	r2, [r3, #12]
}
 8003aac:	e017      	b.n	8003ade <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a20      	ldr	r2, [pc, #128]	; (8003b34 <DMA_DeInit+0x19c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d103      	bne.n	8003abe <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8003ab6:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <DMA_DeInit+0x188>)
 8003ab8:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <DMA_DeInit+0x174>)
 8003aba:	60da      	str	r2, [r3, #12]
}
 8003abc:	e00f      	b.n	8003ade <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1d      	ldr	r2, [pc, #116]	; (8003b38 <DMA_DeInit+0x1a0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d103      	bne.n	8003ace <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8003ac6:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <DMA_DeInit+0x188>)
 8003ac8:	4a12      	ldr	r2, [pc, #72]	; (8003b14 <DMA_DeInit+0x17c>)
 8003aca:	60da      	str	r2, [r3, #12]
}
 8003acc:	e007      	b.n	8003ade <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a1a      	ldr	r2, [pc, #104]	; (8003b3c <DMA_DeInit+0x1a4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d103      	bne.n	8003ade <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8003ad6:	4b12      	ldr	r3, [pc, #72]	; (8003b20 <DMA_DeInit+0x188>)
 8003ad8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8003adc:	60da      	str	r2, [r3, #12]
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40026010 	.word	0x40026010
 8003af0:	40026000 	.word	0x40026000
 8003af4:	40026028 	.word	0x40026028
 8003af8:	40026040 	.word	0x40026040
 8003afc:	40026058 	.word	0x40026058
 8003b00:	40026070 	.word	0x40026070
 8003b04:	2000003d 	.word	0x2000003d
 8003b08:	40026088 	.word	0x40026088
 8003b0c:	20000f40 	.word	0x20000f40
 8003b10:	400260a0 	.word	0x400260a0
 8003b14:	203d0000 	.word	0x203d0000
 8003b18:	400260b8 	.word	0x400260b8
 8003b1c:	40026410 	.word	0x40026410
 8003b20:	40026400 	.word	0x40026400
 8003b24:	40026428 	.word	0x40026428
 8003b28:	40026440 	.word	0x40026440
 8003b2c:	40026458 	.word	0x40026458
 8003b30:	40026470 	.word	0x40026470
 8003b34:	40026488 	.word	0x40026488
 8003b38:	400264a0 	.word	0x400264a0
 8003b3c:	400264b8 	.word	0x400264b8

08003b40 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_std_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_std_InitTypeDef* DMA_InitStruct)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
  //assert_param(IS_DMA_MEMORY_BURST_STD(DMA_InitStruct->DMA_MemoryBurst));
  //assert_param(IS_DMA_PERIPHERAL_BURST_STD(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4b25      	ldr	r3, [pc, #148]	; (8003bec <DMA_Init+0xac>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003b6a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8003b76:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8003b82:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8003b8e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0307 	bic.w	r3, r3, #7
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO:
    Set DMDIS bits according to DMA_FIFOMode value
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	60da      	str	r2, [r3, #12]
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	f01c803f 	.word	0xf01c803f

08003bf0 <DMA_Cmd>:
  *        this single data is finished.
  *
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  //assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  //assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d006      	beq.n	8003c10 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f043 0201 	orr.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8003c0e:	e005      	b.n	8003c1c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f023 0201 	bic.w	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	601a      	str	r2, [r3, #0]
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <DMA_DoubleBufferModeConfig>:
  *
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  //assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  //assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d006      	beq.n	8003c48 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	e005      	b.n	8003c54 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	611a      	str	r2, [r3, #16]
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  //assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  //assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8003c72:	78fb      	ldrb	r3, [r7, #3]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d006      	beq.n	8003c86 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
  }
}
 8003c84:	e005      	b.n	8003c92 <DMA_DoubleBufferModeCmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	601a      	str	r2, [r3, #0]
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b085      	sub	sp, #20
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	71fb      	strb	r3, [r7, #7]
  //assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  //assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  //assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE_STD) != 0)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00f      	beq.n	8003cd6 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d006      	beq.n	8003cca <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	615a      	str	r2, [r3, #20]
 8003cc8:	e005      	b.n	8003cd6 <DMA_ITConfig+0x38>
    }
    else
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE_STD)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b80      	cmp	r3, #128	; 0x80
 8003cda:	d014      	beq.n	8003d06 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f003 031e 	and.w	r3, r3, #30
 8003cec:	431a      	orrs	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }
  }
}
 8003cf2:	e008      	b.n	8003d06 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 031e 	and.w	r3, r3, #30
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	401a      	ands	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	601a      	str	r2, [r3, #0]
}
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b08b      	sub	sp, #44	; 0x2c
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	837b      	strh	r3, [r7, #26]
 8003d22:	2302      	movs	r3, #2
 8003d24:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d26:	2300      	movs	r3, #0
 8003d28:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60bb      	str	r3, [r7, #8]
  //assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  //assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69da      	ldr	r2, [r3, #28]
 8003d46:	f24f 0340 	movw	r3, #61504	; 0xf040
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	61d3      	str	r3, [r2, #28]
  SPIx->I2SPR = 0x0002;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	621a      	str	r2, [r3, #32]

  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	837b      	strh	r3, [r7, #26]

  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d104      	bne.n	8003d6e <I2S_Init+0x5a>
  {
    i2sodd = (uint16_t)0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d6c:	e05e      	b.n	8003e2c <I2S_Init+0x118>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	889b      	ldrh	r3, [r3, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <I2S_Init+0x68>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8003d76:	2301      	movs	r3, #1
 8003d78:	847b      	strh	r3, [r7, #34]	; 0x22
 8003d7a:	e001      	b.n	8003d80 <I2S_Init+0x6c>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8003d80:	4b43      	ldr	r3, [pc, #268]	; (8003e90 <I2S_Init+0x17c>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <I2S_Init+0x84>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8003d8c:	4b40      	ldr	r3, [pc, #256]	; (8003e90 <I2S_Init+0x17c>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4a3f      	ldr	r2, [pc, #252]	; (8003e90 <I2S_Init+0x17c>)
 8003d92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d96:	6093      	str	r3, [r2, #8]
    }

    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8003d98:	4b3d      	ldr	r3, [pc, #244]	; (8003e90 <I2S_Init+0x17c>)
 8003d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d9e:	099b      	lsrs	r3, r3, #6
 8003da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da4:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));

    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8003da6:	4b3a      	ldr	r3, [pc, #232]	; (8003e90 <I2S_Init+0x17c>)
 8003da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dac:	0f1b      	lsrs	r3, r3, #28
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));

    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8003db4:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <I2S_Init+0x17c>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dbc:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8003dbe:	4a35      	ldr	r2, [pc, #212]	; (8003e94 <I2S_Init+0x180>)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	fb03 f202 	mul.w	r2, r3, r2
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd2:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	88db      	ldrh	r3, [r3, #6]
 8003dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ddc:	d10f      	bne.n	8003dfe <I2S_Init+0xea>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	0a1a      	lsrs	r2, r3, #8
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	461a      	mov	r2, r3
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3305      	adds	r3, #5
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	e003      	b.n	8003e06 <I2S_Init+0xf2>
    }
    else
    {
      /* MCLK output is disabled */
      //tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    tmp = packetlength;
 8003dfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e00:	61fb      	str	r3, [r7, #28]
    tmp=0;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]

    }

    /* Remove the flatting point */
    tmp = tmp / 10;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	4a23      	ldr	r2, [pc, #140]	; (8003e98 <I2S_Init+0x184>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	08db      	lsrs	r3, r3, #3
 8003e10:	61fb      	str	r3, [r7, #28]

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	84bb      	strh	r3, [r7, #36]	; 0x24

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8003e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	84fb      	strh	r3, [r7, #38]	; 0x26

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8003e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8003e2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d902      	bls.n	8003e38 <I2S_Init+0x124>
 8003e32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e34:	2bff      	cmp	r3, #255	; 0xff
 8003e36:	d903      	bls.n	8003e40 <I2S_Init+0x12c>
  {
    /* Set the default values */
    i2sdiv = 2;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	88da      	ldrh	r2, [r3, #6]
 8003e44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e46:	4313      	orrs	r3, r2
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	621a      	str	r2, [r3, #32]

  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	8859      	ldrh	r1, [r3, #2]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	899b      	ldrh	r3, [r3, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8003e66:	4303      	orrs	r3, r0
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	8b7b      	ldrh	r3, [r7, #26]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e7c:	837b      	strh	r3, [r7, #26]

  /* Write to SPIx I2SCFGR */
  SPIx->I2SCFGR = tmpreg;
 8003e7e:	8b7a      	ldrh	r2, [r7, #26]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	61da      	str	r2, [r3, #28]
}
 8003e84:	bf00      	nop
 8003e86:	372c      	adds	r7, #44	; 0x2c
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40023800 	.word	0x40023800
 8003e94:	00f42400 	.word	0x00f42400
 8003e98:	cccccccd 	.word	0xcccccccd

08003e9c <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  //assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  //assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d006      	beq.n	8003ebc <I2S_Cmd+0x20>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	61da      	str	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 8003eba:	e006      	b.n	8003eca <I2S_Cmd+0x2e>
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	61d3      	str	r3, [r2, #28]
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.
  *
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b085      	sub	sp, #20
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	81bb      	strh	r3, [r7, #12]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	81fb      	strh	r3, [r7, #14]
  //assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  //assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69da      	ldr	r2, [r3, #28]
 8003eec:	f24f 0340 	movw	r3, #61504	; 0xf040
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	61d3      	str	r3, [r2, #28]
  I2Sxext->I2SPR = 0x0002;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	621a      	str	r2, [r3, #32]

  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	81bb      	strh	r3, [r7, #12]

  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f0a:	d003      	beq.n	8003f14 <I2S_FullDuplexConfig+0x3e>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d103      	bne.n	8003f1c <I2S_FullDuplexConfig+0x46>
  {
    tmp = I2S_Mode_SlaveRx;
 8003f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f18:	81fb      	strh	r3, [r7, #14]
 8003f1a:	e00b      	b.n	8003f34 <I2S_FullDuplexConfig+0x5e>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f24:	d004      	beq.n	8003f30 <I2S_FullDuplexConfig+0x5a>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2e:	d101      	bne.n	8003f34 <I2S_FullDuplexConfig+0x5e>
    {
      tmp = I2S_Mode_SlaveTx;
 8003f30:	2300      	movs	r3, #0
 8003f32:	81fb      	strh	r3, [r7, #14]
  }


  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	885a      	ldrh	r2, [r3, #2]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	899b      	ldrh	r3, [r3, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8003f40:	430b      	orrs	r3, r1
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	4313      	orrs	r3, r2
 8003f46:	b29a      	uxth	r2, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003f48:	89fb      	ldrh	r3, [r7, #14]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	89bb      	ldrh	r3, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f58:	81bb      	strh	r3, [r7, #12]

  /* Write to SPIx I2SCFGR */
  I2Sxext->I2SCFGR = tmpreg;
 8003f5a:	89ba      	ldrh	r2, [r7, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	61da      	str	r2, [r3, #28]
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  //assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	b29b      	uxth	r3, r3
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  //assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8003f92:	887a      	ldrh	r2, [r7, #2]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	60da      	str	r2, [r3, #12]
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	807b      	strh	r3, [r7, #2]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  //assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  //assert_param(IS_FUNCTIONAL_STATE(NewState));
  //assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8003fb4:	787b      	ldrb	r3, [r7, #1]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d006      	beq.n	8003fc8 <SPI_I2S_DMACmd+0x24>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	887b      	ldrh	r3, [r7, #2]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 8003fc6:	e007      	b.n	8003fd8 <SPI_I2S_DMACmd+0x34>
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	887a      	ldrh	r2, [r7, #2]
 8003fce:	43d2      	mvns	r2, r2
 8003fd0:	b292      	uxth	r2, r2
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	605a      	str	r2, [r3, #4]
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	70fb      	strb	r3, [r7, #3]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	81fb      	strh	r3, [r7, #14]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	81bb      	strh	r3, [r7, #12]
  //assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  //assert_param(IS_FUNCTIONAL_STATE(NewState));
  //assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	b2db      	uxtb	r3, r3
 8004002:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8004004:	89fb      	ldrh	r3, [r7, #14]
 8004006:	2201      	movs	r2, #1
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800400e:	78bb      	ldrb	r3, [r7, #2]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d006      	beq.n	8004022 <SPI_I2S_ITConfig+0x3e>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	89bb      	ldrh	r3, [r7, #12]
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 8004020:	e007      	b.n	8004032 <SPI_I2S_ITConfig+0x4e>
    SPIx->CR2 &= (uint16_t)~itmask;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	89ba      	ldrh	r2, [r7, #12]
 8004028:	43d2      	mvns	r2, r2
 800402a:	b292      	uxth	r2, r2
 800402c:	401a      	ands	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	605a      	str	r2, [r3, #4]
}
 8004032:	bf00      	nop
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	460b      	mov	r3, r1
 8004048:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  //assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  //assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	887b      	ldrh	r3, [r7, #2]
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800405a:	2301      	movs	r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
 800405e:	e001      	b.n	8004064 <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8004060:	2300      	movs	r3, #0
 8004062:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8004064:	7bfb      	ldrb	r3, [r7, #15]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  //assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  //assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));

  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800407e:	887b      	ldrh	r3, [r7, #2]
 8004080:	43db      	mvns	r3, r3
 8004082:	b29b      	uxth	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	609a      	str	r2, [r3, #8]
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	460b      	mov	r3, r1
 80040a0:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 80040a2:	2300      	movs	r3, #0
 80040a4:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	81bb      	strh	r3, [r7, #12]
 80040aa:	2300      	movs	r3, #0
 80040ac:	817b      	strh	r3, [r7, #10]
 80040ae:	2300      	movs	r3, #0
 80040b0:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  //assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  //assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	2201      	movs	r2, #1
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	091b      	lsrs	r3, r3, #4
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 80040c8:	897b      	ldrh	r3, [r7, #10]
 80040ca:	2201      	movs	r2, #1
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	897b      	ldrh	r3, [r7, #10]
 80040da:	4013      	ands	r3, r2
 80040dc:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	89bb      	ldrh	r3, [r7, #12]
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d005      	beq.n	80040f6 <SPI_I2S_GetITStatus+0x60>
 80040ea:	893b      	ldrh	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <SPI_I2S_GetITStatus+0x60>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
 80040f4:	e001      	b.n	80040fa <SPI_I2S_GetITStatus+0x64>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  //assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  //assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	2201      	movs	r2, #1
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8004126:	89fb      	ldrh	r3, [r7, #14]
 8004128:	43db      	mvns	r3, r3
 800412a:	b29b      	uxth	r3, r3
 800412c:	461a      	mov	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	609a      	str	r2, [r3, #8]
}
 8004132:	bf00      	nop
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <SystemClock_Config>:
#include "SystemClock.h"

HAL_StatusTypeDef SystemClock_Config(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b092      	sub	sp, #72	; 0x48
 8004144:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef status;

  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 8004146:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <SystemClock_Config+0x84>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <SystemClock_Config+0x84>)
 800414c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004150:	6413      	str	r3, [r2, #64]	; 0x40

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004152:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <SystemClock_Config+0x88>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800415a:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <SystemClock_Config+0x88>)
 800415c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004160:	6013      	str	r3, [r2, #0]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004162:	2302      	movs	r3, #2
 8004164:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004166:	2301      	movs	r3, #1
 8004168:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 800416a:	2310      	movs	r3, #16
 800416c:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800416e:	2302      	movs	r3, #2
 8004170:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004176:	2310      	movs	r3, #16
 8004178:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLN = 336;
 800417a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004180:	2304      	movs	r3, #4
 8004182:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004184:	2307      	movs	r3, #7
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
  status = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004188:	463b      	mov	r3, r7
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe f80a 	bl	80021a4 <HAL_RCC_OscConfig>
 8004190:	4603      	mov	r3, r0
 8004192:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004196:	230f      	movs	r3, #15
 8004198:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800419a:	2302      	movs	r3, #2
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800419e:	2300      	movs	r3, #0
 80041a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80041a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041a8:	2300      	movs	r3, #0
 80041aa:	643b      	str	r3, [r7, #64]	; 0x40
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80041ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041b0:	2102      	movs	r1, #2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe fa4c 	bl	8002650 <HAL_RCC_ClockConfig>

  return status;
 80041b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47

}
 80041bc:	4618      	mov	r0, r3
 80041be:	3748      	adds	r7, #72	; 0x48
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40023800 	.word	0x40023800
 80041c8:	40007000 	.word	0x40007000

080041cc <I2S_RxCpltCallback>:

float b = sin(2*pi*SINE_FREQ/FREQ_ECH_);
float a = -2*cos(2*pi*SINE_FREQ/FREQ_ECH_);

void I2S_RxCpltCallback(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
  int16_t left_in_sample = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	81fb      	strh	r3, [r7, #14]
  int16_t right_in_sample = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	81bb      	strh	r3, [r7, #12]

  int16_t left_out_sample = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	817b      	strh	r3, [r7, #10]
  int16_t right_out_sample = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	813b      	strh	r3, [r7, #8]
  static float y_1 = sin(2*pi*SINE_FREQ/FREQ_ECH_);
  static float y_2 = 0;
  float y;

  if (SPI_I2S_GetFlagStatus(I2Sx, I2S_FLAG_CHSIDE) == SET)
 80041e2:	2104      	movs	r1, #4
 80041e4:	4829      	ldr	r0, [pc, #164]	; (800428c <I2S_RxCpltCallback+0xc0>)
 80041e6:	f7ff ff2a 	bl	800403e <SPI_I2S_GetFlagStatus>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d114      	bne.n	800421a <I2S_RxCpltCallback+0x4e>
    {
		left_in_sample = SPI_I2S_ReceiveData(I2Sx); // obligatoire pour acquitter int
 80041f0:	4826      	ldr	r0, [pc, #152]	; (800428c <I2S_RxCpltCallback+0xc0>)
 80041f2:	f7ff febb 	bl	8003f6c <SPI_I2S_ReceiveData>
 80041f6:	4603      	mov	r3, r0
 80041f8:	81fb      	strh	r3, [r7, #14]
      left_out_sample = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	817b      	strh	r3, [r7, #10]
      while (SPI_I2S_GetFlagStatus(I2Sxext, SPI_I2S_FLAG_TXE ) != SET){}
 80041fe:	bf00      	nop
 8004200:	2102      	movs	r1, #2
 8004202:	4823      	ldr	r0, [pc, #140]	; (8004290 <I2S_RxCpltCallback+0xc4>)
 8004204:	f7ff ff1b 	bl	800403e <SPI_I2S_GetFlagStatus>
 8004208:	4603      	mov	r3, r0
 800420a:	2b01      	cmp	r3, #1
 800420c:	d1f8      	bne.n	8004200 <I2S_RxCpltCallback+0x34>
      SPI_I2S_SendData(I2Sxext, left_out_sample);
 800420e:	897b      	ldrh	r3, [r7, #10]
 8004210:	4619      	mov	r1, r3
 8004212:	481f      	ldr	r0, [pc, #124]	; (8004290 <I2S_RxCpltCallback+0xc4>)
 8004214:	f7ff feb7 	bl	8003f86 <SPI_I2S_SendData>

	  right_out_sample =(int16_t)(y*10000.0); // amplification
      while (SPI_I2S_GetFlagStatus(I2Sxext, SPI_I2S_FLAG_TXE ) != SET){}
      SPI_I2S_SendData(I2Sxext, right_out_sample);
    }
}
 8004218:	e034      	b.n	8004284 <I2S_RxCpltCallback+0xb8>
		right_in_sample = SPI_I2S_ReceiveData(I2Sx); // obligatoire pour acquitter int
 800421a:	481c      	ldr	r0, [pc, #112]	; (800428c <I2S_RxCpltCallback+0xc0>)
 800421c:	f7ff fea6 	bl	8003f6c <SPI_I2S_ReceiveData>
 8004220:	4603      	mov	r3, r0
 8004222:	81bb      	strh	r3, [r7, #12]
	  y= -a*y_1 - y_2; // à compléter
 8004224:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <I2S_RxCpltCallback+0xc8>)
 8004226:	edd3 7a00 	vldr	s15, [r3]
 800422a:	eeb1 7a67 	vneg.f32	s14, s15
 800422e:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <I2S_RxCpltCallback+0xcc>)
 8004230:	edd3 7a00 	vldr	s15, [r3]
 8004234:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004238:	4b18      	ldr	r3, [pc, #96]	; (800429c <I2S_RxCpltCallback+0xd0>)
 800423a:	edd3 7a00 	vldr	s15, [r3]
 800423e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004242:	edc7 7a01 	vstr	s15, [r7, #4]
	  y_2 = y_1;
 8004246:	4b14      	ldr	r3, [pc, #80]	; (8004298 <I2S_RxCpltCallback+0xcc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a14      	ldr	r2, [pc, #80]	; (800429c <I2S_RxCpltCallback+0xd0>)
 800424c:	6013      	str	r3, [r2, #0]
	  y_1 = y;
 800424e:	4a12      	ldr	r2, [pc, #72]	; (8004298 <I2S_RxCpltCallback+0xcc>)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6013      	str	r3, [r2, #0]
	  right_out_sample =(int16_t)(y*10000.0); // amplification
 8004254:	edd7 7a01 	vldr	s15, [r7, #4]
 8004258:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80042a0 <I2S_RxCpltCallback+0xd4>
 800425c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004264:	ee17 3a90 	vmov	r3, s15
 8004268:	813b      	strh	r3, [r7, #8]
      while (SPI_I2S_GetFlagStatus(I2Sxext, SPI_I2S_FLAG_TXE ) != SET){}
 800426a:	bf00      	nop
 800426c:	2102      	movs	r1, #2
 800426e:	4808      	ldr	r0, [pc, #32]	; (8004290 <I2S_RxCpltCallback+0xc4>)
 8004270:	f7ff fee5 	bl	800403e <SPI_I2S_GetFlagStatus>
 8004274:	4603      	mov	r3, r0
 8004276:	2b01      	cmp	r3, #1
 8004278:	d1f8      	bne.n	800426c <I2S_RxCpltCallback+0xa0>
      SPI_I2S_SendData(I2Sxext, right_out_sample);
 800427a:	893b      	ldrh	r3, [r7, #8]
 800427c:	4619      	mov	r1, r3
 800427e:	4804      	ldr	r0, [pc, #16]	; (8004290 <I2S_RxCpltCallback+0xc4>)
 8004280:	f7ff fe81 	bl	8003f86 <SPI_I2S_SendData>
}
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40003800 	.word	0x40003800
 8004290:	40003400 	.word	0x40003400
 8004294:	2000ed84 	.word	0x2000ed84
 8004298:	2000ed88 	.word	0x2000ed88
 800429c:	2000f204 	.word	0x2000f204
 80042a0:	461c4000 	.word	0x461c4000

080042a4 <HAL_TIM_PeriodElapsedCallback>:

//===============================================================
// 				TIMER INTERRUPT CALLBACK FUNCTION
//================================================================
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	if(htim==&TimHandle5)
	{
	}
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <main>:
//============================================================================
//	>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>	MAIN	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//============================================================================

int main(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	; 0x28
 80042bc:	af00      	add	r7, sp, #0

    uint8_t mess_to_send[3];
    uint16_t val;

	HAL_Init();
 80042be:	f7fc fbd3 	bl	8000a68 <HAL_Init>
	SystemClock_Config();
 80042c2:	f7ff ff3d 	bl	8004140 <SystemClock_Config>
 80042c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042ca:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	fa93 f3a3 	rbit	r3, r3
 80042d2:	607b      	str	r3, [r7, #4]
   return(result);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	fab3 f383 	clz	r3, r3
 80042de:	60fb      	str	r3, [r7, #12]
  return(result);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	b2db      	uxtb	r3, r3

	__HAL_RCC_PLLI2S_CONFIG(258, 3);
 80042e4:	461a      	mov	r2, r3
 80042e6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80042ea:	fa03 f202 	lsl.w	r2, r3, r2
 80042ee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80042f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	fa93 f3a3 	rbit	r3, r3
 80042fa:	617b      	str	r3, [r7, #20]
   return(result);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	fab3 f383 	clz	r3, r3
 8004306:	61fb      	str	r3, [r7, #28]
  return(result);
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	4619      	mov	r1, r3
 800430e:	2303      	movs	r3, #3
 8004310:	408b      	lsls	r3, r1
 8004312:	431a      	orrs	r2, r3
 8004314:	4b72      	ldr	r3, [pc, #456]	; (80044e0 <main+0x228>)
 8004316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	__HAL_RCC_PLLI2S_ENABLE();
 800431a:	4b72      	ldr	r3, [pc, #456]	; (80044e4 <main+0x22c>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]

	uart2_Init();
 8004320:	f001 fbc4 	bl	8005aac <uart2_Init>
	uart6_Init();			// CABLE MIDI//
 8004324:	f001 fbee 	bl	8005b04 <uart6_Init>
	i2c1_Init();
 8004328:	f001 fb3e 	bl	80059a8 <i2c1_Init>
	i2s2_Init();
 800432c:	f001 fb96 	bl	8005a5c <i2s2_Init>

	HAL_Delay(1000);
 8004330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004334:	f7fc fbf0 	bl	8000b18 <HAL_Delay>

	term_printf("start \n\r");
 8004338:	486b      	ldr	r0, [pc, #428]	; (80044e8 <main+0x230>)
 800433a:	f001 fc69 	bl	8005c10 <term_printf>
	stm32_wm5102_init(FREQ_ECH_, WM5102_LINE_IN, IO_METHOD_INTR);
 800433e:	2200      	movs	r2, #0
 8004340:	2101      	movs	r1, #1
 8004342:	2003      	movs	r0, #3
 8004344:	f000 fdc8 	bl	8004ed8 <stm32_wm5102_init>


			//------------------------------------------------
			// 					MIDI SNIFFER
			//------------------------------------------------
					if(MIDI_receive())
 8004348:	f000 f90a 	bl	8004560 <MIDI_receive>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 80c1 	beq.w	80044d6 <main+0x21e>
					{
						switch (midi_mess.type)
 8004354:	4b65      	ldr	r3, [pc, #404]	; (80044ec <main+0x234>)
 8004356:	785b      	ldrb	r3, [r3, #1]
 8004358:	2bff      	cmp	r3, #255	; 0xff
 800435a:	f000 80b0 	beq.w	80044be <main+0x206>
 800435e:	2bff      	cmp	r3, #255	; 0xff
 8004360:	f300 80bb 	bgt.w	80044da <main+0x222>
 8004364:	2be0      	cmp	r3, #224	; 0xe0
 8004366:	d06c      	beq.n	8004442 <main+0x18a>
 8004368:	2be0      	cmp	r3, #224	; 0xe0
 800436a:	f300 80b6 	bgt.w	80044da <main+0x222>
 800436e:	2bc0      	cmp	r3, #192	; 0xc0
 8004370:	f000 808c 	beq.w	800448c <main+0x1d4>
 8004374:	2bc0      	cmp	r3, #192	; 0xc0
 8004376:	f300 80b0 	bgt.w	80044da <main+0x222>
 800437a:	2bb0      	cmp	r3, #176	; 0xb0
 800437c:	d043      	beq.n	8004406 <main+0x14e>
 800437e:	2bb0      	cmp	r3, #176	; 0xb0
 8004380:	f300 80ab 	bgt.w	80044da <main+0x222>
 8004384:	2b80      	cmp	r3, #128	; 0x80
 8004386:	d020      	beq.n	80043ca <main+0x112>
 8004388:	2b90      	cmp	r3, #144	; 0x90
 800438a:	f040 80a6 	bne.w	80044da <main+0x222>
						{
							case NOTE_ON : 	term_printf("NOTE ON, channel : %d, Note : %d, Velocity : %d \n\r",midi_mess.channel, midi_mess.data1, midi_mess.data2);
 800438e:	4b57      	ldr	r3, [pc, #348]	; (80044ec <main+0x234>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	4619      	mov	r1, r3
 8004394:	4b55      	ldr	r3, [pc, #340]	; (80044ec <main+0x234>)
 8004396:	789b      	ldrb	r3, [r3, #2]
 8004398:	461a      	mov	r2, r3
 800439a:	4b54      	ldr	r3, [pc, #336]	; (80044ec <main+0x234>)
 800439c:	78db      	ldrb	r3, [r3, #3]
 800439e:	4854      	ldr	r0, [pc, #336]	; (80044f0 <main+0x238>)
 80043a0:	f001 fc36 	bl	8005c10 <term_printf>
											mess_to_send[0]= midi_mess.type | midi_mess.channel ;
 80043a4:	4b51      	ldr	r3, [pc, #324]	; (80044ec <main+0x234>)
 80043a6:	785a      	ldrb	r2, [r3, #1]
 80043a8:	4b50      	ldr	r3, [pc, #320]	; (80044ec <main+0x234>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	703b      	strb	r3, [r7, #0]
											mess_to_send[1]= midi_mess.data1;
 80043b2:	4b4e      	ldr	r3, [pc, #312]	; (80044ec <main+0x234>)
 80043b4:	789b      	ldrb	r3, [r3, #2]
 80043b6:	707b      	strb	r3, [r7, #1]
											mess_to_send[2]= midi_mess.data2;
 80043b8:	4b4c      	ldr	r3, [pc, #304]	; (80044ec <main+0x234>)
 80043ba:	78db      	ldrb	r3, [r3, #3]
 80043bc:	70bb      	strb	r3, [r7, #2]
											MIDI_send(mess_to_send , 3);
 80043be:	463b      	mov	r3, r7
 80043c0:	2103      	movs	r1, #3
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 faee 	bl	80049a4 <MIDI_send>
											break;
 80043c8:	e088      	b.n	80044dc <main+0x224>

							case NOTE_OFF:	term_printf("NOTE OFF, channel : %d, Note : %d, Velocity : %d \n\r",midi_mess.channel, midi_mess.data1, midi_mess.data2);
 80043ca:	4b48      	ldr	r3, [pc, #288]	; (80044ec <main+0x234>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	4619      	mov	r1, r3
 80043d0:	4b46      	ldr	r3, [pc, #280]	; (80044ec <main+0x234>)
 80043d2:	789b      	ldrb	r3, [r3, #2]
 80043d4:	461a      	mov	r2, r3
 80043d6:	4b45      	ldr	r3, [pc, #276]	; (80044ec <main+0x234>)
 80043d8:	78db      	ldrb	r3, [r3, #3]
 80043da:	4846      	ldr	r0, [pc, #280]	; (80044f4 <main+0x23c>)
 80043dc:	f001 fc18 	bl	8005c10 <term_printf>

							  				mess_to_send[0]= midi_mess.type | midi_mess.channel ;
 80043e0:	4b42      	ldr	r3, [pc, #264]	; (80044ec <main+0x234>)
 80043e2:	785a      	ldrb	r2, [r3, #1]
 80043e4:	4b41      	ldr	r3, [pc, #260]	; (80044ec <main+0x234>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	703b      	strb	r3, [r7, #0]
							  				mess_to_send[1]= midi_mess.data1;
 80043ee:	4b3f      	ldr	r3, [pc, #252]	; (80044ec <main+0x234>)
 80043f0:	789b      	ldrb	r3, [r3, #2]
 80043f2:	707b      	strb	r3, [r7, #1]
							  				mess_to_send[2]= midi_mess.data2;
 80043f4:	4b3d      	ldr	r3, [pc, #244]	; (80044ec <main+0x234>)
 80043f6:	78db      	ldrb	r3, [r3, #3]
 80043f8:	70bb      	strb	r3, [r7, #2]
							  				MIDI_send(mess_to_send , 3);
 80043fa:	463b      	mov	r3, r7
 80043fc:	2103      	movs	r1, #3
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fad0 	bl	80049a4 <MIDI_send>
							  	  	  	  	break;
 8004404:	e06a      	b.n	80044dc <main+0x224>

							case CONTROL_CHANGE:
											term_printf("CONTROL CHANGE, channel : %d, control Nbr : %d, Value : %d \n\r",midi_mess.channel, midi_mess.data1, midi_mess.data2);
 8004406:	4b39      	ldr	r3, [pc, #228]	; (80044ec <main+0x234>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	4619      	mov	r1, r3
 800440c:	4b37      	ldr	r3, [pc, #220]	; (80044ec <main+0x234>)
 800440e:	789b      	ldrb	r3, [r3, #2]
 8004410:	461a      	mov	r2, r3
 8004412:	4b36      	ldr	r3, [pc, #216]	; (80044ec <main+0x234>)
 8004414:	78db      	ldrb	r3, [r3, #3]
 8004416:	4838      	ldr	r0, [pc, #224]	; (80044f8 <main+0x240>)
 8004418:	f001 fbfa 	bl	8005c10 <term_printf>
											mess_to_send[0]= midi_mess.type | midi_mess.channel ;
 800441c:	4b33      	ldr	r3, [pc, #204]	; (80044ec <main+0x234>)
 800441e:	785a      	ldrb	r2, [r3, #1]
 8004420:	4b32      	ldr	r3, [pc, #200]	; (80044ec <main+0x234>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	4313      	orrs	r3, r2
 8004426:	b2db      	uxtb	r3, r3
 8004428:	703b      	strb	r3, [r7, #0]
											mess_to_send[1]= midi_mess.data1;
 800442a:	4b30      	ldr	r3, [pc, #192]	; (80044ec <main+0x234>)
 800442c:	789b      	ldrb	r3, [r3, #2]
 800442e:	707b      	strb	r3, [r7, #1]
											mess_to_send[2]= midi_mess.data2;
 8004430:	4b2e      	ldr	r3, [pc, #184]	; (80044ec <main+0x234>)
 8004432:	78db      	ldrb	r3, [r3, #3]
 8004434:	70bb      	strb	r3, [r7, #2]
											MIDI_send(mess_to_send , 3);
 8004436:	463b      	mov	r3, r7
 8004438:	2103      	movs	r1, #3
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fab2 	bl	80049a4 <MIDI_send>
											break;
 8004440:	e04c      	b.n	80044dc <main+0x224>

							case PITCH_BEND:
											val = midi_mess.data2 << 7 | midi_mess.data1;
 8004442:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <main+0x234>)
 8004444:	78db      	ldrb	r3, [r3, #3]
 8004446:	01db      	lsls	r3, r3, #7
 8004448:	b21a      	sxth	r2, r3
 800444a:	4b28      	ldr	r3, [pc, #160]	; (80044ec <main+0x234>)
 800444c:	789b      	ldrb	r3, [r3, #2]
 800444e:	b21b      	sxth	r3, r3
 8004450:	4313      	orrs	r3, r2
 8004452:	b21b      	sxth	r3, r3
 8004454:	84fb      	strh	r3, [r7, #38]	; 0x26
											term_printf("PITCH_BEND, channel : %d, Value : %d \n\r",midi_mess.channel,val);
 8004456:	4b25      	ldr	r3, [pc, #148]	; (80044ec <main+0x234>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	4619      	mov	r1, r3
 800445c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800445e:	461a      	mov	r2, r3
 8004460:	4826      	ldr	r0, [pc, #152]	; (80044fc <main+0x244>)
 8004462:	f001 fbd5 	bl	8005c10 <term_printf>
											mess_to_send[0]= midi_mess.type | midi_mess.channel ;
 8004466:	4b21      	ldr	r3, [pc, #132]	; (80044ec <main+0x234>)
 8004468:	785a      	ldrb	r2, [r3, #1]
 800446a:	4b20      	ldr	r3, [pc, #128]	; (80044ec <main+0x234>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	4313      	orrs	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	703b      	strb	r3, [r7, #0]
											mess_to_send[1]= midi_mess.data1;
 8004474:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <main+0x234>)
 8004476:	789b      	ldrb	r3, [r3, #2]
 8004478:	707b      	strb	r3, [r7, #1]
											mess_to_send[2]= midi_mess.data2;
 800447a:	4b1c      	ldr	r3, [pc, #112]	; (80044ec <main+0x234>)
 800447c:	78db      	ldrb	r3, [r3, #3]
 800447e:	70bb      	strb	r3, [r7, #2]
											MIDI_send(mess_to_send , 3);
 8004480:	463b      	mov	r3, r7
 8004482:	2103      	movs	r1, #3
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fa8d 	bl	80049a4 <MIDI_send>
											break;
 800448a:	e027      	b.n	80044dc <main+0x224>

							case PROGRAM_CHANGE:
											term_printf("PRG CHANGE, channel : %d, Value : %d \n\r",midi_mess.channel,midi_mess.data1);
 800448c:	4b17      	ldr	r3, [pc, #92]	; (80044ec <main+0x234>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	4619      	mov	r1, r3
 8004492:	4b16      	ldr	r3, [pc, #88]	; (80044ec <main+0x234>)
 8004494:	789b      	ldrb	r3, [r3, #2]
 8004496:	461a      	mov	r2, r3
 8004498:	4819      	ldr	r0, [pc, #100]	; (8004500 <main+0x248>)
 800449a:	f001 fbb9 	bl	8005c10 <term_printf>
											mess_to_send[0]= midi_mess.type | midi_mess.channel ;
 800449e:	4b13      	ldr	r3, [pc, #76]	; (80044ec <main+0x234>)
 80044a0:	785a      	ldrb	r2, [r3, #1]
 80044a2:	4b12      	ldr	r3, [pc, #72]	; (80044ec <main+0x234>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	703b      	strb	r3, [r7, #0]
											mess_to_send[1]= midi_mess.data1;
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <main+0x234>)
 80044ae:	789b      	ldrb	r3, [r3, #2]
 80044b0:	707b      	strb	r3, [r7, #1]
											MIDI_send(mess_to_send , 2);
 80044b2:	463b      	mov	r3, r7
 80044b4:	2102      	movs	r1, #2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fa74 	bl	80049a4 <MIDI_send>
											break;
 80044bc:	e00e      	b.n	80044dc <main+0x224>

							case RESET : 	term_printf("RESET \n\r");
 80044be:	4811      	ldr	r0, [pc, #68]	; (8004504 <main+0x24c>)
 80044c0:	f001 fba6 	bl	8005c10 <term_printf>
											mess_to_send[0]= midi_mess.type;
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <main+0x234>)
 80044c6:	785b      	ldrb	r3, [r3, #1]
 80044c8:	703b      	strb	r3, [r7, #0]
											MIDI_send(mess_to_send , 1);
 80044ca:	463b      	mov	r3, r7
 80044cc:	2101      	movs	r1, #1
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fa68 	bl	80049a4 <MIDI_send>
											break;
 80044d4:	e002      	b.n	80044dc <main+0x224>

							default : break ;
						}
					}
 80044d6:	bf00      	nop
 80044d8:	e736      	b.n	8004348 <main+0x90>
							default : break ;
 80044da:	bf00      	nop
					if(MIDI_receive())
 80044dc:	e734      	b.n	8004348 <main+0x90>
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800
 80044e4:	42470068 	.word	0x42470068
 80044e8:	08006088 	.word	0x08006088
 80044ec:	2000f24c 	.word	0x2000f24c
 80044f0:	08006094 	.word	0x08006094
 80044f4:	080060c8 	.word	0x080060c8
 80044f8:	080060fc 	.word	0x080060fc
 80044fc:	0800613c 	.word	0x0800613c
 8004500:	08006164 	.word	0x08006164
 8004504:	0800618c 	.word	0x0800618c

08004508 <MIDI_rcv_cb>:

uint8_t 	midi_buf_send[BUF_SIZE];

//=========================================================================
void MIDI_rcv_cb(uint8_t car)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	71fb      	strb	r3, [r7, #7]
		midi_buf[(p_wr++)%BUF_SIZE] = car;
 8004512:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <MIDI_rcv_cb+0x48>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	b2d1      	uxtb	r1, r2
 800451a:	4a0d      	ldr	r2, [pc, #52]	; (8004550 <MIDI_rcv_cb+0x48>)
 800451c:	7011      	strb	r1, [r2, #0]
 800451e:	4a0d      	ldr	r2, [pc, #52]	; (8004554 <MIDI_rcv_cb+0x4c>)
 8004520:	fba2 1203 	umull	r1, r2, r2, r3
 8004524:	0952      	lsrs	r2, r2, #5
 8004526:	2164      	movs	r1, #100	; 0x64
 8004528:	fb01 f202 	mul.w	r2, r1, r2
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	b2db      	uxtb	r3, r3
 8004530:	4619      	mov	r1, r3
 8004532:	4a09      	ldr	r2, [pc, #36]	; (8004558 <MIDI_rcv_cb+0x50>)
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	5453      	strb	r3, [r2, r1]
		size++;
 8004538:	4b08      	ldr	r3, [pc, #32]	; (800455c <MIDI_rcv_cb+0x54>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	3301      	adds	r3, #1
 800453e:	b2da      	uxtb	r2, r3
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <MIDI_rcv_cb+0x54>)
 8004542:	701a      	strb	r2, [r3, #0]
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	2000f208 	.word	0x2000f208
 8004554:	51eb851f 	.word	0x51eb851f
 8004558:	2000f29c 	.word	0x2000f29c
 800455c:	2000f20a 	.word	0x2000f20a

08004560 <MIDI_receive>:
//=========================================================================
uint8_t MIDI_receive()
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
	//--------------------------------------------------------------------
	if (size == 0)
 8004564:	4ba2      	ldr	r3, [pc, #648]	; (80047f0 <MIDI_receive+0x290>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <MIDI_receive+0x10>
	{
		return 0;
 800456c:	2300      	movs	r3, #0
 800456e:	e20a      	b.n	8004986 <MIDI_receive+0x426>
	}
	//--------------------------------------------------------------------
	if( size == 1 )
 8004570:	4b9f      	ldr	r3, [pc, #636]	; (80047f0 <MIDI_receive+0x290>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d127      	bne.n	80045c8 <MIDI_receive+0x68>
	{
		midi_mess.type	= midi_buf[p_rd];
 8004578:	4b9e      	ldr	r3, [pc, #632]	; (80047f4 <MIDI_receive+0x294>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	4b9e      	ldr	r3, [pc, #632]	; (80047f8 <MIDI_receive+0x298>)
 8004580:	5c9a      	ldrb	r2, [r3, r2]
 8004582:	4b9e      	ldr	r3, [pc, #632]	; (80047fc <MIDI_receive+0x29c>)
 8004584:	705a      	strb	r2, [r3, #1]
		switch ( midi_mess.type )
 8004586:	4b9d      	ldr	r3, [pc, #628]	; (80047fc <MIDI_receive+0x29c>)
 8004588:	785b      	ldrb	r3, [r3, #1]
 800458a:	3bf6      	subs	r3, #246	; 0xf6
 800458c:	2b09      	cmp	r3, #9
 800458e:	bf8c      	ite	hi
 8004590:	2201      	movhi	r2, #1
 8004592:	2200      	movls	r2, #0
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	2a00      	cmp	r2, #0
 8004598:	d114      	bne.n	80045c4 <MIDI_receive+0x64>
 800459a:	2201      	movs	r2, #1
 800459c:	409a      	lsls	r2, r3
 800459e:	f240 3377 	movw	r3, #887	; 0x377
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bf14      	ite	ne
 80045a8:	2301      	movne	r3, #1
 80045aa:	2300      	moveq	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d008      	beq.n	80045c4 <MIDI_receive+0x64>
			case	START				:
			case	CONTINUE			:
			case	STOP				:
			case	ACTIVE_SENSING		:
			case 	RESET				:		// Valid Message
											size = 0;
 80045b2:	4b8f      	ldr	r3, [pc, #572]	; (80047f0 <MIDI_receive+0x290>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
											p_wr = p_rd;
 80045b8:	4b8e      	ldr	r3, [pc, #568]	; (80047f4 <MIDI_receive+0x294>)
 80045ba:	781a      	ldrb	r2, [r3, #0]
 80045bc:	4b90      	ldr	r3, [pc, #576]	; (8004800 <MIDI_receive+0x2a0>)
 80045be:	701a      	strb	r2, [r3, #0]
											return 1;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e1e0      	b.n	8004986 <MIDI_receive+0x426>
											break;
			default : return 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	e1de      	b.n	8004986 <MIDI_receive+0x426>
		}
	}
	//--------------------------------------------------------------------
	if( size == 2 )
 80045c8:	4b89      	ldr	r3, [pc, #548]	; (80047f0 <MIDI_receive+0x290>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d16b      	bne.n	80046a8 <MIDI_receive+0x148>
	{
		midi_mess.channel = ( midi_buf[p_rd] & CHANNEL_MASK ) + 1 ;
 80045d0:	4b88      	ldr	r3, [pc, #544]	; (80047f4 <MIDI_receive+0x294>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	4b88      	ldr	r3, [pc, #544]	; (80047f8 <MIDI_receive+0x298>)
 80045d8:	5c9b      	ldrb	r3, [r3, r2]
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	3301      	adds	r3, #1
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	4b85      	ldr	r3, [pc, #532]	; (80047fc <MIDI_receive+0x29c>)
 80045e6:	701a      	strb	r2, [r3, #0]
		midi_mess.type	= midi_buf[p_rd] & TYPE_MASK;
 80045e8:	4b82      	ldr	r3, [pc, #520]	; (80047f4 <MIDI_receive+0x294>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	461a      	mov	r2, r3
 80045ee:	4b82      	ldr	r3, [pc, #520]	; (80047f8 <MIDI_receive+0x298>)
 80045f0:	5c9b      	ldrb	r3, [r3, r2]
 80045f2:	f023 030f 	bic.w	r3, r3, #15
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	4b80      	ldr	r3, [pc, #512]	; (80047fc <MIDI_receive+0x29c>)
 80045fa:	705a      	strb	r2, [r3, #1]

		switch (midi_mess.type)
 80045fc:	4b7f      	ldr	r3, [pc, #508]	; (80047fc <MIDI_receive+0x29c>)
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	2bf0      	cmp	r3, #240	; 0xf0
 8004602:	d025      	beq.n	8004650 <MIDI_receive+0xf0>
 8004604:	2bf0      	cmp	r3, #240	; 0xf0
 8004606:	dc4d      	bgt.n	80046a4 <MIDI_receive+0x144>
 8004608:	2bc0      	cmp	r3, #192	; 0xc0
 800460a:	d001      	beq.n	8004610 <MIDI_receive+0xb0>
 800460c:	2bd0      	cmp	r3, #208	; 0xd0
 800460e:	d149      	bne.n	80046a4 <MIDI_receive+0x144>
		{
			case		PROGRAM_CHANGE			:
			case		CHANNEL_PRESS_AFT		:
												// Valid Message
													midi_mess.data1 = midi_buf[(p_rd+1)%BUF_SIZE] & 0x7F;
 8004610:	4b78      	ldr	r3, [pc, #480]	; (80047f4 <MIDI_receive+0x294>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	4b7b      	ldr	r3, [pc, #492]	; (8004804 <MIDI_receive+0x2a4>)
 8004618:	fb83 1302 	smull	r1, r3, r3, r2
 800461c:	1159      	asrs	r1, r3, #5
 800461e:	17d3      	asrs	r3, r2, #31
 8004620:	1acb      	subs	r3, r1, r3
 8004622:	2164      	movs	r1, #100	; 0x64
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	4a73      	ldr	r2, [pc, #460]	; (80047f8 <MIDI_receive+0x298>)
 800462c:	5cd3      	ldrb	r3, [r2, r3]
 800462e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004632:	b2da      	uxtb	r2, r3
 8004634:	4b71      	ldr	r3, [pc, #452]	; (80047fc <MIDI_receive+0x29c>)
 8004636:	709a      	strb	r2, [r3, #2]
													midi_mess.data2 = 0;
 8004638:	4b70      	ldr	r3, [pc, #448]	; (80047fc <MIDI_receive+0x29c>)
 800463a:	2200      	movs	r2, #0
 800463c:	70da      	strb	r2, [r3, #3]
													size = 0;
 800463e:	4b6c      	ldr	r3, [pc, #432]	; (80047f0 <MIDI_receive+0x290>)
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
													p_wr = p_rd;
 8004644:	4b6b      	ldr	r3, [pc, #428]	; (80047f4 <MIDI_receive+0x294>)
 8004646:	781a      	ldrb	r2, [r3, #0]
 8004648:	4b6d      	ldr	r3, [pc, #436]	; (8004800 <MIDI_receive+0x2a0>)
 800464a:	701a      	strb	r2, [r3, #0]
													return 1;
 800464c:	2301      	movs	r3, #1
 800464e:	e19a      	b.n	8004986 <MIDI_receive+0x426>
													break;

			case		SYSTEM_MESSAGE	:		if (( midi_mess.type == TIME_CODE_QUARTER_FRAME ) || ( midi_mess.type == SONG_SELECT ))
 8004650:	4b6a      	ldr	r3, [pc, #424]	; (80047fc <MIDI_receive+0x29c>)
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	2bf1      	cmp	r3, #241	; 0xf1
 8004656:	d003      	beq.n	8004660 <MIDI_receive+0x100>
 8004658:	4b68      	ldr	r3, [pc, #416]	; (80047fc <MIDI_receive+0x29c>)
 800465a:	785b      	ldrb	r3, [r3, #1]
 800465c:	2bf3      	cmp	r3, #243	; 0xf3
 800465e:	d11f      	bne.n	80046a0 <MIDI_receive+0x140>
												{	// Valid Message
													midi_mess.data1 = midi_buf[(p_rd+1)%BUF_SIZE] & 0x7F;
 8004660:	4b64      	ldr	r3, [pc, #400]	; (80047f4 <MIDI_receive+0x294>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	4b67      	ldr	r3, [pc, #412]	; (8004804 <MIDI_receive+0x2a4>)
 8004668:	fb83 1302 	smull	r1, r3, r3, r2
 800466c:	1159      	asrs	r1, r3, #5
 800466e:	17d3      	asrs	r3, r2, #31
 8004670:	1acb      	subs	r3, r1, r3
 8004672:	2164      	movs	r1, #100	; 0x64
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	4a5f      	ldr	r2, [pc, #380]	; (80047f8 <MIDI_receive+0x298>)
 800467c:	5cd3      	ldrb	r3, [r2, r3]
 800467e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004682:	b2da      	uxtb	r2, r3
 8004684:	4b5d      	ldr	r3, [pc, #372]	; (80047fc <MIDI_receive+0x29c>)
 8004686:	709a      	strb	r2, [r3, #2]
													midi_mess.data2 = 0;
 8004688:	4b5c      	ldr	r3, [pc, #368]	; (80047fc <MIDI_receive+0x29c>)
 800468a:	2200      	movs	r2, #0
 800468c:	70da      	strb	r2, [r3, #3]
													size = 0;
 800468e:	4b58      	ldr	r3, [pc, #352]	; (80047f0 <MIDI_receive+0x290>)
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]
													p_wr = p_rd;
 8004694:	4b57      	ldr	r3, [pc, #348]	; (80047f4 <MIDI_receive+0x294>)
 8004696:	781a      	ldrb	r2, [r3, #0]
 8004698:	4b59      	ldr	r3, [pc, #356]	; (8004800 <MIDI_receive+0x2a0>)
 800469a:	701a      	strb	r2, [r3, #0]
													return 1;
 800469c:	2301      	movs	r3, #1
 800469e:	e172      	b.n	8004986 <MIDI_receive+0x426>

												}
												else
												{
													return 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e170      	b.n	8004986 <MIDI_receive+0x426>
												}
												break;
			default	:	return 0;	break;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e16e      	b.n	8004986 <MIDI_receive+0x426>
		}
	}
	//--------------------------------------------------------------------
	if( size == 3 )
 80046a8:	4b51      	ldr	r3, [pc, #324]	; (80047f0 <MIDI_receive+0x290>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	f040 80ab 	bne.w	8004808 <MIDI_receive+0x2a8>
	{
		midi_mess.channel = ( midi_buf[p_rd] & CHANNEL_MASK ) + 1 ;
 80046b2:	4b50      	ldr	r3, [pc, #320]	; (80047f4 <MIDI_receive+0x294>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	4b4f      	ldr	r3, [pc, #316]	; (80047f8 <MIDI_receive+0x298>)
 80046ba:	5c9b      	ldrb	r3, [r3, r2]
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	3301      	adds	r3, #1
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	4b4d      	ldr	r3, [pc, #308]	; (80047fc <MIDI_receive+0x29c>)
 80046c8:	701a      	strb	r2, [r3, #0]
		midi_mess.type	= midi_buf[p_rd];
 80046ca:	4b4a      	ldr	r3, [pc, #296]	; (80047f4 <MIDI_receive+0x294>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	4b49      	ldr	r3, [pc, #292]	; (80047f8 <MIDI_receive+0x298>)
 80046d2:	5c9a      	ldrb	r2, [r3, r2]
 80046d4:	4b49      	ldr	r3, [pc, #292]	; (80047fc <MIDI_receive+0x29c>)
 80046d6:	705a      	strb	r2, [r3, #1]

		switch ( midi_mess.type & TYPE_MASK )
 80046d8:	4b48      	ldr	r3, [pc, #288]	; (80047fc <MIDI_receive+0x29c>)
 80046da:	785b      	ldrb	r3, [r3, #1]
 80046dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046e0:	2bf0      	cmp	r3, #240	; 0xf0
 80046e2:	d03e      	beq.n	8004762 <MIDI_receive+0x202>
 80046e4:	2bf0      	cmp	r3, #240	; 0xf0
 80046e6:	dc7a      	bgt.n	80047de <MIDI_receive+0x27e>
 80046e8:	2be0      	cmp	r3, #224	; 0xe0
 80046ea:	d009      	beq.n	8004700 <MIDI_receive+0x1a0>
 80046ec:	2be0      	cmp	r3, #224	; 0xe0
 80046ee:	dc76      	bgt.n	80047de <MIDI_receive+0x27e>
 80046f0:	2bb0      	cmp	r3, #176	; 0xb0
 80046f2:	d005      	beq.n	8004700 <MIDI_receive+0x1a0>
 80046f4:	2bb0      	cmp	r3, #176	; 0xb0
 80046f6:	dc72      	bgt.n	80047de <MIDI_receive+0x27e>
 80046f8:	2b80      	cmp	r3, #128	; 0x80
 80046fa:	d001      	beq.n	8004700 <MIDI_receive+0x1a0>
 80046fc:	2b90      	cmp	r3, #144	; 0x90
 80046fe:	d16e      	bne.n	80047de <MIDI_receive+0x27e>
			case NOTE_ON		:
			case NOTE_OFF		:
			case CONTROL_CHANGE	:
			case PITCH_BEND		:
							// Valid Message
							midi_mess.data1 = midi_buf[(p_rd+1)%BUF_SIZE] & 0x7F;
 8004700:	4b3c      	ldr	r3, [pc, #240]	; (80047f4 <MIDI_receive+0x294>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <MIDI_receive+0x2a4>)
 8004708:	fb83 1302 	smull	r1, r3, r3, r2
 800470c:	1159      	asrs	r1, r3, #5
 800470e:	17d3      	asrs	r3, r2, #31
 8004710:	1acb      	subs	r3, r1, r3
 8004712:	2164      	movs	r1, #100	; 0x64
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	4a37      	ldr	r2, [pc, #220]	; (80047f8 <MIDI_receive+0x298>)
 800471c:	5cd3      	ldrb	r3, [r2, r3]
 800471e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004722:	b2da      	uxtb	r2, r3
 8004724:	4b35      	ldr	r3, [pc, #212]	; (80047fc <MIDI_receive+0x29c>)
 8004726:	709a      	strb	r2, [r3, #2]
							midi_mess.data2 = midi_buf[(p_rd+2)%BUF_SIZE] & 0x7F;
 8004728:	4b32      	ldr	r3, [pc, #200]	; (80047f4 <MIDI_receive+0x294>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	1c9a      	adds	r2, r3, #2
 800472e:	4b35      	ldr	r3, [pc, #212]	; (8004804 <MIDI_receive+0x2a4>)
 8004730:	fb83 1302 	smull	r1, r3, r3, r2
 8004734:	1159      	asrs	r1, r3, #5
 8004736:	17d3      	asrs	r3, r2, #31
 8004738:	1acb      	subs	r3, r1, r3
 800473a:	2164      	movs	r1, #100	; 0x64
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	4a2d      	ldr	r2, [pc, #180]	; (80047f8 <MIDI_receive+0x298>)
 8004744:	5cd3      	ldrb	r3, [r2, r3]
 8004746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800474a:	b2da      	uxtb	r2, r3
 800474c:	4b2b      	ldr	r3, [pc, #172]	; (80047fc <MIDI_receive+0x29c>)
 800474e:	70da      	strb	r2, [r3, #3]

							size = 0;
 8004750:	4b27      	ldr	r3, [pc, #156]	; (80047f0 <MIDI_receive+0x290>)
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
							p_wr = p_rd;
 8004756:	4b27      	ldr	r3, [pc, #156]	; (80047f4 <MIDI_receive+0x294>)
 8004758:	781a      	ldrb	r2, [r3, #0]
 800475a:	4b29      	ldr	r3, [pc, #164]	; (8004800 <MIDI_receive+0x2a0>)
 800475c:	701a      	strb	r2, [r3, #0]
							return 1;
 800475e:	2301      	movs	r3, #1
 8004760:	e111      	b.n	8004986 <MIDI_receive+0x426>
							break;

			case SYSTEM_MESSAGE	:		if ( midi_mess.type == SONG_POS_POINTER )
 8004762:	4b26      	ldr	r3, [pc, #152]	; (80047fc <MIDI_receive+0x29c>)
 8004764:	785b      	ldrb	r3, [r3, #1]
 8004766:	2bf2      	cmp	r3, #242	; 0xf2
 8004768:	d130      	bne.n	80047cc <MIDI_receive+0x26c>
										{
											// Valid Message
											midi_mess.data1 = midi_buf[(p_rd+1)%BUF_SIZE] & 0x7F;
 800476a:	4b22      	ldr	r3, [pc, #136]	; (80047f4 <MIDI_receive+0x294>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	4b24      	ldr	r3, [pc, #144]	; (8004804 <MIDI_receive+0x2a4>)
 8004772:	fb83 1302 	smull	r1, r3, r3, r2
 8004776:	1159      	asrs	r1, r3, #5
 8004778:	17d3      	asrs	r3, r2, #31
 800477a:	1acb      	subs	r3, r1, r3
 800477c:	2164      	movs	r1, #100	; 0x64
 800477e:	fb01 f303 	mul.w	r3, r1, r3
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <MIDI_receive+0x298>)
 8004786:	5cd3      	ldrb	r3, [r2, r3]
 8004788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800478c:	b2da      	uxtb	r2, r3
 800478e:	4b1b      	ldr	r3, [pc, #108]	; (80047fc <MIDI_receive+0x29c>)
 8004790:	709a      	strb	r2, [r3, #2]
											midi_mess.data2 = midi_buf[(p_rd+2)%BUF_SIZE] & 0x7F;
 8004792:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <MIDI_receive+0x294>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	1c9a      	adds	r2, r3, #2
 8004798:	4b1a      	ldr	r3, [pc, #104]	; (8004804 <MIDI_receive+0x2a4>)
 800479a:	fb83 1302 	smull	r1, r3, r3, r2
 800479e:	1159      	asrs	r1, r3, #5
 80047a0:	17d3      	asrs	r3, r2, #31
 80047a2:	1acb      	subs	r3, r1, r3
 80047a4:	2164      	movs	r1, #100	; 0x64
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	4a12      	ldr	r2, [pc, #72]	; (80047f8 <MIDI_receive+0x298>)
 80047ae:	5cd3      	ldrb	r3, [r2, r3]
 80047b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	4b11      	ldr	r3, [pc, #68]	; (80047fc <MIDI_receive+0x29c>)
 80047b8:	70da      	strb	r2, [r3, #3]

											size = 0;
 80047ba:	4b0d      	ldr	r3, [pc, #52]	; (80047f0 <MIDI_receive+0x290>)
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
											p_wr = p_rd;
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <MIDI_receive+0x294>)
 80047c2:	781a      	ldrb	r2, [r3, #0]
 80047c4:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <MIDI_receive+0x2a0>)
 80047c6:	701a      	strb	r2, [r3, #0]
											return 1;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0dc      	b.n	8004986 <MIDI_receive+0x426>
										}
										else
										{
											// Not a Valid Message
											size = 0;
 80047cc:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <MIDI_receive+0x290>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
											p_wr = p_rd;
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <MIDI_receive+0x294>)
 80047d4:	781a      	ldrb	r2, [r3, #0]
 80047d6:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <MIDI_receive+0x2a0>)
 80047d8:	701a      	strb	r2, [r3, #0]
											return 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	e0d3      	b.n	8004986 <MIDI_receive+0x426>
										}
							break;

			default :
							// Not a Valid Message
							size = 0;
 80047de:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <MIDI_receive+0x290>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
							p_wr = p_rd;
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <MIDI_receive+0x294>)
 80047e6:	781a      	ldrb	r2, [r3, #0]
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <MIDI_receive+0x2a0>)
 80047ea:	701a      	strb	r2, [r3, #0]
							return 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e0ca      	b.n	8004986 <MIDI_receive+0x426>
 80047f0:	2000f20a 	.word	0x2000f20a
 80047f4:	2000f209 	.word	0x2000f209
 80047f8:	2000f29c 	.word	0x2000f29c
 80047fc:	2000f24c 	.word	0x2000f24c
 8004800:	2000f208 	.word	0x2000f208
 8004804:	51eb851f 	.word	0x51eb851f
							break;
		}

	}
	//--------------------------------------------------------------------
	if( size  > 3)
 8004808:	4b61      	ldr	r3, [pc, #388]	; (8004990 <MIDI_receive+0x430>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b03      	cmp	r3, #3
 800480e:	f240 80b9 	bls.w	8004984 <MIDI_receive+0x424>
	{
		midi_mess.type	= midi_buf[p_rd];
 8004812:	4b60      	ldr	r3, [pc, #384]	; (8004994 <MIDI_receive+0x434>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	4b5f      	ldr	r3, [pc, #380]	; (8004998 <MIDI_receive+0x438>)
 800481a:	5c9a      	ldrb	r2, [r3, r2]
 800481c:	4b5f      	ldr	r3, [pc, #380]	; (800499c <MIDI_receive+0x43c>)
 800481e:	705a      	strb	r2, [r3, #1]
			// COULD BE A SYSTEM MESSAGE
			if ( midi_mess.type == RESET )
 8004820:	4b5e      	ldr	r3, [pc, #376]	; (800499c <MIDI_receive+0x43c>)
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	2bff      	cmp	r3, #255	; 0xff
 8004826:	d117      	bne.n	8004858 <MIDI_receive+0x2f8>
			{
				// Valid Message
				size = size -1;
 8004828:	4b59      	ldr	r3, [pc, #356]	; (8004990 <MIDI_receive+0x430>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	3b01      	subs	r3, #1
 800482e:	b2da      	uxtb	r2, r3
 8004830:	4b57      	ldr	r3, [pc, #348]	; (8004990 <MIDI_receive+0x430>)
 8004832:	701a      	strb	r2, [r3, #0]
				p_rd = (p_rd + 1)%BUF_SIZE;
 8004834:	4b57      	ldr	r3, [pc, #348]	; (8004994 <MIDI_receive+0x434>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	3301      	adds	r3, #1
 800483a:	4a59      	ldr	r2, [pc, #356]	; (80049a0 <MIDI_receive+0x440>)
 800483c:	fb82 1203 	smull	r1, r2, r2, r3
 8004840:	1151      	asrs	r1, r2, #5
 8004842:	17da      	asrs	r2, r3, #31
 8004844:	1a8a      	subs	r2, r1, r2
 8004846:	2164      	movs	r1, #100	; 0x64
 8004848:	fb01 f202 	mul.w	r2, r1, r2
 800484c:	1a9a      	subs	r2, r3, r2
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	4b50      	ldr	r3, [pc, #320]	; (8004994 <MIDI_receive+0x434>)
 8004852:	701a      	strb	r2, [r3, #0]
				return 1;
 8004854:	2301      	movs	r3, #1
 8004856:	e096      	b.n	8004986 <MIDI_receive+0x426>
			}

		midi_mess.type	= midi_buf[p_rd] & TYPE_MASK;
 8004858:	4b4e      	ldr	r3, [pc, #312]	; (8004994 <MIDI_receive+0x434>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	4b4e      	ldr	r3, [pc, #312]	; (8004998 <MIDI_receive+0x438>)
 8004860:	5c9b      	ldrb	r3, [r3, r2]
 8004862:	f023 030f 	bic.w	r3, r3, #15
 8004866:	b2da      	uxtb	r2, r3
 8004868:	4b4c      	ldr	r3, [pc, #304]	; (800499c <MIDI_receive+0x43c>)
 800486a:	705a      	strb	r2, [r3, #1]
		midi_mess.channel = ( midi_buf[p_rd] & CHANNEL_MASK ) + 1 ;
 800486c:	4b49      	ldr	r3, [pc, #292]	; (8004994 <MIDI_receive+0x434>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	4b49      	ldr	r3, [pc, #292]	; (8004998 <MIDI_receive+0x438>)
 8004874:	5c9b      	ldrb	r3, [r3, r2]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	b2db      	uxtb	r3, r3
 800487c:	3301      	adds	r3, #1
 800487e:	b2da      	uxtb	r2, r3
 8004880:	4b46      	ldr	r3, [pc, #280]	; (800499c <MIDI_receive+0x43c>)
 8004882:	701a      	strb	r2, [r3, #0]

		if ( midi_mess.type == PROGRAM_CHANGE )
 8004884:	4b45      	ldr	r3, [pc, #276]	; (800499c <MIDI_receive+0x43c>)
 8004886:	785b      	ldrb	r3, [r3, #1]
 8004888:	2bc0      	cmp	r3, #192	; 0xc0
 800488a:	d12b      	bne.n	80048e4 <MIDI_receive+0x384>
		{
			// Valid Message
			midi_mess.data1 = midi_buf[(p_rd+1)%BUF_SIZE] & 0x7F;
 800488c:	4b41      	ldr	r3, [pc, #260]	; (8004994 <MIDI_receive+0x434>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	4b43      	ldr	r3, [pc, #268]	; (80049a0 <MIDI_receive+0x440>)
 8004894:	fb83 1302 	smull	r1, r3, r3, r2
 8004898:	1159      	asrs	r1, r3, #5
 800489a:	17d3      	asrs	r3, r2, #31
 800489c:	1acb      	subs	r3, r1, r3
 800489e:	2164      	movs	r1, #100	; 0x64
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	4a3c      	ldr	r2, [pc, #240]	; (8004998 <MIDI_receive+0x438>)
 80048a8:	5cd3      	ldrb	r3, [r2, r3]
 80048aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	4b3a      	ldr	r3, [pc, #232]	; (800499c <MIDI_receive+0x43c>)
 80048b2:	709a      	strb	r2, [r3, #2]
			size = size - 2;
 80048b4:	4b36      	ldr	r3, [pc, #216]	; (8004990 <MIDI_receive+0x430>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	3b02      	subs	r3, #2
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	4b34      	ldr	r3, [pc, #208]	; (8004990 <MIDI_receive+0x430>)
 80048be:	701a      	strb	r2, [r3, #0]
			p_rd = (p_rd + 2)%BUF_SIZE;
 80048c0:	4b34      	ldr	r3, [pc, #208]	; (8004994 <MIDI_receive+0x434>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	3302      	adds	r3, #2
 80048c6:	4a36      	ldr	r2, [pc, #216]	; (80049a0 <MIDI_receive+0x440>)
 80048c8:	fb82 1203 	smull	r1, r2, r2, r3
 80048cc:	1151      	asrs	r1, r2, #5
 80048ce:	17da      	asrs	r2, r3, #31
 80048d0:	1a8a      	subs	r2, r1, r2
 80048d2:	2164      	movs	r1, #100	; 0x64
 80048d4:	fb01 f202 	mul.w	r2, r1, r2
 80048d8:	1a9a      	subs	r2, r3, r2
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	4b2d      	ldr	r3, [pc, #180]	; (8004994 <MIDI_receive+0x434>)
 80048de:	701a      	strb	r2, [r3, #0]
			return 1;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e050      	b.n	8004986 <MIDI_receive+0x426>
		}

		if (( midi_mess.type == NOTE_ON ) || ( midi_mess.type == NOTE_OFF )|| ( midi_mess.type == CONTROL_CHANGE ) || ( midi_mess.type == PITCH_BEND ))
 80048e4:	4b2d      	ldr	r3, [pc, #180]	; (800499c <MIDI_receive+0x43c>)
 80048e6:	785b      	ldrb	r3, [r3, #1]
 80048e8:	2b90      	cmp	r3, #144	; 0x90
 80048ea:	d00b      	beq.n	8004904 <MIDI_receive+0x3a4>
 80048ec:	4b2b      	ldr	r3, [pc, #172]	; (800499c <MIDI_receive+0x43c>)
 80048ee:	785b      	ldrb	r3, [r3, #1]
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d007      	beq.n	8004904 <MIDI_receive+0x3a4>
 80048f4:	4b29      	ldr	r3, [pc, #164]	; (800499c <MIDI_receive+0x43c>)
 80048f6:	785b      	ldrb	r3, [r3, #1]
 80048f8:	2bb0      	cmp	r3, #176	; 0xb0
 80048fa:	d003      	beq.n	8004904 <MIDI_receive+0x3a4>
 80048fc:	4b27      	ldr	r3, [pc, #156]	; (800499c <MIDI_receive+0x43c>)
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	2be0      	cmp	r3, #224	; 0xe0
 8004902:	d13f      	bne.n	8004984 <MIDI_receive+0x424>
		{
				// Valid Message
				midi_mess.data1 = midi_buf[(p_rd+1)%BUF_SIZE] & 0x7F;
 8004904:	4b23      	ldr	r3, [pc, #140]	; (8004994 <MIDI_receive+0x434>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	4b25      	ldr	r3, [pc, #148]	; (80049a0 <MIDI_receive+0x440>)
 800490c:	fb83 1302 	smull	r1, r3, r3, r2
 8004910:	1159      	asrs	r1, r3, #5
 8004912:	17d3      	asrs	r3, r2, #31
 8004914:	1acb      	subs	r3, r1, r3
 8004916:	2164      	movs	r1, #100	; 0x64
 8004918:	fb01 f303 	mul.w	r3, r1, r3
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <MIDI_receive+0x438>)
 8004920:	5cd3      	ldrb	r3, [r2, r3]
 8004922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004926:	b2da      	uxtb	r2, r3
 8004928:	4b1c      	ldr	r3, [pc, #112]	; (800499c <MIDI_receive+0x43c>)
 800492a:	709a      	strb	r2, [r3, #2]
				midi_mess.data2 = midi_buf[(p_rd+2)%BUF_SIZE] & 0x7F;
 800492c:	4b19      	ldr	r3, [pc, #100]	; (8004994 <MIDI_receive+0x434>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	1c9a      	adds	r2, r3, #2
 8004932:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <MIDI_receive+0x440>)
 8004934:	fb83 1302 	smull	r1, r3, r3, r2
 8004938:	1159      	asrs	r1, r3, #5
 800493a:	17d3      	asrs	r3, r2, #31
 800493c:	1acb      	subs	r3, r1, r3
 800493e:	2164      	movs	r1, #100	; 0x64
 8004940:	fb01 f303 	mul.w	r3, r1, r3
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	4a14      	ldr	r2, [pc, #80]	; (8004998 <MIDI_receive+0x438>)
 8004948:	5cd3      	ldrb	r3, [r2, r3]
 800494a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800494e:	b2da      	uxtb	r2, r3
 8004950:	4b12      	ldr	r3, [pc, #72]	; (800499c <MIDI_receive+0x43c>)
 8004952:	70da      	strb	r2, [r3, #3]

				size = size - 3;
 8004954:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <MIDI_receive+0x430>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	3b03      	subs	r3, #3
 800495a:	b2da      	uxtb	r2, r3
 800495c:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <MIDI_receive+0x430>)
 800495e:	701a      	strb	r2, [r3, #0]
				p_rd = (p_rd + 3)%BUF_SIZE;
 8004960:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <MIDI_receive+0x434>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	3303      	adds	r3, #3
 8004966:	4a0e      	ldr	r2, [pc, #56]	; (80049a0 <MIDI_receive+0x440>)
 8004968:	fb82 1203 	smull	r1, r2, r2, r3
 800496c:	1151      	asrs	r1, r2, #5
 800496e:	17da      	asrs	r2, r3, #31
 8004970:	1a8a      	subs	r2, r1, r2
 8004972:	2164      	movs	r1, #100	; 0x64
 8004974:	fb01 f202 	mul.w	r2, r1, r2
 8004978:	1a9a      	subs	r2, r3, r2
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <MIDI_receive+0x434>)
 800497e:	701a      	strb	r2, [r3, #0]
				return 1;
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <MIDI_receive+0x426>
		}
	}	// SIZE > 3
	//--------------------------------------------------------------------
	// PANIC : MSB =! 1
	//--------------------------------------------------------------------
	return 0;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	2000f20a 	.word	0x2000f20a
 8004994:	2000f209 	.word	0x2000f209
 8004998:	2000f29c 	.word	0x2000f29c
 800499c:	2000f24c 	.word	0x2000f24c
 80049a0:	51eb851f 	.word	0x51eb851f

080049a4 <MIDI_send>:
//=========================================================================

uint8_t MIDI_send(uint8_t* mess , uint8_t length)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
	uart6_write((char*)mess, (int)length);
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	4619      	mov	r1, r3
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f001 f8e3 	bl	8005b80 <uart6_write>
	return 1;
 80049ba:	2301      	movs	r3, #1
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <Codec_WriteRegister>:
//__IO uint32_t CODECTimeout = CODEC_LONG_TIMEOUT;

//=======================================================================

uint32_t Codec_WriteRegister(uint32_t RegisterAddr, uint16_t RegisterValue)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	807b      	strh	r3, [r7, #2]
	i2c1_WriteReg32Word16((W5102_ADDR_0<<1), RegisterAddr, RegisterValue);
 80049d0:	887b      	ldrh	r3, [r7, #2]
 80049d2:	461a      	mov	r2, r3
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	2034      	movs	r0, #52	; 0x34
 80049d8:	f001 f80e 	bl	80059f8 <i2c1_WriteReg32Word16>
	return 0;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <configure_codec>:

//=======================================================================
//======================================================================

void configure_codec(uint16_t fs, int select_input)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	6039      	str	r1, [r7, #0]
 80049f2:	80fb      	strh	r3, [r7, #6]

	Codec_WriteRegister(0x0000, 0x0000);   // reset codec
 80049f4:	2100      	movs	r1, #0
 80049f6:	2000      	movs	r0, #0
 80049f8:	f7ff ffe4 	bl	80049c4 <Codec_WriteRegister>
	HAL_Delay(100);                    // may or may not need delay here
 80049fc:	2064      	movs	r0, #100	; 0x64
 80049fe:	f7fc f88b 	bl	8000b18 <HAL_Delay>

	Codec_WriteRegister(0x0019, 0x0001);   // patch codec (supplied by Wolfson)
 8004a02:	2101      	movs	r1, #1
 8004a04:	2019      	movs	r0, #25
 8004a06:	f7ff ffdd 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0080, 0x0003);
 8004a0a:	2103      	movs	r1, #3
 8004a0c:	2080      	movs	r0, #128	; 0x80
 8004a0e:	f7ff ffd9 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0081, 0xE022);
 8004a12:	f24e 0122 	movw	r1, #57378	; 0xe022
 8004a16:	2081      	movs	r0, #129	; 0x81
 8004a18:	f7ff ffd4 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0410, 0x6080);
 8004a1c:	f44f 41c1 	mov.w	r1, #24704	; 0x6080
 8004a20:	f44f 6082 	mov.w	r0, #1040	; 0x410
 8004a24:	f7ff ffce 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0418, 0xa080);
 8004a28:	f24a 0180 	movw	r1, #41088	; 0xa080
 8004a2c:	f44f 6083 	mov.w	r0, #1048	; 0x418
 8004a30:	f7ff ffc8 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0420, 0xa080);
 8004a34:	f24a 0180 	movw	r1, #41088	; 0xa080
 8004a38:	f44f 6084 	mov.w	r0, #1056	; 0x420
 8004a3c:	f7ff ffc2 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0428, 0xE000);
 8004a40:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8004a44:	f44f 6085 	mov.w	r0, #1064	; 0x428
 8004a48:	f7ff ffbc 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0443, 0xDC1A);
 8004a4c:	f64d 411a 	movw	r1, #56346	; 0xdc1a
 8004a50:	f240 4043 	movw	r0, #1091	; 0x443
 8004a54:	f7ff ffb6 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x04B0, 0x0066);
 8004a58:	2166      	movs	r1, #102	; 0x66
 8004a5a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8004a5e:	f7ff ffb1 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0458, 0x000B);
 8004a62:	210b      	movs	r1, #11
 8004a64:	f44f 608b 	mov.w	r0, #1112	; 0x458
 8004a68:	f7ff ffac 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0212, 0x0000);
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	f240 2012 	movw	r0, #530	; 0x212
 8004a72:	f7ff ffa7 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0171, 0x0000);
 8004a76:	2100      	movs	r1, #0
 8004a78:	f240 1071 	movw	r0, #369	; 0x171
 8004a7c:	f7ff ffa2 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x035E, 0x000C);
 8004a80:	210c      	movs	r1, #12
 8004a82:	f240 305e 	movw	r0, #862	; 0x35e
 8004a86:	f7ff ff9d 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x02D4, 0x0000);
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	f44f 7035 	mov.w	r0, #724	; 0x2d4
 8004a90:	f7ff ff98 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0080, 0x0000);  // end of patch
 8004a94:	2100      	movs	r1, #0
 8004a96:	2080      	movs	r0, #128	; 0x80
 8004a98:	f7ff ff94 	bl	80049c4 <Codec_WriteRegister>

	HAL_Delay(20);
 8004a9c:	2014      	movs	r0, #20
 8004a9e:	f7fc f83b 	bl	8000b18 <HAL_Delay>

	Codec_WriteRegister(0x192, 0x8008);   // FLL2 12.000 MHz MCLK1 -> 24.576 MHz SYSCLK
 8004aa2:	f248 0108 	movw	r1, #32776	; 0x8008
 8004aa6:	f44f 70c9 	mov.w	r0, #402	; 0x192
 8004aaa:	f7ff ff8b 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x193, 0x0018);   // could make this part of a switch in order
 8004aae:	2118      	movs	r1, #24
 8004ab0:	f240 1093 	movw	r0, #403	; 0x193
 8004ab4:	f7ff ff86 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x194, 0x007D);   // to allow 44.1kHz-related sample rates
 8004ab8:	217d      	movs	r1, #125	; 0x7d
 8004aba:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8004abe:	f7ff ff81 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x195, 0x0008);
 8004ac2:	2108      	movs	r1, #8
 8004ac4:	f240 1095 	movw	r0, #405	; 0x195
 8004ac8:	f7ff ff7c 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x196, 0x0000);
 8004acc:	2100      	movs	r1, #0
 8004ace:	f44f 70cb 	mov.w	r0, #406	; 0x196
 8004ad2:	f7ff ff77 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x191, 0x0001);
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	f240 1091 	movw	r0, #401	; 0x191
 8004adc:	f7ff ff72 	bl	80049c4 <Codec_WriteRegister>

	HAL_Delay(20);                 // may or may not be needed
 8004ae0:	2014      	movs	r0, #20
 8004ae2:	f7fc f819 	bl	8000b18 <HAL_Delay>

	Codec_WriteRegister(0x101, 0x0245);   // clock set up as SYSCLK = 24.576 MHz, src FLL2, SYSCLK_FRAC = 0
 8004ae6:	f240 2145 	movw	r1, #581	; 0x245
 8004aea:	f240 1001 	movw	r0, #257	; 0x101
 8004aee:	f7ff ff69 	bl	80049c4 <Codec_WriteRegister>
	                                      // SYSCLK enabled
//------------------------------------------------------------------------
	switch(fs) // set sample rate 1 - currently only 48kHz-related sample rates allowed
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	2b12      	cmp	r3, #18
 8004af8:	d86a      	bhi.n	8004bd0 <configure_codec+0x1e8>
 8004afa:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <configure_codec+0x118>)
 8004afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b00:	08004b63 	.word	0x08004b63
 8004b04:	08004b8f 	.word	0x08004b8f
 8004b08:	08004bbb 	.word	0x08004bbb
 8004b0c:	08004bd1 	.word	0x08004bd1
 8004b10:	08004bd1 	.word	0x08004bd1
 8004b14:	08004bd1 	.word	0x08004bd1
 8004b18:	08004bd1 	.word	0x08004bd1
 8004b1c:	08004bd1 	.word	0x08004bd1
 8004b20:	08004bd1 	.word	0x08004bd1
 8004b24:	08004bd1 	.word	0x08004bd1
 8004b28:	08004bd1 	.word	0x08004bd1
 8004b2c:	08004bd1 	.word	0x08004bd1
 8004b30:	08004bd1 	.word	0x08004bd1
 8004b34:	08004bd1 	.word	0x08004bd1
 8004b38:	08004bd1 	.word	0x08004bd1
 8004b3c:	08004bd1 	.word	0x08004bd1
 8004b40:	08004b4d 	.word	0x08004b4d
 8004b44:	08004b79 	.word	0x08004b79
 8004b48:	08004ba5 	.word	0x08004ba5
	{
		case FS_8000_HZ:
			Codec_WriteRegister(0x102, 0x11);
 8004b4c:	2111      	movs	r1, #17
 8004b4e:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004b52:	f7ff ff37 	bl	80049c4 <Codec_WriteRegister>
			Codec_WriteRegister(0x580, 0x26);
 8004b56:	2126      	movs	r1, #38	; 0x26
 8004b58:	f44f 60b0 	mov.w	r0, #1408	; 0x580
 8004b5c:	f7ff ff32 	bl	80049c4 <Codec_WriteRegister>
		  break;
 8004b60:	e041      	b.n	8004be6 <configure_codec+0x1fe>
		case FS_12000_HZ:
			Codec_WriteRegister(0x102, 0x01);
 8004b62:	2101      	movs	r1, #1
 8004b64:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004b68:	f7ff ff2c 	bl	80049c4 <Codec_WriteRegister>
			Codec_WriteRegister(0x580, 0x27);
 8004b6c:	2127      	movs	r1, #39	; 0x27
 8004b6e:	f44f 60b0 	mov.w	r0, #1408	; 0x580
 8004b72:	f7ff ff27 	bl	80049c4 <Codec_WriteRegister>
		  break;
 8004b76:	e036      	b.n	8004be6 <configure_codec+0x1fe>
		case FS_16000_HZ:
			Codec_WriteRegister(0x102, 0x12);
 8004b78:	2112      	movs	r1, #18
 8004b7a:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004b7e:	f7ff ff21 	bl	80049c4 <Codec_WriteRegister>
			Codec_WriteRegister(0x580, 0x28);
 8004b82:	2128      	movs	r1, #40	; 0x28
 8004b84:	f44f 60b0 	mov.w	r0, #1408	; 0x580
 8004b88:	f7ff ff1c 	bl	80049c4 <Codec_WriteRegister>
		  break;
 8004b8c:	e02b      	b.n	8004be6 <configure_codec+0x1fe>
		case FS_24000_HZ:
			Codec_WriteRegister(0x102, 0x02);
 8004b8e:	2102      	movs	r1, #2
 8004b90:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004b94:	f7ff ff16 	bl	80049c4 <Codec_WriteRegister>
			Codec_WriteRegister(0x580, 0x29);
 8004b98:	2129      	movs	r1, #41	; 0x29
 8004b9a:	f44f 60b0 	mov.w	r0, #1408	; 0x580
 8004b9e:	f7ff ff11 	bl	80049c4 <Codec_WriteRegister>
		  break;
 8004ba2:	e020      	b.n	8004be6 <configure_codec+0x1fe>
		case FS_32000_HZ:
			Codec_WriteRegister(0x102, 0x13);
 8004ba4:	2113      	movs	r1, #19
 8004ba6:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004baa:	f7ff ff0b 	bl	80049c4 <Codec_WriteRegister>
			Codec_WriteRegister(0x580, 0x2A);
 8004bae:	212a      	movs	r1, #42	; 0x2a
 8004bb0:	f44f 60b0 	mov.w	r0, #1408	; 0x580
 8004bb4:	f7ff ff06 	bl	80049c4 <Codec_WriteRegister>
		  break;
 8004bb8:	e015      	b.n	8004be6 <configure_codec+0x1fe>
		case FS_48000_HZ:
			Codec_WriteRegister(0x102, 0x03);
 8004bba:	2103      	movs	r1, #3
 8004bbc:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004bc0:	f7ff ff00 	bl	80049c4 <Codec_WriteRegister>
			Codec_WriteRegister(0x580, 0x2B);
 8004bc4:	212b      	movs	r1, #43	; 0x2b
 8004bc6:	f44f 60b0 	mov.w	r0, #1408	; 0x580
 8004bca:	f7ff fefb 	bl	80049c4 <Codec_WriteRegister>
		  break;
 8004bce:	e00a      	b.n	8004be6 <configure_codec+0x1fe>
		default:
			Codec_WriteRegister(0x102, 0x11); // default is 8kHz sample rate
 8004bd0:	2111      	movs	r1, #17
 8004bd2:	f44f 7081 	mov.w	r0, #258	; 0x102
 8004bd6:	f7ff fef5 	bl	80049c4 <Codec_WriteRegister>
			Codec_WriteRegister(0x580, 0x26);
 8004bda:	2126      	movs	r1, #38	; 0x26
 8004bdc:	f44f 60b0 	mov.w	r0, #1408	; 0x580
 8004be0:	f7ff fef0 	bl	80049c4 <Codec_WriteRegister>
		  break;
 8004be4:	bf00      	nop
	}
	//------------------------------------------------------------------------
	Codec_WriteRegister(0x458, 0x0009);   // output noise gate enabled, threshold -84dB (important??)
 8004be6:	2109      	movs	r1, #9
 8004be8:	f44f 608b 	mov.w	r0, #1112	; 0x458
 8004bec:	f7ff feea 	bl	80049c4 <Codec_WriteRegister>

	Codec_WriteRegister(0x200, 0x0001);   // not used prior to 20 March but I think necessary for CP2/LDO2 - analog inputs
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004bf6:	f7ff fee5 	bl	80049c4 <Codec_WriteRegister>
                                        // Wolfson example write 0x0007 but bit 0 is CP2_ENA
	Codec_WriteRegister(0x210, 0x00D5);   // LDO1 control 0x00D5 -> LDO1 enabled, normal, 1V2
 8004bfa:	21d5      	movs	r1, #213	; 0xd5
 8004bfc:	f44f 7004 	mov.w	r0, #528	; 0x210
 8004c00:	f7ff fee0 	bl	80049c4 <Codec_WriteRegister>

	Codec_WriteRegister(0x584, 0x0002);   // AIF3 I2S format
 8004c04:	2102      	movs	r1, #2
 8004c06:	f240 5084 	movw	r0, #1412	; 0x584
 8004c0a:	f7ff fedb 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x582, 0x0005);   // AIF3 LRCLK master - this takes LRC high, reliably I hope...
 8004c0e:	2105      	movs	r1, #5
 8004c10:	f240 5082 	movw	r0, #1410	; 0x582
 8004c14:	f7ff fed6 	bl	80049c4 <Codec_WriteRegister>
	HAL_Delay(20);
 8004c18:	2014      	movs	r0, #20
 8004c1a:	f7fb ff7d 	bl	8000b18 <HAL_Delay>
	I2S_Cmd(SPI2, ENABLE); //i2s2_Enable();// __HAL_I2S_ENABLE(&);// !!!!!!!!!!!!!!!!!!!!!!!!!!//I2S_Cmd(SPI2, ENABLE);                // ...because it's necessary for correct startup of STM32F4
 8004c1e:	2101      	movs	r1, #1
 8004c20:	48ab      	ldr	r0, [pc, #684]	; (8004ed0 <configure_codec+0x4e8>)
 8004c22:	f7ff f93b 	bl	8003e9c <I2S_Cmd>
	I2S_Cmd(I2S2ext, ENABLE); //!!!!!!!!!!!!!!!!!!!!!!!!!!!!//I2S_Cmd(I2S2ext, ENABLE);             // I2S interface (STM32F4 I2S module MUST be enabled while
 8004c26:	2101      	movs	r1, #1
 8004c28:	48aa      	ldr	r0, [pc, #680]	; (8004ed4 <configure_codec+0x4ec>)
 8004c2a:	f7ff f937 	bl	8003e9c <I2S_Cmd>
	HAL_Delay(20);                    // LRC is high - as per October 2013 errata)
 8004c2e:	2014      	movs	r0, #20
 8004c30:	f7fb ff72 	bl	8000b18 <HAL_Delay>

	Codec_WriteRegister(0x587, 0x1010);   // AIF3 TX WL and SLOT_LEN both 16-bit
 8004c34:	f241 0110 	movw	r1, #4112	; 0x1010
 8004c38:	f240 5087 	movw	r0, #1415	; 0x587
 8004c3c:	f7ff fec2 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x588, 0x1010);   // AIF3 RX WL and SLOT_LEN both 16-bit
 8004c40:	f241 0110 	movw	r1, #4112	; 0x1010
 8004c44:	f44f 60b1 	mov.w	r0, #1416	; 0x588
 8004c48:	f7ff febc 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x59A, 0x0003);   // enable AIF3 RX channels (L and R)
 8004c4c:	2103      	movs	r1, #3
 8004c4e:	f240 509a 	movw	r0, #1434	; 0x59a
 8004c52:	f7ff feb7 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x599, 0x0003);   // enable AIF3 TX channels (L and R)
 8004c56:	2103      	movs	r1, #3
 8004c58:	f240 5099 	movw	r0, #1433	; 0x599
 8004c5c:	f7ff feb2 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x585, 0x0020);   // AIF3 32 BCLK cycles per LRC TX frame
 8004c60:	2120      	movs	r1, #32
 8004c62:	f240 5085 	movw	r0, #1413	; 0x585
 8004c66:	f7ff fead 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x586, 0x0020);   // AIF3 32 BCLK cycles per LRC RX frame
 8004c6a:	2120      	movs	r1, #32
 8004c6c:	f240 5086 	movw	r0, #1414	; 0x586
 8004c70:	f7ff fea8 	bl	80049c4 <Codec_WriteRegister>

                                      // LINE OUT and HP OUT enabled in parallel
	Codec_WriteRegister(0x690, 0x0030); // OUT2L (LINE OUT) mixer input is AIF3 RX1 (from I2S) 30
 8004c74:	2130      	movs	r1, #48	; 0x30
 8004c76:	f44f 60d2 	mov.w	r0, #1680	; 0x690
 8004c7a:	f7ff fea3 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x691, 0x0080); // associated volume is 0dB
 8004c7e:	2180      	movs	r1, #128	; 0x80
 8004c80:	f240 6091 	movw	r0, #1681	; 0x691
 8004c84:	f7ff fe9e 	bl	80049c4 <Codec_WriteRegister>

	Codec_WriteRegister(0x698, 0x0031); // OUT2R (LINE OUT) mixer input is AIF3 RX2 (from I2S) 31
 8004c88:	2131      	movs	r1, #49	; 0x31
 8004c8a:	f44f 60d3 	mov.w	r0, #1688	; 0x698
 8004c8e:	f7ff fe99 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x699, 0x0080); // associated volume is 0dB
 8004c92:	2180      	movs	r1, #128	; 0x80
 8004c94:	f240 6099 	movw	r0, #1689	; 0x699
 8004c98:	f7ff fe94 	bl	80049c4 <Codec_WriteRegister>

 	Codec_WriteRegister(0x680, 0x0030); // OUT1L (HP OUT) mixer input is AIF3 RX1 (from I2S)
 8004c9c:	2130      	movs	r1, #48	; 0x30
 8004c9e:	f44f 60d0 	mov.w	r0, #1664	; 0x680
 8004ca2:	f7ff fe8f 	bl	80049c4 <Codec_WriteRegister>
 	Codec_WriteRegister(0x681, 0x0080); // associated volume is 0dB
 8004ca6:	2180      	movs	r1, #128	; 0x80
 8004ca8:	f240 6081 	movw	r0, #1665	; 0x681
 8004cac:	f7ff fe8a 	bl	80049c4 <Codec_WriteRegister>

 	Codec_WriteRegister(0x688, 0x0031); // OUT1R (HP OUT) mixer input is AIF3 RX2 (from I2S)
 8004cb0:	2131      	movs	r1, #49	; 0x31
 8004cb2:	f44f 60d1 	mov.w	r0, #1672	; 0x688
 8004cb6:	f7ff fe85 	bl	80049c4 <Codec_WriteRegister>
 	Codec_WriteRegister(0x689, 0x0080); // associated volume is 0dB
 8004cba:	2180      	movs	r1, #128	; 0x80
 8004cbc:	f240 6089 	movw	r0, #1673	; 0x689
 8004cc0:	f7ff fe80 	bl	80049c4 <Codec_WriteRegister>

// route LHPFs to AIF3TX
 	Codec_WriteRegister(0x0780, 0x0060); // AIF3TX mixer from LHPF1 60
 8004cc4:	2160      	movs	r1, #96	; 0x60
 8004cc6:	f44f 60f0 	mov.w	r0, #1920	; 0x780
 8004cca:	f7ff fe7b 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0788, 0x0061); // AIF3TX mixer from LHPF2 61
 8004cce:	2161      	movs	r1, #97	; 0x61
 8004cd0:	f44f 60f1 	mov.w	r0, #1928	; 0x788
 8004cd4:	f7ff fe76 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0781, 0x0080); // AIF3TX mixer gain 0dB
 8004cd8:	2180      	movs	r1, #128	; 0x80
 8004cda:	f240 7081 	movw	r0, #1921	; 0x781
 8004cde:	f7ff fe71 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0789, 0x0080); // AIF3TX mixer gain 0dB
 8004ce2:	2180      	movs	r1, #128	; 0x80
 8004ce4:	f240 7089 	movw	r0, #1929	; 0x789
 8004ce8:	f7ff fe6c 	bl	80049c4 <Codec_WriteRegister>

	Codec_WriteRegister(0x0EC0, 0x0003); // LHPF1 HPF enabled
 8004cec:	2103      	movs	r1, #3
 8004cee:	f44f 606c 	mov.w	r0, #3776	; 0xec0
 8004cf2:	f7ff fe67 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0EC1, 0xF09e); // LHPF1 cutoff frequency in Hz depends on fs
 8004cf6:	f24f 019e 	movw	r1, #61598	; 0xf09e
 8004cfa:	f640 60c1 	movw	r0, #3777	; 0xec1
 8004cfe:	f7ff fe61 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0EC4, 0x0003); // LHPF2 HPF enabled
 8004d02:	2103      	movs	r1, #3
 8004d04:	f640 60c4 	movw	r0, #3780	; 0xec4
 8004d08:	f7ff fe5c 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0EC5, 0xF09E); // LHPF2 cutoff frequency in Hz depends on fs
 8004d0c:	f24f 019e 	movw	r1, #61598	; 0xf09e
 8004d10:	f640 60c5 	movw	r0, #3781	; 0xec5
 8004d14:	f7ff fe56 	bl	80049c4 <Codec_WriteRegister>

	Codec_WriteRegister(0x0901, 0x0080); // LHPF1 mixer source 1 gain 0dB
 8004d18:	2180      	movs	r1, #128	; 0x80
 8004d1a:	f640 1001 	movw	r0, #2305	; 0x901
 8004d1e:	f7ff fe51 	bl	80049c4 <Codec_WriteRegister>
	Codec_WriteRegister(0x0909, 0x0080); // LHPF2 mixer source 1 gain 0dB
 8004d22:	2180      	movs	r1, #128	; 0x80
 8004d24:	f640 1009 	movw	r0, #2313	; 0x909
 8004d28:	f7ff fe4c 	bl	80049c4 <Codec_WriteRegister>
	//------------------------------------------------------------------------
switch(select_input)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d030      	beq.n	8004d94 <configure_codec+0x3ac>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	f300 8082 	bgt.w	8004e3e <configure_codec+0x456>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d051      	beq.n	8004de4 <configure_codec+0x3fc>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d17b      	bne.n	8004e3e <configure_codec+0x456>
{
	case WM5102_LINE_IN:
		Codec_WriteRegister(0x0900, 0x0014); // LHPF1 mixer from IN3 (LINE IN)
 8004d46:	2114      	movs	r1, #20
 8004d48:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004d4c:	f7ff fe3a 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0908, 0x0015); // LHPF2 mixer from IN3
 8004d50:	2115      	movs	r1, #21
 8004d52:	f640 1008 	movw	r0, #2312	; 0x908
 8004d56:	f7ff fe35 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0300, 0x0030); // enable IN3L and IN3R 0030 LINE IN
 8004d5a:	2130      	movs	r1, #48	; 0x30
 8004d5c:	f44f 7040 	mov.w	r0, #768	; 0x300
 8004d60:	f7ff fe30 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0320, 0x2290); // IN3L PGA gain +8.0dB LINE IN (potential divider comp.)
 8004d64:	f242 2190 	movw	r1, #8848	; 0x2290
 8004d68:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004d6c:	f7ff fe2a 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0321, 0x0280); // IN3L ADC volume 0dB LINE IN
 8004d70:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004d74:	f240 3021 	movw	r0, #801	; 0x321
 8004d78:	f7ff fe24 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0324, 0x0090); // IN3R PGA gain +8.0dB LINE IN (potential divider comp.)
 8004d7c:	2190      	movs	r1, #144	; 0x90
 8004d7e:	f44f 7049 	mov.w	r0, #804	; 0x324
 8004d82:	f7ff fe1f 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0325, 0x0280); // IN3R ADC volume 0dB LINE IN
 8004d86:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004d8a:	f240 3025 	movw	r0, #805	; 0x325
 8004d8e:	f7ff fe19 	bl	80049c4 <Codec_WriteRegister>
		break;
 8004d92:	e07b      	b.n	8004e8c <configure_codec+0x4a4>
	case WM5102_DMIC_IN:
		Codec_WriteRegister(0x0900, 0x0012); // LHPF1 mixer from IN2 (DMIC IN)
 8004d94:	2112      	movs	r1, #18
 8004d96:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004d9a:	f7ff fe13 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0908, 0x0013); // LHPF2 mixer from IN2
 8004d9e:	2113      	movs	r1, #19
 8004da0:	f640 1008 	movw	r0, #2312	; 0x908
 8004da4:	f7ff fe0e 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0300, 0x000C); // enable IN2L and IN2R 000C DMIC IN
 8004da8:	210c      	movs	r1, #12
 8004daa:	f44f 7040 	mov.w	r0, #768	; 0x300
 8004dae:	f7ff fe09 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0318, 0x3480); // IN2 DMIC IN IN2L PGA vol 0dB
 8004db2:	f44f 5152 	mov.w	r1, #13440	; 0x3480
 8004db6:	f44f 7046 	mov.w	r0, #792	; 0x318
 8004dba:	f7ff fe03 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x031D, 0x0280); // IN2R ADC volume 0dB DMIC IN
 8004dbe:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004dc2:	f240 301d 	movw	r0, #797	; 0x31d
 8004dc6:	f7ff fdfd 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0319, 0x0280); // IN2L ADC volume 0dB DMIC IN
 8004dca:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004dce:	f240 3019 	movw	r0, #793	; 0x319
 8004dd2:	f7ff fdf7 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0219, 0x01A7); // MICBIAS2 enable DMIC IN
 8004dd6:	f240 11a7 	movw	r1, #423	; 0x1a7
 8004dda:	f240 2019 	movw	r0, #537	; 0x219
 8004dde:	f7ff fdf1 	bl	80049c4 <Codec_WriteRegister>
		break;
 8004de2:	e053      	b.n	8004e8c <configure_codec+0x4a4>
	case WM5102_MIC_IN:
		Codec_WriteRegister(0x0900, 0x0010); // LHPF1 mixer from IN1 (MIC IN)
 8004de4:	2110      	movs	r1, #16
 8004de6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004dea:	f7ff fdeb 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0908, 0x0011); // LHPF2 mixer from IN1
 8004dee:	2111      	movs	r1, #17
 8004df0:	f640 1008 	movw	r0, #2312	; 0x908
 8004df4:	f7ff fde6 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0300, 0x0003); // enable IN1L and IN1R 0003 MIC IN
 8004df8:	2103      	movs	r1, #3
 8004dfa:	f44f 7040 	mov.w	r0, #768	; 0x300
 8004dfe:	f7ff fde1 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0310, 0x2A80); // IN1L PGA vol 0dB MIC IN
 8004e02:	f44f 512a 	mov.w	r1, #10880	; 0x2a80
 8004e06:	f44f 7044 	mov.w	r0, #784	; 0x310
 8004e0a:	f7ff fddb 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0314, 0x0080); // IN1R PGA volume 0dB MIC IN
 8004e0e:	2180      	movs	r1, #128	; 0x80
 8004e10:	f44f 7045 	mov.w	r0, #788	; 0x314
 8004e14:	f7ff fdd6 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0311, 0x0280); // IN1L ADC volume 0dB MIC IN
 8004e18:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004e1c:	f240 3011 	movw	r0, #785	; 0x311
 8004e20:	f7ff fdd0 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0315, 0x0280); // IN1R ADC volume 0dB DMIC IN
 8004e24:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004e28:	f240 3015 	movw	r0, #789	; 0x315
 8004e2c:	f7ff fdca 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x0218, 0x01A7); // MICBIAS1 enable MIC IN
 8004e30:	f240 11a7 	movw	r1, #423	; 0x1a7
 8004e34:	f44f 7006 	mov.w	r0, #536	; 0x218
 8004e38:	f7ff fdc4 	bl	80049c4 <Codec_WriteRegister>
		break;
 8004e3c:	e026      	b.n	8004e8c <configure_codec+0x4a4>
	default:
		Codec_WriteRegister(0x0900, 0x0014); // LHPF1 mixer from IN3 (LINE IN)
 8004e3e:	2114      	movs	r1, #20
 8004e40:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004e44:	f7ff fdbe 	bl	80049c4 <Codec_WriteRegister>
	  	Codec_WriteRegister(0x0908, 0x0015); // LHPF2 mixer from IN3
 8004e48:	2115      	movs	r1, #21
 8004e4a:	f640 1008 	movw	r0, #2312	; 0x908
 8004e4e:	f7ff fdb9 	bl	80049c4 <Codec_WriteRegister>
	  	Codec_WriteRegister(0x0300, 0x0030); // enable IN3L and IN3R 0030 LINE IN
 8004e52:	2130      	movs	r1, #48	; 0x30
 8004e54:	f44f 7040 	mov.w	r0, #768	; 0x300
 8004e58:	f7ff fdb4 	bl	80049c4 <Codec_WriteRegister>
	  	Codec_WriteRegister(0x0320, 0x2290); // IN3L PGA gain +8.0dB LINE IN (potential divider comp.)
 8004e5c:	f242 2190 	movw	r1, #8848	; 0x2290
 8004e60:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004e64:	f7ff fdae 	bl	80049c4 <Codec_WriteRegister>
	  	Codec_WriteRegister(0x0321, 0x0280); // IN3L ADC volume 0dB LINE IN
 8004e68:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004e6c:	f240 3021 	movw	r0, #801	; 0x321
 8004e70:	f7ff fda8 	bl	80049c4 <Codec_WriteRegister>
	  	Codec_WriteRegister(0x0324, 0x0090); // IN3R PGA gain +8.0dB LINE IN (potential divider comp.)
 8004e74:	2190      	movs	r1, #144	; 0x90
 8004e76:	f44f 7049 	mov.w	r0, #804	; 0x324
 8004e7a:	f7ff fda3 	bl	80049c4 <Codec_WriteRegister>
	  	Codec_WriteRegister(0x0325, 0x0280); // IN3R ADC volume 0dB LINE IN
 8004e7e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004e82:	f240 3025 	movw	r0, #805	; 0x325
 8004e86:	f7ff fd9d 	bl	80049c4 <Codec_WriteRegister>
	  	break;
 8004e8a:	bf00      	nop
}

		Codec_WriteRegister(0x419, 0x0280); // DAC 2 volume L 0dB (LINE OUT)
 8004e8c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004e90:	f240 4019 	movw	r0, #1049	; 0x419
 8004e94:	f7ff fd96 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x41D, 0x0280); // DAC 2 volume R 0dB (LINE OUT)
 8004e98:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004e9c:	f240 401d 	movw	r0, #1053	; 0x41d
 8004ea0:	f7ff fd90 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x411, 0x0280); // DAC 1 volume L 0dB (HP OUT)
 8004ea4:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004ea8:	f240 4011 	movw	r0, #1041	; 0x411
 8004eac:	f7ff fd8a 	bl	80049c4 <Codec_WriteRegister>
		Codec_WriteRegister(0x415, 0x0280); // DAC 1 volume R 0dB (HP OUT)
 8004eb0:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004eb4:	f240 4015 	movw	r0, #1045	; 0x415
 8004eb8:	f7ff fd84 	bl	80049c4 <Codec_WriteRegister>

		Codec_WriteRegister(0x400, 0x000F); // enable outputs OUT2L, OUT2R, OUT1L, OUT1R
 8004ebc:	210f      	movs	r1, #15
 8004ebe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004ec2:	f7ff fd7f 	bl	80049c4 <Codec_WriteRegister>

}
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40003800 	.word	0x40003800
 8004ed4:	40003400 	.word	0x40003400

08004ed8 <stm32_wm5102_init>:


void stm32_wm5102_init(uint16_t fs, int select_input, int io_method)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	81fb      	strh	r3, [r7, #14]
	//GPIO_SetBits(GPIOC, GPIO_Pin_5); // pi board reset high

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2120      	movs	r1, #32
 8004eea:	4869      	ldr	r0, [pc, #420]	; (8005090 <stm32_wm5102_init+0x1b8>)
 8004eec:	f7fc f906 	bl	80010fc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8004ef0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ef4:	f7fb fe10 	bl	8000b18 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8004ef8:	2201      	movs	r2, #1
 8004efa:	2120      	movs	r1, #32
 8004efc:	4864      	ldr	r0, [pc, #400]	; (8005090 <stm32_wm5102_init+0x1b8>)
 8004efe:	f7fc f8fd 	bl	80010fc <HAL_GPIO_WritePin>

	configure_codec(fs, select_input);
 8004f02:	89fb      	ldrh	r3, [r7, #14]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff fd6e 	bl	80049e8 <configure_codec>



//------------------------------------------------------
switch(io_method)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <stm32_wm5102_init+0x42>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d00e      	beq.n	8004f36 <stm32_wm5102_init+0x5e>
		DMA_Cmd(DMA1_Stream4,ENABLE);



			break;
default:	break;
 8004f18:	e0b5      	b.n	8005086 <stm32_wm5102_init+0x1ae>
	SPI_I2S_ClearFlag(SPI2, I2S_FLAG_CHSIDE);
 8004f1a:	2104      	movs	r1, #4
 8004f1c:	485d      	ldr	r0, [pc, #372]	; (8005094 <stm32_wm5102_init+0x1bc>)
 8004f1e:	f7ff f8a8 	bl	8004072 <SPI_I2S_ClearFlag>
	SPI_I2S_ClearFlag(I2S2ext, I2S_FLAG_CHSIDE);
 8004f22:	2104      	movs	r1, #4
 8004f24:	485c      	ldr	r0, [pc, #368]	; (8005098 <stm32_wm5102_init+0x1c0>)
 8004f26:	f7ff f8a4 	bl	8004072 <SPI_I2S_ClearFlag>
	SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_RXNE, ENABLE);
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	2160      	movs	r1, #96	; 0x60
 8004f2e:	4859      	ldr	r0, [pc, #356]	; (8005094 <stm32_wm5102_init+0x1bc>)
 8004f30:	f7ff f858 	bl	8003fe4 <SPI_I2S_ITConfig>
			break;
 8004f34:	e0a7      	b.n	8005086 <stm32_wm5102_init+0x1ae>
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8004f36:	4b59      	ldr	r3, [pc, #356]	; (800509c <stm32_wm5102_init+0x1c4>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	4a58      	ldr	r2, [pc, #352]	; (800509c <stm32_wm5102_init+0x1c4>)
 8004f3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f40:	6313      	str	r3, [r2, #48]	; 0x30
		DMA_Cmd(DMA1_Stream3,DISABLE);
 8004f42:	2100      	movs	r1, #0
 8004f44:	4856      	ldr	r0, [pc, #344]	; (80050a0 <stm32_wm5102_init+0x1c8>)
 8004f46:	f7fe fe53 	bl	8003bf0 <DMA_Cmd>
		DMA_DeInit(DMA1_Stream3);
 8004f4a:	4855      	ldr	r0, [pc, #340]	; (80050a0 <stm32_wm5102_init+0x1c8>)
 8004f4c:	f7fe fd24 	bl	8003998 <DMA_DeInit>
		DMA_InitStructure.DMA_Channel = DMA_Channel_0;                           // correct channel
 8004f50:	4b54      	ldr	r3, [pc, #336]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
		DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;                   // apparently we don't need FIFO ?
 8004f56:	4b53      	ldr	r3, [pc, #332]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	62da      	str	r2, [r3, #44]	; 0x2c
		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;                  // yes
 8004f5c:	4b51      	ldr	r3, [pc, #324]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	60da      	str	r2, [r3, #12]
		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;      // we need 16-bit
 8004f62:	4b50      	ldr	r3, [pc, #320]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004f64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f68:	621a      	str	r2, [r3, #32]
		DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;                          // yes (although forced by double-buffer)
 8004f6a:	4b4e      	ldr	r3, [pc, #312]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f70:	625a      	str	r2, [r3, #36]	; 0x24
		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;         // no incr on I2S address
 8004f72:	4b4c      	ldr	r3, [pc, #304]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	615a      	str	r2, [r3, #20]
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;                  // yes
 8004f78:	4b4a      	ldr	r3, [pc, #296]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f7e:	619a      	str	r2, [r3, #24]
		DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(SPI2_BASE + 0x0C);        // ck address of I2S2
 8004f80:	4b48      	ldr	r3, [pc, #288]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004f82:	4a49      	ldr	r2, [pc, #292]	; (80050a8 <stm32_wm5102_init+0x1d0>)
 8004f84:	605a      	str	r2, [r3, #4]
		DMA_InitStructure.DMA_Priority = DMA_Priority_High;                      // yes
 8004f86:	4b47      	ldr	r3, [pc, #284]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004f88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f8c:	629a      	str	r2, [r3, #40]	; 0x28
		DMA_InitStructure.DMA_BufferSize = BUFSIZE;                              // needs to be 2x no. of sample instants
 8004f8e:	4b45      	ldr	r3, [pc, #276]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004f90:	2264      	movs	r2, #100	; 0x64
 8004f92:	611a      	str	r2, [r3, #16]
		DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;        // don't want burst
 8004f94:	4b43      	ldr	r3, [pc, #268]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
		DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;        // don't want burst
 8004f9a:	4b42      	ldr	r3, [pc, #264]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	635a      	str	r2, [r3, #52]	; 0x34
		DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;            // yes?
 8004fa0:	4b40      	ldr	r3, [pc, #256]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004fa2:	2203      	movs	r2, #3
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30
		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord; // should be 16-bit?
 8004fa6:	4b3f      	ldr	r3, [pc, #252]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fac:	61da      	str	r2, [r3, #28]
		DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) pingIN;            // do we need type casting?
 8004fae:	4a3f      	ldr	r2, [pc, #252]	; (80050ac <stm32_wm5102_init+0x1d4>)
 8004fb0:	4b3c      	ldr	r3, [pc, #240]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004fb2:	609a      	str	r2, [r3, #8]
		DMA_Init(DMA1_Stream3,&DMA_InitStructure);
 8004fb4:	493b      	ldr	r1, [pc, #236]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004fb6:	483a      	ldr	r0, [pc, #232]	; (80050a0 <stm32_wm5102_init+0x1c8>)
 8004fb8:	f7fe fdc2 	bl	8003b40 <DMA_Init>
		DMA_DoubleBufferModeConfig(DMA1_Stream3, (uint32_t) pongIN, DMA_Memory_0);
 8004fbc:	4b3c      	ldr	r3, [pc, #240]	; (80050b0 <stm32_wm5102_init+0x1d8>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4837      	ldr	r0, [pc, #220]	; (80050a0 <stm32_wm5102_init+0x1c8>)
 8004fc4:	f7fe fe30 	bl	8003c28 <DMA_DoubleBufferModeConfig>
		DMA_DoubleBufferModeCmd(DMA1_Stream3, ENABLE);
 8004fc8:	2101      	movs	r1, #1
 8004fca:	4835      	ldr	r0, [pc, #212]	; (80050a0 <stm32_wm5102_init+0x1c8>)
 8004fcc:	f7fe fe4b 	bl	8003c66 <DMA_DoubleBufferModeCmd>
		DMA_InitStructure.DMA_Channel = DMA_Channel_2;                           // correct channel
 8004fd0:	4b34      	ldr	r3, [pc, #208]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004fd2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004fd6:	601a      	str	r2, [r3, #0]
		DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;                   // apparently we don't need FIFO ?
 8004fd8:	4b32      	ldr	r3, [pc, #200]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	62da      	str	r2, [r3, #44]	; 0x2c
		DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;                  // yes
 8004fde:	4b31      	ldr	r3, [pc, #196]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004fe0:	2240      	movs	r2, #64	; 0x40
 8004fe2:	60da      	str	r2, [r3, #12]
		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;      // we need 16-bit
 8004fe4:	4b2f      	ldr	r3, [pc, #188]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fea:	621a      	str	r2, [r3, #32]
		DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;                          // yes (although forced by double-buffer)
 8004fec:	4b2d      	ldr	r3, [pc, #180]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ff2:	625a      	str	r2, [r3, #36]	; 0x24
		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;         // no incr on I2S address
 8004ff4:	4b2b      	ldr	r3, [pc, #172]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	615a      	str	r2, [r3, #20]
		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;                  // yes
 8004ffa:	4b2a      	ldr	r3, [pc, #168]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8004ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005000:	619a      	str	r2, [r3, #24]
		DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)(I2S2ext_BASE + 0x0C);        // check address of I2S2_ext
 8005002:	4b28      	ldr	r3, [pc, #160]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8005004:	4a2b      	ldr	r2, [pc, #172]	; (80050b4 <stm32_wm5102_init+0x1dc>)
 8005006:	605a      	str	r2, [r3, #4]
		DMA_InitStructure.DMA_Priority = DMA_Priority_High;                      // yes
 8005008:	4b26      	ldr	r3, [pc, #152]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 800500a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800500e:	629a      	str	r2, [r3, #40]	; 0x28
		DMA_InitStructure.DMA_BufferSize = BUFSIZE;                              // needs to be 2x no. of sample instants
 8005010:	4b24      	ldr	r3, [pc, #144]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8005012:	2264      	movs	r2, #100	; 0x64
 8005014:	611a      	str	r2, [r3, #16]
		DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;        // don't want burst
 8005016:	4b23      	ldr	r3, [pc, #140]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8005018:	2200      	movs	r2, #0
 800501a:	639a      	str	r2, [r3, #56]	; 0x38
		DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;            // yes?
 800501c:	4b21      	ldr	r3, [pc, #132]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 800501e:	2203      	movs	r2, #3
 8005020:	631a      	str	r2, [r3, #48]	; 0x30
		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord; // should be 16-bit?
 8005022:	4b20      	ldr	r3, [pc, #128]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8005024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005028:	61da      	str	r2, [r3, #28]
		DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) pingOUT;            // do we need type casting?
 800502a:	4a23      	ldr	r2, [pc, #140]	; (80050b8 <stm32_wm5102_init+0x1e0>)
 800502c:	4b1d      	ldr	r3, [pc, #116]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 800502e:	609a      	str	r2, [r3, #8]
		DMA_Init(DMA1_Stream4,&DMA_InitStructure);
 8005030:	491c      	ldr	r1, [pc, #112]	; (80050a4 <stm32_wm5102_init+0x1cc>)
 8005032:	4822      	ldr	r0, [pc, #136]	; (80050bc <stm32_wm5102_init+0x1e4>)
 8005034:	f7fe fd84 	bl	8003b40 <DMA_Init>
		DMA_DoubleBufferModeConfig(DMA1_Stream4, (uint32_t) pongOUT, DMA_Memory_0);
 8005038:	4b21      	ldr	r3, [pc, #132]	; (80050c0 <stm32_wm5102_init+0x1e8>)
 800503a:	2200      	movs	r2, #0
 800503c:	4619      	mov	r1, r3
 800503e:	481f      	ldr	r0, [pc, #124]	; (80050bc <stm32_wm5102_init+0x1e4>)
 8005040:	f7fe fdf2 	bl	8003c28 <DMA_DoubleBufferModeConfig>
		DMA_DoubleBufferModeCmd(DMA1_Stream4, ENABLE);
 8005044:	2101      	movs	r1, #1
 8005046:	481d      	ldr	r0, [pc, #116]	; (80050bc <stm32_wm5102_init+0x1e4>)
 8005048:	f7fe fe0d 	bl	8003c66 <DMA_DoubleBufferModeCmd>
		DMA_ITConfig(DMA1_Stream3, DMA_IT_TC, ENABLE);
 800504c:	2201      	movs	r2, #1
 800504e:	2110      	movs	r1, #16
 8005050:	4813      	ldr	r0, [pc, #76]	; (80050a0 <stm32_wm5102_init+0x1c8>)
 8005052:	f7fe fe24 	bl	8003c9e <DMA_ITConfig>
		DMA_ITConfig(DMA1_Stream4, DMA_IT_TC, ENABLE);
 8005056:	2201      	movs	r2, #1
 8005058:	2110      	movs	r1, #16
 800505a:	4818      	ldr	r0, [pc, #96]	; (80050bc <stm32_wm5102_init+0x1e4>)
 800505c:	f7fe fe1f 	bl	8003c9e <DMA_ITConfig>
		SPI_I2S_DMACmd(I2Sx, SPI_I2S_DMAReq_Rx, ENABLE);
 8005060:	2201      	movs	r2, #1
 8005062:	2101      	movs	r1, #1
 8005064:	480b      	ldr	r0, [pc, #44]	; (8005094 <stm32_wm5102_init+0x1bc>)
 8005066:	f7fe ff9d 	bl	8003fa4 <SPI_I2S_DMACmd>
		DMA_Cmd(DMA1_Stream3,ENABLE);
 800506a:	2101      	movs	r1, #1
 800506c:	480c      	ldr	r0, [pc, #48]	; (80050a0 <stm32_wm5102_init+0x1c8>)
 800506e:	f7fe fdbf 	bl	8003bf0 <DMA_Cmd>
		SPI_I2S_DMACmd(I2Sxext, SPI_I2S_DMAReq_Tx, ENABLE);
 8005072:	2201      	movs	r2, #1
 8005074:	2102      	movs	r1, #2
 8005076:	4808      	ldr	r0, [pc, #32]	; (8005098 <stm32_wm5102_init+0x1c0>)
 8005078:	f7fe ff94 	bl	8003fa4 <SPI_I2S_DMACmd>
		DMA_Cmd(DMA1_Stream4,ENABLE);
 800507c:	2101      	movs	r1, #1
 800507e:	480f      	ldr	r0, [pc, #60]	; (80050bc <stm32_wm5102_init+0x1e4>)
 8005080:	f7fe fdb6 	bl	8003bf0 <DMA_Cmd>
			break;
 8005084:	bf00      	nop
}



}
 8005086:	bf00      	nop
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40020800 	.word	0x40020800
 8005094:	40003800 	.word	0x40003800
 8005098:	40003400 	.word	0x40003400
 800509c:	40023800 	.word	0x40023800
 80050a0:	40026058 	.word	0x40026058
 80050a4:	2000f688 	.word	0x2000f688
 80050a8:	4000380c 	.word	0x4000380c
 80050ac:	2000f4f8 	.word	0x2000f4f8
 80050b0:	2000f430 	.word	0x2000f430
 80050b4:	4000340c 	.word	0x4000340c
 80050b8:	2000f5c0 	.word	0x2000f5c0
 80050bc:	40026070 	.word	0x40026070
 80050c0:	2000f368 	.word	0x2000f368

080050c4 <HAL_MspInit>:
#define SPI2_IRQ_PRIO		5
#define TIMER4_IRQ_PRIO		3
#define TIMER5_IRQ_PRIO		10
//=================================================================
void HAL_MspInit(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0

		HAL_MspDeInit();
 80050c8:	f000 f980 	bl	80053cc <HAL_MspDeInit>

	  __GPIOA_CLK_ENABLE();
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <HAL_MspInit+0x50>)
 80050ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d0:	4a10      	ldr	r2, [pc, #64]	; (8005114 <HAL_MspInit+0x50>)
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	6313      	str	r3, [r2, #48]	; 0x30
	  __GPIOB_CLK_ENABLE();
 80050d8:	4b0e      	ldr	r3, [pc, #56]	; (8005114 <HAL_MspInit+0x50>)
 80050da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050dc:	4a0d      	ldr	r2, [pc, #52]	; (8005114 <HAL_MspInit+0x50>)
 80050de:	f043 0302 	orr.w	r3, r3, #2
 80050e2:	6313      	str	r3, [r2, #48]	; 0x30
	  __GPIOC_CLK_ENABLE();
 80050e4:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <HAL_MspInit+0x50>)
 80050e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e8:	4a0a      	ldr	r2, [pc, #40]	; (8005114 <HAL_MspInit+0x50>)
 80050ea:	f043 0304 	orr.w	r3, r3, #4
 80050ee:	6313      	str	r3, [r2, #48]	; 0x30

	  HAL_UARTCOM_MspInit();
 80050f0:	f000 f83e 	bl	8005170 <HAL_UARTCOM_MspInit>
	  HAL_UARTMIDI_MspInit();
 80050f4:	f000 f86a 	bl	80051cc <HAL_UARTMIDI_MspInit>
	  HAL_WolfsonReset_MspInit();
 80050f8:	f000 f824 	bl	8005144 <HAL_WolfsonReset_MspInit>
	  HAL_timer_MspInit();
 80050fc:	f000 f8d8 	bl	80052b0 <HAL_timer_MspInit>
	  HAL_GPIO_LED_MspInit();
 8005100:	f000 f88e 	bl	8005220 <HAL_GPIO_LED_MspInit>
	  HAL_GPIO_MEASURE_MspInit();
 8005104:	f000 f808 	bl	8005118 <HAL_GPIO_MEASURE_MspInit>
	  HAL_i2c_MspInit();
 8005108:	f000 f8a0 	bl	800524c <HAL_i2c_MspInit>
	  HAL_i2s_MspInit();
 800510c:	f000 f8f2 	bl	80052f4 <HAL_i2s_MspInit>
#if FIR_DMA_CMSIS_F32 || FIR_DMA_CMSIS_Q15
	  HAL_DMA_MspInit();
#endif
}
 8005110:	bf00      	nop
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40023800 	.word	0x40023800

08005118 <HAL_GPIO_MEASURE_MspInit>:
/******************************************************************
			Mesure temps d'exécution
PC0
*******************************************************************/
void HAL_GPIO_MEASURE_MspInit()
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800511e:	2301      	movs	r3, #1
 8005120:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005122:	2301      	movs	r3, #1
 8005124:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005126:	2301      	movs	r3, #1
 8005128:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800512a:	2302      	movs	r3, #2
 800512c:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800512e:	1d3b      	adds	r3, r7, #4
 8005130:	4619      	mov	r1, r3
 8005132:	4803      	ldr	r0, [pc, #12]	; (8005140 <HAL_GPIO_MEASURE_MspInit+0x28>)
 8005134:	f7fb fe3e 	bl	8000db4 <HAL_GPIO_Init>
}
 8005138:	bf00      	nop
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40020800 	.word	0x40020800

08005144 <HAL_WolfsonReset_MspInit>:
/******************************************************************
			Reset WOLFSON
PC5
*******************************************************************/
void HAL_WolfsonReset_MspInit()
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef  GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800514a:	2320      	movs	r3, #32
 800514c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800514e:	2301      	movs	r3, #1
 8005150:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005152:	2301      	movs	r3, #1
 8005154:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005156:	2302      	movs	r3, #2
 8005158:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800515a:	1d3b      	adds	r3, r7, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4803      	ldr	r0, [pc, #12]	; (800516c <HAL_WolfsonReset_MspInit+0x28>)
 8005160:	f7fb fe28 	bl	8000db4 <HAL_GPIO_Init>
}
 8005164:	bf00      	nop
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40020800 	.word	0x40020800

08005170 <HAL_UARTCOM_MspInit>:
			USART2 : ST-LINK virtual Port
 TX --> PA2
 RX --> PA3
*******************************************************************/
void HAL_UARTCOM_MspInit(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8005176:	4b13      	ldr	r3, [pc, #76]	; (80051c4 <HAL_UARTCOM_MspInit+0x54>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	4a12      	ldr	r2, [pc, #72]	; (80051c4 <HAL_UARTCOM_MspInit+0x54>)
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	6313      	str	r3, [r2, #48]	; 0x30
  __USART2_CLK_ENABLE();
 8005182:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <HAL_UARTCOM_MspInit+0x54>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	4a0f      	ldr	r2, [pc, #60]	; (80051c4 <HAL_UARTCOM_MspInit+0x54>)
 8005188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800518c:	6413      	str	r3, [r2, #64]	; 0x40

  GPIO_InitStruct.Pin       = GPIO_PIN_2 | GPIO_PIN_3;
 800518e:	230c      	movs	r3, #12
 8005190:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005192:	2302      	movs	r3, #2
 8005194:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8005196:	2301      	movs	r3, #1
 8005198:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_LOW;	//GPIO_SPEED_FAST;
 800519a:	2300      	movs	r3, #0
 800519c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate =  GPIO_AF7_USART2;
 800519e:	2307      	movs	r3, #7
 80051a0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051a2:	1d3b      	adds	r3, r7, #4
 80051a4:	4619      	mov	r1, r3
 80051a6:	4808      	ldr	r0, [pc, #32]	; (80051c8 <HAL_UARTCOM_MspInit+0x58>)
 80051a8:	f7fb fe04 	bl	8000db4 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(USART2_IRQn, USART2_IRQ_PRIO, 0); //9
 80051ac:	2200      	movs	r2, #0
 80051ae:	2109      	movs	r1, #9
 80051b0:	2026      	movs	r0, #38	; 0x26
 80051b2:	f7fb fdba 	bl	8000d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80051b6:	2026      	movs	r0, #38	; 0x26
 80051b8:	f7fb fdd3 	bl	8000d62 <HAL_NVIC_EnableIRQ>
}
 80051bc:	bf00      	nop
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40023800 	.word	0x40023800
 80051c8:	40020000 	.word	0x40020000

080051cc <HAL_UARTMIDI_MspInit>:

  PC6     ------> USART6_TX
  PC7     ------> USART6_RX
******************************************************************/
void HAL_UARTMIDI_MspInit(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	    __USART6_CLK_ENABLE();
 80051d2:	4b11      	ldr	r3, [pc, #68]	; (8005218 <HAL_UARTMIDI_MspInit+0x4c>)
 80051d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d6:	4a10      	ldr	r2, [pc, #64]	; (8005218 <HAL_UARTMIDI_MspInit+0x4c>)
 80051d8:	f043 0320 	orr.w	r3, r3, #32
 80051dc:	6453      	str	r3, [r2, #68]	; 0x44

	    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80051de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80051e2:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e4:	2302      	movs	r3, #2
 80051e6:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL; //GPIO_PULLUP;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80051ec:	2300      	movs	r3, #0
 80051ee:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80051f0:	2308      	movs	r3, #8
 80051f2:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051f4:	1d3b      	adds	r3, r7, #4
 80051f6:	4619      	mov	r1, r3
 80051f8:	4808      	ldr	r0, [pc, #32]	; (800521c <HAL_UARTMIDI_MspInit+0x50>)
 80051fa:	f7fb fddb 	bl	8000db4 <HAL_GPIO_Init>

	    HAL_NVIC_SetPriority(USART6_IRQn, USART6_IRQ_PRIO, 0);
 80051fe:	2200      	movs	r2, #0
 8005200:	2106      	movs	r1, #6
 8005202:	2047      	movs	r0, #71	; 0x47
 8005204:	f7fb fd91 	bl	8000d2a <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005208:	2047      	movs	r0, #71	; 0x47
 800520a:	f7fb fdaa 	bl	8000d62 <HAL_NVIC_EnableIRQ>

}
 800520e:	bf00      	nop
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	40023800 	.word	0x40023800
 800521c:	40020000 	.word	0x40020000

08005220 <HAL_GPIO_LED_MspInit>:

//******************************************************************
//			GPIO LED PA5
//******************************************************************
void HAL_GPIO_LED_MspInit(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

/* Configure PA05 IO in output push-pull mode to drive external LED */
	  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005226:	2320      	movs	r3, #32
 8005228:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800522a:	2301      	movs	r3, #1
 800522c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800522e:	2301      	movs	r3, #1
 8005230:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8005232:	2302      	movs	r3, #2
 8005234:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005236:	1d3b      	adds	r3, r7, #4
 8005238:	4619      	mov	r1, r3
 800523a:	4803      	ldr	r0, [pc, #12]	; (8005248 <HAL_GPIO_LED_MspInit+0x28>)
 800523c:	f7fb fdba 	bl	8000db4 <HAL_GPIO_Init>

}
 8005240:	bf00      	nop
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40020000 	.word	0x40020000

0800524c <HAL_i2c_MspInit>:
			I2C - 1
I2C1_SCL	-->	PB8
I2C1_SDA	--> PB9
******************************************************************/
void HAL_i2c_MspInit(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  //-----------------------------------------------------------
	  // 						I2C1
	  //-----------------------------------------------------------
	  __I2C1_CLK_ENABLE();
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <HAL_i2c_MspInit+0x5c>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	4a14      	ldr	r2, [pc, #80]	; (80052a8 <HAL_i2c_MspInit+0x5c>)
 8005258:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800525c:	6413      	str	r3, [r2, #64]	; 0x40

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800525e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005262:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005264:	2312      	movs	r3, #18
 8005266:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800526c:	2303      	movs	r3, #3
 800526e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =   GPIO_AF4_I2C1 ; // hal_gpio_ex.h
 8005270:	2304      	movs	r3, #4
 8005272:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	4619      	mov	r1, r3
 8005278:	480c      	ldr	r0, [pc, #48]	; (80052ac <HAL_i2c_MspInit+0x60>)
 800527a:	f7fb fd9b 	bl	8000db4 <HAL_GPIO_Init>

  	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 800527e:	2200      	movs	r2, #0
 8005280:	2102      	movs	r1, #2
 8005282:	2020      	movs	r0, #32
 8005284:	f7fb fd51 	bl	8000d2a <HAL_NVIC_SetPriority>
  	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005288:	2020      	movs	r0, #32
 800528a:	f7fb fd6a 	bl	8000d62 <HAL_NVIC_EnableIRQ>
  	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 800528e:	2200      	movs	r2, #0
 8005290:	210b      	movs	r1, #11
 8005292:	201f      	movs	r0, #31
 8005294:	f7fb fd49 	bl	8000d2a <HAL_NVIC_SetPriority>
  	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005298:	201f      	movs	r0, #31
 800529a:	f7fb fd62 	bl	8000d62 <HAL_NVIC_EnableIRQ>
}
 800529e:	bf00      	nop
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40023800 	.word	0x40023800
 80052ac:	40020400 	.word	0x40020400

080052b0 <HAL_timer_MspInit>:
/******************************************************************
			TIMER
******************************************************************/
void HAL_timer_MspInit(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
	__TIM4_CLK_ENABLE();
 80052b4:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <HAL_timer_MspInit+0x40>)
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	4a0d      	ldr	r2, [pc, #52]	; (80052f0 <HAL_timer_MspInit+0x40>)
 80052ba:	f043 0304 	orr.w	r3, r3, #4
 80052be:	6413      	str	r3, [r2, #64]	; 0x40

	HAL_NVIC_SetPriority(TIM4_IRQn, TIMER4_IRQ_PRIO, 0);	//3
 80052c0:	2200      	movs	r2, #0
 80052c2:	2103      	movs	r1, #3
 80052c4:	201e      	movs	r0, #30
 80052c6:	f7fb fd30 	bl	8000d2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80052ca:	201e      	movs	r0, #30
 80052cc:	f7fb fd49 	bl	8000d62 <HAL_NVIC_EnableIRQ>

	__TIM5_CLK_ENABLE();
 80052d0:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <HAL_timer_MspInit+0x40>)
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	4a06      	ldr	r2, [pc, #24]	; (80052f0 <HAL_timer_MspInit+0x40>)
 80052d6:	f043 0308 	orr.w	r3, r3, #8
 80052da:	6413      	str	r3, [r2, #64]	; 0x40

 	 HAL_NVIC_SetPriority(TIM5_IRQn, TIMER5_IRQ_PRIO, 0);	//4
 80052dc:	2200      	movs	r2, #0
 80052de:	210a      	movs	r1, #10
 80052e0:	2032      	movs	r0, #50	; 0x32
 80052e2:	f7fb fd22 	bl	8000d2a <HAL_NVIC_SetPriority>
	 HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80052e6:	2032      	movs	r0, #50	; 0x32
 80052e8:	f7fb fd3b 	bl	8000d62 <HAL_NVIC_EnableIRQ>
}
 80052ec:	bf00      	nop
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40023800 	.word	0x40023800

080052f4 <HAL_i2s_MspInit>:

I2S --> SPI2
I2Sext --> I2S2ext
******************************************************************/
void HAL_i2s_MspInit(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __GPIOB_CLK_ENABLE();
 80052fa:	4b31      	ldr	r3, [pc, #196]	; (80053c0 <HAL_i2s_MspInit+0xcc>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	4a30      	ldr	r2, [pc, #192]	; (80053c0 <HAL_i2s_MspInit+0xcc>)
 8005300:	f043 0302 	orr.w	r3, r3, #2
 8005304:	6313      	str	r3, [r2, #48]	; 0x30
	  __GPIOC_CLK_ENABLE();
 8005306:	4b2e      	ldr	r3, [pc, #184]	; (80053c0 <HAL_i2s_MspInit+0xcc>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	4a2d      	ldr	r2, [pc, #180]	; (80053c0 <HAL_i2s_MspInit+0xcc>)
 800530c:	f043 0304 	orr.w	r3, r3, #4
 8005310:	6313      	str	r3, [r2, #48]	; 0x30
	  __SPI2_CLK_ENABLE();
 8005312:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <HAL_i2s_MspInit+0xcc>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	4a2a      	ldr	r2, [pc, #168]	; (80053c0 <HAL_i2s_MspInit+0xcc>)
 8005318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800531c:	6413      	str	r3, [r2, #64]	; 0x40
	  __SPI3_CLK_ENABLE();
 800531e:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <HAL_i2s_MspInit+0xcc>)
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	4a27      	ldr	r2, [pc, #156]	; (80053c0 <HAL_i2s_MspInit+0xcc>)
 8005324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005328:	6413      	str	r3, [r2, #64]	; 0x40

	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800532a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800532e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;		//GPIO_MODE_AF_PP;
 8005330:	2302      	movs	r3, #2
 8005332:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;			//GPIO_PULLUP;
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005338:	2300      	movs	r3, #0
 800533a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =   GPIO_AF5_SPI2 ; // hal_gpio_ex.h
 800533c:	2305      	movs	r3, #5
 800533e:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005340:	1d3b      	adds	r3, r7, #4
 8005342:	4619      	mov	r1, r3
 8005344:	481f      	ldr	r0, [pc, #124]	; (80053c4 <HAL_i2s_MspInit+0xd0>)
 8005346:	f7fb fd35 	bl	8000db4 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800534a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800534e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;		//GPIO_MODE_AF_PP;
 8005350:	2302      	movs	r3, #2
 8005352:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;			//GPIO_PULLUP;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005358:	2300      	movs	r3, #0
 800535a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =   GPIO_AF5_SPI2 ; // hal_gpio_ex.h
 800535c:	2305      	movs	r3, #5
 800535e:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005360:	1d3b      	adds	r3, r7, #4
 8005362:	4619      	mov	r1, r3
 8005364:	4817      	ldr	r0, [pc, #92]	; (80053c4 <HAL_i2s_MspInit+0xd0>)
 8005366:	f7fb fd25 	bl	8000db4 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800536a:	2308      	movs	r3, #8
 800536c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;		//GPIO_MODE_AF_PP;
 800536e:	2302      	movs	r3, #2
 8005370:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;			//GPIO_PULLUP;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005376:	2300      	movs	r3, #0
 8005378:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =   GPIO_AF5_SPI2 ; // hal_gpio_ex.h
 800537a:	2305      	movs	r3, #5
 800537c:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800537e:	1d3b      	adds	r3, r7, #4
 8005380:	4619      	mov	r1, r3
 8005382:	4811      	ldr	r0, [pc, #68]	; (80053c8 <HAL_i2s_MspInit+0xd4>)
 8005384:	f7fb fd16 	bl	8000db4 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005388:	2304      	movs	r3, #4
 800538a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;//GPIO_MODE_AF_PP;
 800538c:	2302      	movs	r3, #2
 800538e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;//GPIO_PULLUP;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8005394:	2300      	movs	r3, #0
 8005396:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF6_I2S2ext;// GPIO_AF6_I2S2ext ; // hal_gpio_ex.h
 8005398:	2306      	movs	r3, #6
 800539a:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800539c:	1d3b      	adds	r3, r7, #4
 800539e:	4619      	mov	r1, r3
 80053a0:	4809      	ldr	r0, [pc, #36]	; (80053c8 <HAL_i2s_MspInit+0xd4>)
 80053a2:	f7fb fd07 	bl	8000db4 <HAL_GPIO_Init>


#if IO_METHOD==IO_METHOD_INTR
	  HAL_NVIC_SetPriority(SPI2_IRQn, SPI2_IRQ_PRIO, 0);
 80053a6:	2200      	movs	r2, #0
 80053a8:	2105      	movs	r1, #5
 80053aa:	2024      	movs	r0, #36	; 0x24
 80053ac:	f7fb fcbd 	bl	8000d2a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80053b0:	2024      	movs	r0, #36	; 0x24
 80053b2:	f7fb fcd6 	bl	8000d62 <HAL_NVIC_EnableIRQ>
#endif

}
 80053b6:	bf00      	nop
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	40023800 	.word	0x40023800
 80053c4:	40020400 	.word	0x40020400
 80053c8:	40020800 	.word	0x40020800

080053cc <HAL_MspDeInit>:
//=======================================================================

void HAL_MspDeInit(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
	  HAL_NVIC_DisableIRQ(SPI2_IRQn);
 80053d0:	2024      	movs	r0, #36	; 0x24
 80053d2:	f7fb fcd4 	bl	8000d7e <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(DMA1_Stream3_IRQn);
 80053d6:	200e      	movs	r0, #14
 80053d8:	f7fb fcd1 	bl	8000d7e <HAL_NVIC_DisableIRQ>
	  HAL_NVIC_DisableIRQ(DMA1_Stream4_IRQn);
 80053dc:	200f      	movs	r0, #15
 80053de:	f7fb fcce 	bl	8000d7e <HAL_NVIC_DisableIRQ>

}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <NMI_Handler>:
/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

void NMI_Handler(void)
{
 80053e6:	b480      	push	{r7}
 80053e8:	af00      	add	r7, sp, #0
}
 80053ea:	bf00      	nop
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HardFault_Handler>:

void HardFault_Handler(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80053f8:	e7fe      	b.n	80053f8 <HardFault_Handler+0x4>

080053fa <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 80053fa:	b480      	push	{r7}
 80053fc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80053fe:	e7fe      	b.n	80053fe <MemManage_Handler+0x4>

08005400 <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8005404:	e7fe      	b.n	8005404 <BusFault_Handler+0x4>

08005406 <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 8005406:	b480      	push	{r7}
 8005408:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800540a:	e7fe      	b.n	800540a <UsageFault_Handler+0x4>

0800540c <DebugMon_Handler>:
void SVC_Handler(void)
{}
*/

void DebugMon_Handler(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
}
 8005410:	bf00      	nop
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <SysTick_Handler>:
void PendSV_Handler(void)
{}
*/

void SysTick_Handler(void)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	af00      	add	r7, sp, #0
/*	if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
	    {
	      xPortSysTickHandler();
	    }*/
  HAL_IncTick();
 800541e:	f7fb fb61 	bl	8000ae4 <HAL_IncTick>
}
 8005422:	bf00      	nop
 8005424:	bd80      	pop	{r7, pc}

08005426 <OTG_FS_IRQHandler>:


void OTG_FS_IRQHandler(void)
{
 8005426:	b480      	push	{r7}
 8005428:	af00      	add	r7, sp, #0
   //HAL_PCD_IRQHandler(&hpcd); // USB
}
 800542a:	bf00      	nop
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <TIM4_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f4xx.s).                                               */
/******************************************************************************/

void TIM4_IRQHandler(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle4);
 8005438:	4802      	ldr	r0, [pc, #8]	; (8005444 <TIM4_IRQHandler+0x10>)
 800543a:	f7fd fb69 	bl	8002b10 <HAL_TIM_IRQHandler>
}
 800543e:	bf00      	nop
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	2000f700 	.word	0x2000f700

08005448 <TIM5_IRQHandler>:


void TIM5_IRQHandler(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle5);
 800544c:	4802      	ldr	r0, [pc, #8]	; (8005458 <TIM5_IRQHandler+0x10>)
 800544e:	f7fd fb5f 	bl	8002b10 <HAL_TIM_IRQHandler>
}
 8005452:	bf00      	nop
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	2000f6c4 	.word	0x2000f6c4

0800545c <EXTI0_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI0_IRQHandler(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005460:	2001      	movs	r0, #1
 8005462:	f7fb fe63 	bl	800112c <HAL_GPIO_EXTI_IRQHandler>
}
 8005466:	bf00      	nop
 8005468:	bd80      	pop	{r7, pc}

0800546a <EXTI1_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI1_IRQHandler(void)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800546e:	2002      	movs	r0, #2
 8005470:	f7fb fe5c 	bl	800112c <HAL_GPIO_EXTI_IRQHandler>
}
 8005474:	bf00      	nop
 8005476:	bd80      	pop	{r7, pc}

08005478 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 800547c:	4802      	ldr	r0, [pc, #8]	; (8005488 <I2C1_EV_IRQHandler+0x10>)
 800547e:	f7fc f801 	bl	8001484 <HAL_I2C_EV_IRQHandler>
}
 8005482:	bf00      	nop
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	2000f73c 	.word	0x2000f73c

0800548c <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005490:	4802      	ldr	r0, [pc, #8]	; (800549c <I2C1_ER_IRQHandler+0x10>)
 8005492:	f7fc f972 	bl	800177a <HAL_I2C_ER_IRQHandler>
}
 8005496:	bf00      	nop
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	2000f73c 	.word	0x2000f73c

080054a0 <EXTI15_10_IRQHandler>:

//=======================================================
// USER BUTTON INTERRUPT (PC13)
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80054a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80054a8:	f7fb fe40 	bl	800112c <HAL_GPIO_EXTI_IRQHandler>
}
 80054ac:	bf00      	nop
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <USART2_IRQHandler>:
//=======================================================
// STLINK USART RECEIVE HANDLER
//=======================================================
void USART2_IRQHandler(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&Uart2Handle);
 80054b4:	4802      	ldr	r0, [pc, #8]	; (80054c0 <USART2_IRQHandler+0x10>)
 80054b6:	f7fd fe35 	bl	8003124 <HAL_UART_IRQHandler>
}
 80054ba:	bf00      	nop
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	2000f254 	.word	0x2000f254

080054c4 <USART6_IRQHandler>:
//=======================================================
// ZIGBEE USART RECEIVE HANDLER
//=======================================================
void USART6_IRQHandler(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&Uart6Handle);
 80054c8:	4802      	ldr	r0, [pc, #8]	; (80054d4 <USART6_IRQHandler+0x10>)
 80054ca:	f7fd fe2b 	bl	8003124 <HAL_UART_IRQHandler>
}
 80054ce:	bf00      	nop
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	2000f20c 	.word	0x2000f20c

080054d8 <SPI2_IRQHandler>:
//=======================================================

void SPI2_IRQHandler(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0

#if IO_METHOD==IO_METHOD_INTR
	I2S_RxCpltCallback();
 80054dc:	f7fe fe76 	bl	80041cc <I2S_RxCpltCallback>
	SPI_I2S_ClearFlag(I2Sx, I2S_FLAG_CHSIDE);
 80054e0:	2104      	movs	r1, #4
 80054e2:	480a      	ldr	r0, [pc, #40]	; (800550c <SPI2_IRQHandler+0x34>)
 80054e4:	f7fe fdc5 	bl	8004072 <SPI_I2S_ClearFlag>
	SPI_I2S_ClearFlag(I2Sxext, I2S_FLAG_CHSIDE);
 80054e8:	2104      	movs	r1, #4
 80054ea:	4809      	ldr	r0, [pc, #36]	; (8005510 <SPI2_IRQHandler+0x38>)
 80054ec:	f7fe fdc1 	bl	8004072 <SPI_I2S_ClearFlag>

	if (SPI_I2S_GetITStatus(SPI2, SPI_I2S_IT_RXNE) != RESET)
 80054f0:	2160      	movs	r1, #96	; 0x60
 80054f2:	4806      	ldr	r0, [pc, #24]	; (800550c <SPI2_IRQHandler+0x34>)
 80054f4:	f7fe fdcf 	bl	8004096 <SPI_I2S_GetITStatus>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2bff      	cmp	r3, #255	; 0xff
 80054fc:	d003      	beq.n	8005506 <SPI2_IRQHandler+0x2e>
	  {
		  SPI_I2S_ClearITPendingBit(SPI2, SPI_I2S_IT_RXNE);		// Receive buffer not empty flag
 80054fe:	2160      	movs	r1, #96	; 0x60
 8005500:	4802      	ldr	r0, [pc, #8]	; (800550c <SPI2_IRQHandler+0x34>)
 8005502:	f7fe fe01 	bl	8004108 <SPI_I2S_ClearITPendingBit>
	 }
#endif
}
 8005506:	bf00      	nop
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40003800 	.word	0x40003800
 8005510:	40003400 	.word	0x40003400

08005514 <DMA1_Stream3_IRQHandler>:
{
}


void DMA1_Stream3_IRQHandler(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
#if IO_METHOD==IO_METHOD_DMA
//	DMA1_Stream3_IRQHdlr();
#endif
}
 8005518:	bf00      	nop
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <DMA1_Stream4_IRQHandler>:


void DMA1_Stream4_IRQHandler(void)
{
 8005522:	b480      	push	{r7}
 8005524:	af00      	add	r7, sp, #0
#if IO_METHOD==IO_METHOD_DMA
//	DMA1_Stream4_IRQHdlr();
#endif
}
 8005526:	bf00      	nop
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005534:	4b16      	ldr	r3, [pc, #88]	; (8005590 <SystemInit+0x60>)
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553a:	4a15      	ldr	r2, [pc, #84]	; (8005590 <SystemInit+0x60>)
 800553c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005544:	4b13      	ldr	r3, [pc, #76]	; (8005594 <SystemInit+0x64>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a12      	ldr	r2, [pc, #72]	; (8005594 <SystemInit+0x64>)
 800554a:	f043 0301 	orr.w	r3, r3, #1
 800554e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005550:	4b10      	ldr	r3, [pc, #64]	; (8005594 <SystemInit+0x64>)
 8005552:	2200      	movs	r2, #0
 8005554:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005556:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <SystemInit+0x64>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a0e      	ldr	r2, [pc, #56]	; (8005594 <SystemInit+0x64>)
 800555c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005564:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <SystemInit+0x64>)
 8005568:	4a0b      	ldr	r2, [pc, #44]	; (8005598 <SystemInit+0x68>)
 800556a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <SystemInit+0x64>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a08      	ldr	r2, [pc, #32]	; (8005594 <SystemInit+0x64>)
 8005572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005576:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005578:	4b06      	ldr	r3, [pc, #24]	; (8005594 <SystemInit+0x64>)
 800557a:	2200      	movs	r2, #0
 800557c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800557e:	4b04      	ldr	r3, [pc, #16]	; (8005590 <SystemInit+0x60>)
 8005580:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005584:	609a      	str	r2, [r3, #8]
#endif
}
 8005586:	bf00      	nop
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	e000ed00 	.word	0xe000ed00
 8005594:	40023800 	.word	0x40023800
 8005598:	24003010 	.word	0x24003010

0800559c <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 800559c:	b480      	push	{r7}
 800559e:	b089      	sub	sp, #36	; 0x24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	fb01 f202 	mul.w	r2, r1, r2
 80055bc:	1a9a      	subs	r2, r3, r2
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	1c59      	adds	r1, r3, #1
 80055c2:	60f9      	str	r1, [r7, #12]
 80055c4:	4936      	ldr	r1, [pc, #216]	; (80056a0 <num2str+0x104>)
 80055c6:	5c8a      	ldrb	r2, [r1, r2]
 80055c8:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d2:	60bb      	str	r3, [r7, #8]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e9      	bne.n	80055ae <num2str+0x12>
        *s='\0';
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 80055e8:	2300      	movs	r3, #0
 80055ea:	61fb      	str	r3, [r7, #28]
 80055ec:	e01a      	b.n	8005624 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	4413      	add	r3, r2
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	76fb      	strb	r3, [r7, #27]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	441a      	add	r2, r3
 8005604:	6979      	ldr	r1, [r7, #20]
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	440b      	add	r3, r1
 800560a:	7812      	ldrb	r2, [r2, #0]
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4413      	add	r3, r2
 800561a:	7efa      	ldrb	r2, [r7, #27]
 800561c:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	3301      	adds	r3, #1
 8005622:	61fb      	str	r3, [r7, #28]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	085b      	lsrs	r3, r3, #1
 8005628:	69fa      	ldr	r2, [r7, #28]
 800562a:	429a      	cmp	r2, r3
 800562c:	d3df      	bcc.n	80055ee <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d22d      	bcs.n	8005692 <num2str+0xf6>
                for (i=cnt;i==0;i--)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	61fb      	str	r3, [r7, #28]
 800563a:	e00e      	b.n	800565a <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	441a      	add	r2, r3
 8005642:	69f9      	ldr	r1, [r7, #28]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	4419      	add	r1, r3
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1acb      	subs	r3, r1, r3
 800564c:	6979      	ldr	r1, [r7, #20]
 800564e:	440b      	add	r3, r1
 8005650:	7812      	ldrb	r2, [r2, #0]
 8005652:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	3b01      	subs	r3, #1
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0ed      	beq.n	800563c <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <num2str+0xd0>
 8005666:	2320      	movs	r3, #32
 8005668:	76fb      	strb	r3, [r7, #27]
 800566a:	e001      	b.n	8005670 <num2str+0xd4>
 800566c:	2330      	movs	r3, #48	; 0x30
 800566e:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 8005670:	2300      	movs	r3, #0
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	e007      	b.n	8005686 <num2str+0xea>
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	4413      	add	r3, r2
 800567c:	7efa      	ldrb	r2, [r7, #27]
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	3301      	adds	r3, #1
 8005684:	61fb      	str	r3, [r7, #28]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	429a      	cmp	r2, r3
 8005690:	d3f1      	bcc.n	8005676 <num2str+0xda>
        }
}
 8005692:	bf00      	nop
 8005694:	3724      	adds	r7, #36	; 0x24
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	2000eda0 	.word	0x2000eda0

080056a4 <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 80056bc:	e02e      	b.n	800571c <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	2b2f      	cmp	r3, #47	; 0x2f
 80056c2:	d906      	bls.n	80056d2 <str2num+0x2e>
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	2b39      	cmp	r3, #57	; 0x39
 80056c8:	d803      	bhi.n	80056d2 <str2num+0x2e>
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	3b30      	subs	r3, #48	; 0x30
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	e018      	b.n	8005704 <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b10      	cmp	r3, #16
 80056d6:	d109      	bne.n	80056ec <str2num+0x48>
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	2b40      	cmp	r3, #64	; 0x40
 80056dc:	d906      	bls.n	80056ec <str2num+0x48>
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	2b46      	cmp	r3, #70	; 0x46
 80056e2:	d803      	bhi.n	80056ec <str2num+0x48>
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	3b37      	subs	r3, #55	; 0x37
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	e00b      	b.n	8005704 <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b10      	cmp	r3, #16
 80056f0:	d117      	bne.n	8005722 <str2num+0x7e>
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	2b60      	cmp	r3, #96	; 0x60
 80056f6:	d914      	bls.n	8005722 <str2num+0x7e>
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	2b66      	cmp	r3, #102	; 0x66
 80056fc:	d811      	bhi.n	8005722 <str2num+0x7e>
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	3b57      	subs	r3, #87	; 0x57
 8005702:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	fb02 f303 	mul.w	r3, r2, r3
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4413      	add	r3, r2
 8005710:	617b      	str	r3, [r7, #20]
		ch=*s++;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1cd      	bne.n	80056be <str2num+0x1a>
	}
	return u;
 8005722:	697b      	ldr	r3, [r7, #20]
}
 8005724:	4618      	mov	r0, r3
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	3b01      	subs	r3, #1
 8005742:	613b      	str	r3, [r7, #16]
    while (i<j)
 8005744:	e018      	b.n	8005778 <reverse+0x48>
    {
        temp = str[i];
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	4413      	add	r3, r2
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	441a      	add	r2, r3
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	440b      	add	r3, r1
 800575c:	7812      	ldrb	r2, [r2, #0]
 800575e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4413      	add	r3, r2
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
        i++; j--;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	3301      	adds	r3, #1
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	3b01      	subs	r3, #1
 8005776:	613b      	str	r3, [r7, #16]
    while (i<j)
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	429a      	cmp	r2, r3
 800577e:	dbe2      	blt.n	8005746 <reverse+0x16>
    }
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
	...

08005790 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800579c:	2300      	movs	r3, #0
 800579e:	617b      	str	r3, [r7, #20]
    while (x)
 80057a0:	e01d      	b.n	80057de <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4b1d      	ldr	r3, [pc, #116]	; (800581c <intToStr+0x8c>)
 80057a6:	fb83 1302 	smull	r1, r3, r3, r2
 80057aa:	1099      	asrs	r1, r3, #2
 80057ac:	17d3      	asrs	r3, r2, #31
 80057ae:	1ac9      	subs	r1, r1, r3
 80057b0:	460b      	mov	r3, r1
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	1ad1      	subs	r1, r2, r3
 80057ba:	b2ca      	uxtb	r2, r1
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	1c59      	adds	r1, r3, #1
 80057c0:	6179      	str	r1, [r7, #20]
 80057c2:	4619      	mov	r1, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	440b      	add	r3, r1
 80057c8:	3230      	adds	r2, #48	; 0x30
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]
        x = x/10;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4a12      	ldr	r2, [pc, #72]	; (800581c <intToStr+0x8c>)
 80057d2:	fb82 1203 	smull	r1, r2, r2, r3
 80057d6:	1092      	asrs	r2, r2, #2
 80057d8:	17db      	asrs	r3, r3, #31
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	60fb      	str	r3, [r7, #12]
    while (x)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1de      	bne.n	80057a2 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80057e4:	e007      	b.n	80057f6 <intToStr+0x66>
        str[i++] = '0';
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	617a      	str	r2, [r7, #20]
 80057ec:	461a      	mov	r2, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	2230      	movs	r2, #48	; 0x30
 80057f4:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	dbf3      	blt.n	80057e6 <intToStr+0x56>

    reverse(str, i);
 80057fe:	6979      	ldr	r1, [r7, #20]
 8005800:	68b8      	ldr	r0, [r7, #8]
 8005802:	f7ff ff95 	bl	8005730 <reverse>
    str[i] = '\0';
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	4413      	add	r3, r2
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]
    return i;
 8005810:	697b      	ldr	r3, [r7, #20]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	66666667 	.word	0x66666667

08005820 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	ed87 0a02 	vstr	s0, [r7, #8]
 800582c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 800582e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005836:	ee17 3a90 	vmov	r3, s15
 800583a:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005846:	ed97 7a02 	vldr	s14, [r7, #8]
 800584a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800584e:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8005852:	2200      	movs	r2, #0
 8005854:	68f9      	ldr	r1, [r7, #12]
 8005856:	69f8      	ldr	r0, [r7, #28]
 8005858:	f7ff ff9a 	bl	8005790 <intToStr>
 800585c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d025      	beq.n	80058b0 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	222e      	movs	r2, #46	; 0x2e
 800586c:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80058b8 <float2str+0x98>
 8005874:	f000 f824 	bl	80058c0 <myPow>
 8005878:	ec53 2b10 	vmov	r2, r3, d0
 800587c:	4610      	mov	r0, r2
 800587e:	4619      	mov	r1, r3
 8005880:	f7fb f878 	bl	8000974 <__aeabi_d2f>
 8005884:	ee07 0a10 	vmov	s14, r0
 8005888:	edd7 7a06 	vldr	s15, [r7, #24]
 800588c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005890:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8005894:	edd7 7a06 	vldr	s15, [r7, #24]
 8005898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	3301      	adds	r3, #1
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	4619      	mov	r1, r3
 80058a8:	ee17 0a90 	vmov	r0, s15
 80058ac:	f7ff ff70 	bl	8005790 <intToStr>
    }
}
 80058b0:	bf00      	nop
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	00000000 	.word	0x00000000
 80058bc:	40240000 	.word	0x40240000

080058c0 <myPow>:
//=================================================================
double myPow(double x, int n) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	ed87 0b02 	vstr	d0, [r7, #8]
 80058ca:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bfb8      	it	lt
 80058d2:	425b      	neglt	r3, r3
 80058d4:	61fb      	str	r3, [r7, #28]
    double result = 1;
 80058d6:	f04f 0200 	mov.w	r2, #0
 80058da:	4b1d      	ldr	r3, [pc, #116]	; (8005950 <myPow+0x90>)
 80058dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 80058e0:	e01b      	b.n	800591a <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d009      	beq.n	8005900 <myPow+0x40>
        {
            result = result * x;
 80058ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80058f4:	f7fa fe2c 	bl	8000550 <__aeabi_dmul>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	085b      	lsrs	r3, r3, #1
 8005904:	61fb      	str	r3, [r7, #28]
        x = x * x;
 8005906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800590a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800590e:	f7fa fe1f 	bl	8000550 <__aeabi_dmul>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e0      	bne.n	80058e2 <myPow+0x22>
    }

    if(n < 0)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	da09      	bge.n	800593a <myPow+0x7a>
    {
        return 1/result;
 8005926:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800592a:	f04f 0000 	mov.w	r0, #0
 800592e:	4908      	ldr	r1, [pc, #32]	; (8005950 <myPow+0x90>)
 8005930:	f7fa ff38 	bl	80007a4 <__aeabi_ddiv>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	e001      	b.n	800593e <myPow+0x7e>
    }
    return result;
 800593a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800593e:	ec43 2b17 	vmov	d7, r2, r3
 8005942:	eeb0 0a47 	vmov.f32	s0, s14
 8005946:	eef0 0a67 	vmov.f32	s1, s15
 800594a:	3720      	adds	r7, #32
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	3ff00000 	.word	0x3ff00000

08005954 <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	4603      	mov	r3, r0
 800595c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005964:	d011      	beq.n	800598a <HAL_GPIO_EXTI_Callback+0x36>
 8005966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800596a:	dc10      	bgt.n	800598e <HAL_GPIO_EXTI_Callback+0x3a>
 800596c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005970:	d00b      	beq.n	800598a <HAL_GPIO_EXTI_Callback+0x36>
 8005972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005976:	dc0a      	bgt.n	800598e <HAL_GPIO_EXTI_Callback+0x3a>
 8005978:	2b08      	cmp	r3, #8
 800597a:	d00a      	beq.n	8005992 <HAL_GPIO_EXTI_Callback+0x3e>
 800597c:	2b08      	cmp	r3, #8
 800597e:	dc06      	bgt.n	800598e <HAL_GPIO_EXTI_Callback+0x3a>
 8005980:	2b01      	cmp	r3, #1
 8005982:	d008      	beq.n	8005996 <HAL_GPIO_EXTI_Callback+0x42>
 8005984:	2b02      	cmp	r3, #2
 8005986:	d008      	beq.n	800599a <HAL_GPIO_EXTI_Callback+0x46>


	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 8005988:	e001      	b.n	800598e <HAL_GPIO_EXTI_Callback+0x3a>
					break;
 800598a:	bf00      	nop
 800598c:	e006      	b.n	800599c <HAL_GPIO_EXTI_Callback+0x48>
	default : 		break;
 800598e:	bf00      	nop
 8005990:	e004      	b.n	800599c <HAL_GPIO_EXTI_Callback+0x48>
					break;
 8005992:	bf00      	nop
 8005994:	e002      	b.n	800599c <HAL_GPIO_EXTI_Callback+0x48>
							break;
 8005996:	bf00      	nop
 8005998:	e000      	b.n	800599c <HAL_GPIO_EXTI_Callback+0x48>
							break;
 800599a:	bf00      	nop


	}
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <i2c1_Init>:

//======================================================================
// Init I2C1 Peripheral
//======================================================================
void i2c1_Init()
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
    hi2c1.Instance             = I2C1;
 80059ac:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <i2c1_Init+0x48>)
 80059ae:	4a11      	ldr	r2, [pc, #68]	; (80059f4 <i2c1_Init+0x4c>)
 80059b0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed      = I2C1_CLOCKSPEED;		// cf config.h
 80059b2:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <i2c1_Init+0x48>)
 80059b4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80059b8:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 80059ba:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <i2c1_Init+0x48>)
 80059bc:	2200      	movs	r2, #0
 80059be:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1     = 0x2;
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <i2c1_Init+0x48>)
 80059c2:	2202      	movs	r2, #2
 80059c4:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 80059c6:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <i2c1_Init+0x48>)
 80059c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059cc:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80059ce:	4b08      	ldr	r3, [pc, #32]	; (80059f0 <i2c1_Init+0x48>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2     = 0xFF;
 80059d4:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <i2c1_Init+0x48>)
 80059d6:	22ff      	movs	r2, #255	; 0xff
 80059d8:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80059da:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <i2c1_Init+0x48>)
 80059dc:	2200      	movs	r2, #0
 80059de:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 80059e0:	4b03      	ldr	r3, [pc, #12]	; (80059f0 <i2c1_Init+0x48>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	621a      	str	r2, [r3, #32]

    HAL_I2C_Init(&hi2c1);
 80059e6:	4802      	ldr	r0, [pc, #8]	; (80059f0 <i2c1_Init+0x48>)
 80059e8:	f7fb fbb8 	bl	800115c <HAL_I2C_Init>
}
 80059ec:	bf00      	nop
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	2000f73c 	.word	0x2000f73c
 80059f4:	40005400 	.word	0x40005400

080059f8 <i2c1_WriteReg32Word16>:
//======================================================================
// Write 16 bits word to regAddr (32 bits) Slave
//=====================================================================

int i2c1_WriteReg32Word16(uint16_t addrSlave, uint32_t  regAddr,  uint16_t data)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	4603      	mov	r3, r0
 8005a00:	6039      	str	r1, [r7, #0]
 8005a02:	80fb      	strh	r3, [r7, #6]
 8005a04:	4613      	mov	r3, r2
 8005a06:	80bb      	strh	r3, [r7, #4]
		int status;
		uint8_t buffer[6];
		buffer[0]=(regAddr>>24) & 0xFF;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	0e1b      	lsrs	r3, r3, #24
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	733b      	strb	r3, [r7, #12]
		buffer[1]=(regAddr>>16) & 0xFF;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	0c1b      	lsrs	r3, r3, #16
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	737b      	strb	r3, [r7, #13]
	    buffer[2]=(regAddr>>8) & 0xFF;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	0a1b      	lsrs	r3, r3, #8
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	73bb      	strb	r3, [r7, #14]
	    buffer[3]=(regAddr) & 0xFF;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	73fb      	strb	r3, [r7, #15]
	    buffer[4]=(data>>8) & 0xFF;
 8005a26:	88bb      	ldrh	r3, [r7, #4]
 8005a28:	0a1b      	lsrs	r3, r3, #8
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	743b      	strb	r3, [r7, #16]
	    buffer[5]=(data) & 0xFF;
 8005a30:	88bb      	ldrh	r3, [r7, #4]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	747b      	strb	r3, [r7, #17]
		status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, buffer, 6 , 100);
 8005a36:	f107 020c 	add.w	r2, r7, #12
 8005a3a:	88f9      	ldrh	r1, [r7, #6]
 8005a3c:	2364      	movs	r3, #100	; 0x64
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	2306      	movs	r3, #6
 8005a42:	4805      	ldr	r0, [pc, #20]	; (8005a58 <i2c1_WriteReg32Word16+0x60>)
 8005a44:	f7fb fc6a 	bl	800131c <HAL_I2C_Master_Transmit>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	617b      	str	r3, [r7, #20]
	   return status;
 8005a4c:	697b      	ldr	r3, [r7, #20]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	2000f73c 	.word	0x2000f73c

08005a5c <i2s2_Init>:
extern uint16_t buf_i2s[2];

I2S_InitTypeDef I2S_InitStructure;

void i2s2_Init(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
	  I2S_Cmd(SPI2, DISABLE);
 8005a60:	2100      	movs	r1, #0
 8005a62:	480f      	ldr	r0, [pc, #60]	; (8005aa0 <i2s2_Init+0x44>)
 8005a64:	f7fe fa1a 	bl	8003e9c <I2S_Cmd>
	  I2S_Cmd(I2S2ext, DISABLE);
 8005a68:	2100      	movs	r1, #0
 8005a6a:	480e      	ldr	r0, [pc, #56]	; (8005aa4 <i2s2_Init+0x48>)
 8005a6c:	f7fe fa16 	bl	8003e9c <I2S_Cmd>

	  I2S_InitStructure.I2S_Standard = I2S_Standard_Phillips;
 8005a70:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <i2s2_Init+0x4c>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	805a      	strh	r2, [r3, #2]
	  I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 8005a76:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <i2s2_Init+0x4c>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	809a      	strh	r2, [r3, #4]
	  I2S_InitStructure.I2S_CPOL = I2S_CPOL_High;
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <i2s2_Init+0x4c>)
 8005a7e:	2208      	movs	r2, #8
 8005a80:	819a      	strh	r2, [r3, #12]
	  I2S_InitStructure.I2S_Mode = I2S_Mode_SlaveRx;
 8005a82:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <i2s2_Init+0x4c>)
 8005a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a88:	801a      	strh	r2, [r3, #0]

	  I2S_Init(SPI2, &I2S_InitStructure);
 8005a8a:	4907      	ldr	r1, [pc, #28]	; (8005aa8 <i2s2_Init+0x4c>)
 8005a8c:	4804      	ldr	r0, [pc, #16]	; (8005aa0 <i2s2_Init+0x44>)
 8005a8e:	f7fe f941 	bl	8003d14 <I2S_Init>

	  I2S_FullDuplexConfig(I2S2ext, &I2S_InitStructure); // enable the I2Sx_ext peripheral for Full Duplex mode */
 8005a92:	4905      	ldr	r1, [pc, #20]	; (8005aa8 <i2s2_Init+0x4c>)
 8005a94:	4803      	ldr	r0, [pc, #12]	; (8005aa4 <i2s2_Init+0x48>)
 8005a96:	f7fe fa1e 	bl	8003ed6 <I2S_FullDuplexConfig>




}
 8005a9a:	bf00      	nop
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40003800 	.word	0x40003800
 8005aa4:	40003400 	.word	0x40003400
 8005aa8:	2000f778 	.word	0x2000f778

08005aac <uart2_Init>:
//=================================================================
//	UART 2 INIT MIDI
//=================================================================

void uart2_Init()
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
	  Uart2Handle.Instance          = USART2;
 8005ab0:	4b11      	ldr	r3, [pc, #68]	; (8005af8 <uart2_Init+0x4c>)
 8005ab2:	4a12      	ldr	r2, [pc, #72]	; (8005afc <uart2_Init+0x50>)
 8005ab4:	601a      	str	r2, [r3, #0]
	  Uart2Handle.Init.BaudRate     = USART2_BAUDRATE;
 8005ab6:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <uart2_Init+0x4c>)
 8005ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005abc:	605a      	str	r2, [r3, #4]
	  Uart2Handle.Init.WordLength   = UART_WORDLENGTH_8B;
 8005abe:	4b0e      	ldr	r3, [pc, #56]	; (8005af8 <uart2_Init+0x4c>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	609a      	str	r2, [r3, #8]
	  Uart2Handle.Init.StopBits     = UART_STOPBITS_1;
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <uart2_Init+0x4c>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	60da      	str	r2, [r3, #12]
	  Uart2Handle.Init.Parity       = UART_PARITY_NONE;
 8005aca:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <uart2_Init+0x4c>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	611a      	str	r2, [r3, #16]
	  Uart2Handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8005ad0:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <uart2_Init+0x4c>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	619a      	str	r2, [r3, #24]
	  Uart2Handle.Init.Mode         = UART_MODE_TX_RX;
 8005ad6:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <uart2_Init+0x4c>)
 8005ad8:	220c      	movs	r2, #12
 8005ada:	615a      	str	r2, [r3, #20]
	  Uart2Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <uart2_Init+0x4c>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&Uart2Handle);
 8005ae2:	4805      	ldr	r0, [pc, #20]	; (8005af8 <uart2_Init+0x4c>)
 8005ae4:	f7fd f958 	bl	8002d98 <HAL_UART_Init>
	  HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf, NB_CAR_TO_RECEIVE);
 8005ae8:	2201      	movs	r2, #1
 8005aea:	4905      	ldr	r1, [pc, #20]	; (8005b00 <uart2_Init+0x54>)
 8005aec:	4802      	ldr	r0, [pc, #8]	; (8005af8 <uart2_Init+0x4c>)
 8005aee:	f7fd fab2 	bl	8003056 <HAL_UART_Receive_IT>
}
 8005af2:	bf00      	nop
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	2000f254 	.word	0x2000f254
 8005afc:	40004400 	.word	0x40004400
 8005b00:	2000f298 	.word	0x2000f298

08005b04 <uart6_Init>:
//=================================================================
//	UART 6 INIT (ZIGBEE UART)
//=================================================================

void uart6_Init()
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
	  Uart6Handle.Instance          = USART6;
 8005b08:	4b11      	ldr	r3, [pc, #68]	; (8005b50 <uart6_Init+0x4c>)
 8005b0a:	4a12      	ldr	r2, [pc, #72]	; (8005b54 <uart6_Init+0x50>)
 8005b0c:	601a      	str	r2, [r3, #0]

	  Uart6Handle.Init.BaudRate     = USART6_BAUDRATE;
 8005b0e:	4b10      	ldr	r3, [pc, #64]	; (8005b50 <uart6_Init+0x4c>)
 8005b10:	f647 2212 	movw	r2, #31250	; 0x7a12
 8005b14:	605a      	str	r2, [r3, #4]
	  Uart6Handle.Init.WordLength   = UART_WORDLENGTH_8B;
 8005b16:	4b0e      	ldr	r3, [pc, #56]	; (8005b50 <uart6_Init+0x4c>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	609a      	str	r2, [r3, #8]
	  Uart6Handle.Init.StopBits     = UART_STOPBITS_1;
 8005b1c:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <uart6_Init+0x4c>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	60da      	str	r2, [r3, #12]
	  Uart6Handle.Init.Parity       = UART_PARITY_NONE;
 8005b22:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <uart6_Init+0x4c>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	611a      	str	r2, [r3, #16]
	  Uart6Handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8005b28:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <uart6_Init+0x4c>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	619a      	str	r2, [r3, #24]
	  Uart6Handle.Init.Mode         = UART_MODE_TX_RX;
 8005b2e:	4b08      	ldr	r3, [pc, #32]	; (8005b50 <uart6_Init+0x4c>)
 8005b30:	220c      	movs	r2, #12
 8005b32:	615a      	str	r2, [r3, #20]
	  Uart6Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b34:	4b06      	ldr	r3, [pc, #24]	; (8005b50 <uart6_Init+0x4c>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&Uart6Handle);
 8005b3a:	4805      	ldr	r0, [pc, #20]	; (8005b50 <uart6_Init+0x4c>)
 8005b3c:	f7fd f92c 	bl	8002d98 <HAL_UART_Init>
	  HAL_UART_Receive_IT(&Uart6Handle, (uint8_t *)rec_buf, NB_CAR_TO_RECEIVE);
 8005b40:	2201      	movs	r2, #1
 8005b42:	4905      	ldr	r1, [pc, #20]	; (8005b58 <uart6_Init+0x54>)
 8005b44:	4802      	ldr	r0, [pc, #8]	; (8005b50 <uart6_Init+0x4c>)
 8005b46:	f7fd fa86 	bl	8003056 <HAL_UART_Receive_IT>
}
 8005b4a:	bf00      	nop
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	2000f20c 	.word	0x2000f20c
 8005b54:	40011400 	.word	0x40011400
 8005b58:	2000f298 	.word	0x2000f298

08005b5c <put_char>:
}
//=================================================================
//	PUCHAR PROTOTYPE (USED BY PRINTF FUNCTIONS)
//=================================================================
int put_char(int ch)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&Uart2Handle, (uint8_t *)&ch, 1, 0xFFFF);
 8005b64:	1d39      	adds	r1, r7, #4
 8005b66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	4803      	ldr	r0, [pc, #12]	; (8005b7c <put_char+0x20>)
 8005b6e:	f7fd f962 	bl	8002e36 <HAL_UART_Transmit>
  return ch;
 8005b72:	687b      	ldr	r3, [r7, #4]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	2000f254 	.word	0x2000f254

08005b80 <uart6_write>:
//=================================================================
void uart6_write(char* toprint, int size)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
	//HAL_UART_Transmit(&Uart6Handle, (uint8_t *)toprint, size,  1); //HAL_UART_Transmit_IT
	HAL_UART_Transmit_IT(&Uart6Handle, (uint8_t *)toprint, size);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	4803      	ldr	r0, [pc, #12]	; (8005ba0 <uart6_write+0x20>)
 8005b94:	f7fd f9f8 	bl	8002f88 <HAL_UART_Transmit_IT>
}
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	2000f20c 	.word	0x2000f20c

08005ba4 <HAL_UART_RxCpltCallback>:

//=================================================================
//	UART RECEIVE CALLBACK5
//=================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	if (UartHandle -> Instance == USART6)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a08      	ldr	r2, [pc, #32]	; (8005bd4 <HAL_UART_RxCpltCallback+0x30>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d109      	bne.n	8005bca <HAL_UART_RxCpltCallback+0x26>
	{
		HAL_UART_Receive_IT(&Uart6Handle, (uint8_t *)rec_buf, NB_CAR_TO_RECEIVE);
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	4907      	ldr	r1, [pc, #28]	; (8005bd8 <HAL_UART_RxCpltCallback+0x34>)
 8005bba:	4808      	ldr	r0, [pc, #32]	; (8005bdc <HAL_UART_RxCpltCallback+0x38>)
 8005bbc:	f7fd fa4b 	bl	8003056 <HAL_UART_Receive_IT>
		MIDI_rcv_cb(rec_buf[0]);
 8005bc0:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <HAL_UART_RxCpltCallback+0x34>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe fc9f 	bl	8004508 <MIDI_rcv_cb>
	}
	else
	if (UartHandle -> Instance == USART2)
	{
	}
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40011400 	.word	0x40011400
 8005bd8:	2000f298 	.word	0x2000f298
 8005bdc:	2000f20c 	.word	0x2000f20c

08005be0 <put_string>:

//================================================================
//				PUT STRING
//================================================================
void put_string(char* s)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 8005be8:	e007      	b.n	8005bfa <put_string+0x1a>
	{
		put_char(*s);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff ffb4 	bl	8005b5c <put_char>
		s++;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f3      	bne.n	8005bea <put_string+0xa>
	}
}
 8005c02:	bf00      	nop
 8005c04:	bf00      	nop
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	0000      	movs	r0, r0
	...

08005c10 <term_printf>:
//				TERM_PRINTF
//================================================================
char string[64];

void term_printf(const char* fmt, ...)
{
 8005c10:	b40f      	push	{r0, r1, r2, r3}
 8005c12:	b5b0      	push	{r4, r5, r7, lr}
 8005c14:	b09a      	sub	sp, #104	; 0x68
 8005c16:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long  size;
	unsigned int   sp;
	char           s[34];

	va_start(ap, fmt);
 8005c18:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005c1c:	633b      	str	r3, [r7, #48]	; 0x30
	while (*fmt != '\0') {
 8005c1e:	e17b      	b.n	8005f18 <term_printf+0x308>
		if (*fmt =='%') {
 8005c20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b25      	cmp	r3, #37	; 0x25
 8005c26:	f040 816f 	bne.w	8005f08 <term_printf+0x2f8>
			size=0; sp=1;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	657b      	str	r3, [r7, #84]	; 0x54
 8005c2e:	2301      	movs	r3, #1
 8005c30:	653b      	str	r3, [r7, #80]	; 0x50
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 8005c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c34:	3301      	adds	r3, #1
 8005c36:	673b      	str	r3, [r7, #112]	; 0x70
 8005c38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b30      	cmp	r3, #48	; 0x30
 8005c3e:	d104      	bne.n	8005c4a <term_printf+0x3a>
 8005c40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c42:	3301      	adds	r3, #1
 8005c44:	673b      	str	r3, [r7, #112]	; 0x70
 8005c46:	2300      	movs	r3, #0
 8005c48:	653b      	str	r3, [r7, #80]	; 0x50
			ch=*fmt;
 8005c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 8005c52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c56:	2b30      	cmp	r3, #48	; 0x30
 8005c58:	d929      	bls.n	8005cae <term_printf+0x9e>
 8005c5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c5e:	2b39      	cmp	r3, #57	; 0x39
 8005c60:	d825      	bhi.n	8005cae <term_printf+0x9e>
				char tmp[10];
				int i=0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	64fb      	str	r3, [r7, #76]	; 0x4c
				while ((ch>='0') && (ch<='9')) {
 8005c66:	e00f      	b.n	8005c88 <term_printf+0x78>
					tmp[i++]=ch;
 8005c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005c6e:	3360      	adds	r3, #96	; 0x60
 8005c70:	443b      	add	r3, r7
 8005c72:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8005c76:	f803 2c60 	strb.w	r2, [r3, #-96]
					ch=*++fmt;
 8005c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				while ((ch>='0') && (ch<='9')) {
 8005c88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c8c:	2b2f      	cmp	r3, #47	; 0x2f
 8005c8e:	d903      	bls.n	8005c98 <term_printf+0x88>
 8005c90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c94:	2b39      	cmp	r3, #57	; 0x39
 8005c96:	d9e7      	bls.n	8005c68 <term_printf+0x58>
				}
				tmp[i]='\0';
 8005c98:	463a      	mov	r2, r7
 8005c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9c:	4413      	add	r3, r2
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	210a      	movs	r1, #10
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fcfc 	bl	80056a4 <str2num>
 8005cac:	6578      	str	r0, [r7, #84]	; 0x54
			}
			switch (ch) {
 8005cae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cb2:	2b25      	cmp	r3, #37	; 0x25
 8005cb4:	d03c      	beq.n	8005d30 <term_printf+0x120>
 8005cb6:	2b25      	cmp	r3, #37	; 0x25
 8005cb8:	f2c0 8120 	blt.w	8005efc <term_printf+0x2ec>
 8005cbc:	2b78      	cmp	r3, #120	; 0x78
 8005cbe:	f300 811d 	bgt.w	8005efc <term_printf+0x2ec>
 8005cc2:	2b63      	cmp	r3, #99	; 0x63
 8005cc4:	f2c0 811a 	blt.w	8005efc <term_printf+0x2ec>
 8005cc8:	3b63      	subs	r3, #99	; 0x63
 8005cca:	2b15      	cmp	r3, #21
 8005ccc:	f200 8116 	bhi.w	8005efc <term_printf+0x2ec>
 8005cd0:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <term_printf+0xc8>)
 8005cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd6:	bf00      	nop
 8005cd8:	08005d39 	.word	0x08005d39
 8005cdc:	08005d63 	.word	0x08005d63
 8005ce0:	08005efd 	.word	0x08005efd
 8005ce4:	08005e49 	.word	0x08005e49
 8005ce8:	08005efd 	.word	0x08005efd
 8005cec:	08005efd 	.word	0x08005efd
 8005cf0:	08005efd 	.word	0x08005efd
 8005cf4:	08005efd 	.word	0x08005efd
 8005cf8:	08005efd 	.word	0x08005efd
 8005cfc:	08005efd 	.word	0x08005efd
 8005d00:	08005efd 	.word	0x08005efd
 8005d04:	08005efd 	.word	0x08005efd
 8005d08:	08005dc5 	.word	0x08005dc5
 8005d0c:	08005ded 	.word	0x08005ded
 8005d10:	08005efd 	.word	0x08005efd
 8005d14:	08005efd 	.word	0x08005efd
 8005d18:	08005d51 	.word	0x08005d51
 8005d1c:	08005efd 	.word	0x08005efd
 8005d20:	08005d9d 	.word	0x08005d9d
 8005d24:	08005efd 	.word	0x08005efd
 8005d28:	08005efd 	.word	0x08005efd
 8005d2c:	08005e21 	.word	0x08005e21
				case '%':
					put_char('%');
 8005d30:	2025      	movs	r0, #37	; 0x25
 8005d32:	f7ff ff13 	bl	8005b5c <put_char>
					break;
 8005d36:	e0ec      	b.n	8005f12 <term_printf+0x302>
				case 'c':
					ch = va_arg(ap, int);
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	1d1a      	adds	r2, r3, #4
 8005d3c:	633a      	str	r2, [r7, #48]	; 0x30
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					put_char(ch);
 8005d44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff ff07 	bl	8005b5c <put_char>
					break;
 8005d4e:	e0e0      	b.n	8005f12 <term_printf+0x302>
				case 's':
					p = va_arg(ap, char *);
 8005d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d52:	1d1a      	adds	r2, r3, #4
 8005d54:	633a      	str	r2, [r7, #48]	; 0x30
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	64bb      	str	r3, [r7, #72]	; 0x48
					put_string(p);
 8005d5a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005d5c:	f7ff ff40 	bl	8005be0 <put_string>
					break;
 8005d60:	e0d7      	b.n	8005f12 <term_printf+0x302>
				case 'd':
					ul = va_arg(ap, long);
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	1d1a      	adds	r2, r3, #4
 8005d66:	633a      	str	r2, [r7, #48]	; 0x30
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	65bb      	str	r3, [r7, #88]	; 0x58
					if ((long)ul < 0) {
 8005d6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	da05      	bge.n	8005d7e <term_printf+0x16e>
						put_char('-');
 8005d72:	202d      	movs	r0, #45	; 0x2d
 8005d74:	f7ff fef2 	bl	8005b5c <put_char>
						ul = -(long)ul;
 8005d78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d7a:	425b      	negs	r3, r3
 8005d7c:	65bb      	str	r3, [r7, #88]	; 0x58
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 8005d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d80:	f107 000c 	add.w	r0, r7, #12
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d88:	220a      	movs	r2, #10
 8005d8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d8c:	f7ff fc06 	bl	800559c <num2str>
					put_string(s);
 8005d90:	f107 030c 	add.w	r3, r7, #12
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7ff ff23 	bl	8005be0 <put_string>
					break;
 8005d9a:	e0ba      	b.n	8005f12 <term_printf+0x302>
				case 'u':
					ul = va_arg(ap, unsigned int);
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	1d1a      	adds	r2, r3, #4
 8005da0:	633a      	str	r2, [r7, #48]	; 0x30
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	65bb      	str	r3, [r7, #88]	; 0x58
					num2str(s, ul, 10, size, sp);
 8005da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da8:	f107 000c 	add.w	r0, r7, #12
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005db0:	220a      	movs	r2, #10
 8005db2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005db4:	f7ff fbf2 	bl	800559c <num2str>
					put_string(s);
 8005db8:	f107 030c 	add.w	r3, r7, #12
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff ff0f 	bl	8005be0 <put_string>
					break;
 8005dc2:	e0a6      	b.n	8005f12 <term_printf+0x302>
				case 'o':
					ul = va_arg(ap, unsigned int);
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	1d1a      	adds	r2, r3, #4
 8005dc8:	633a      	str	r2, [r7, #48]	; 0x30
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	65bb      	str	r3, [r7, #88]	; 0x58
					num2str(s, ul, 8, size, sp);
 8005dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd0:	f107 000c 	add.w	r0, r7, #12
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dd8:	2208      	movs	r2, #8
 8005dda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ddc:	f7ff fbde 	bl	800559c <num2str>
					put_string(s);
 8005de0:	f107 030c 	add.w	r3, r7, #12
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff fefb 	bl	8005be0 <put_string>
					break;
 8005dea:	e092      	b.n	8005f12 <term_printf+0x302>
				case 'p':
					put_char('0');
 8005dec:	2030      	movs	r0, #48	; 0x30
 8005dee:	f7ff feb5 	bl	8005b5c <put_char>
					put_char('x');
 8005df2:	2078      	movs	r0, #120	; 0x78
 8005df4:	f7ff feb2 	bl	8005b5c <put_char>
					ul = va_arg(ap, unsigned int);
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	1d1a      	adds	r2, r3, #4
 8005dfc:	633a      	str	r2, [r7, #48]	; 0x30
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	65bb      	str	r3, [r7, #88]	; 0x58
					num2str(s, ul, 16, size, sp);
 8005e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e04:	f107 000c 	add.w	r0, r7, #12
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e0c:	2210      	movs	r2, #16
 8005e0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e10:	f7ff fbc4 	bl	800559c <num2str>
					put_string(s);
 8005e14:	f107 030c 	add.w	r3, r7, #12
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff fee1 	bl	8005be0 <put_string>
					break;
 8005e1e:	e078      	b.n	8005f12 <term_printf+0x302>
				case 'x':
					ul = va_arg(ap, unsigned int);
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	1d1a      	adds	r2, r3, #4
 8005e24:	633a      	str	r2, [r7, #48]	; 0x30
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	65bb      	str	r3, [r7, #88]	; 0x58
					num2str(s, ul, 16, size, sp);
 8005e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2c:	f107 000c 	add.w	r0, r7, #12
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e34:	2210      	movs	r2, #16
 8005e36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e38:	f7ff fbb0 	bl	800559c <num2str>
					put_string(s);
 8005e3c:	f107 030c 	add.w	r3, r7, #12
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff fecd 	bl	8005be0 <put_string>
					break;
 8005e46:	e064      	b.n	8005f12 <term_printf+0x302>
				case 'f':
					ul = va_arg(ap, long);
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	1d1a      	adds	r2, r3, #4
 8005e4c:	633a      	str	r2, [r7, #48]	; 0x30
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	65bb      	str	r3, [r7, #88]	; 0x58
					int sign = ( ul & 0x80000000 ) >> 31;
 8005e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e54:	0fdb      	lsrs	r3, r3, #31
 8005e56:	647b      	str	r3, [r7, #68]	; 0x44
					int m = (ul & 0x000FFFFF) ; // should be 0x007FFFFF
 8005e58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e5e:	643b      	str	r3, [r7, #64]	; 0x40
					float mf = (float)m ;
 8005e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e6a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
					mf = mf / pow(2.0,20.0);
 8005e6e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005e72:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005f40 <term_printf+0x330>
 8005e76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e7a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
					mf = mf + 1.0;
 8005e7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005e82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e8a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
					int e = ( ul & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 8005e8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e90:	0ddb      	lsrs	r3, r3, #23
 8005e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e96:	63bb      	str	r3, [r7, #56]	; 0x38
					e = e | (( ul & 0x000F00000 ) >> 20);
 8005e98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e9a:	0d1b      	lsrs	r3, r3, #20
 8005e9c:	f003 020f 	and.w	r2, r3, #15
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	63bb      	str	r3, [r7, #56]	; 0x38
					e = e - 127;
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	3b7f      	subs	r3, #127	; 0x7f
 8005eaa:	63bb      	str	r3, [r7, #56]	; 0x38
					float f = mf*myPow(2.0,e);
 8005eac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005eae:	f7fa faf7 	bl	80004a0 <__aeabi_f2d>
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	460d      	mov	r5, r1
 8005eb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005eb8:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8005f38 <term_printf+0x328>
 8005ebc:	f7ff fd00 	bl	80058c0 <myPow>
 8005ec0:	ec53 2b10 	vmov	r2, r3, d0
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	f7fa fb42 	bl	8000550 <__aeabi_dmul>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	f7fa fd4e 	bl	8000974 <__aeabi_d2f>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	637b      	str	r3, [r7, #52]	; 0x34
					if(sign==1){ put_char('-'); }
 8005edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d102      	bne.n	8005ee8 <term_printf+0x2d8>
 8005ee2:	202d      	movs	r0, #45	; 0x2d
 8005ee4:	f7ff fe3a 	bl	8005b5c <put_char>
					float2str(string, f, 5);
 8005ee8:	2105      	movs	r1, #5
 8005eea:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8005eee:	4815      	ldr	r0, [pc, #84]	; (8005f44 <term_printf+0x334>)
 8005ef0:	f7ff fc96 	bl	8005820 <float2str>
					put_string(string);
 8005ef4:	4813      	ldr	r0, [pc, #76]	; (8005f44 <term_printf+0x334>)
 8005ef6:	f7ff fe73 	bl	8005be0 <put_string>
					break;
 8005efa:	e00a      	b.n	8005f12 <term_printf+0x302>

				default:
					put_char(*fmt);
 8005efc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fe2b 	bl	8005b5c <put_char>
 8005f06:	e004      	b.n	8005f12 <term_printf+0x302>
			}
		} else put_char(*fmt);
 8005f08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff fe25 	bl	8005b5c <put_char>
		fmt++;
 8005f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f14:	3301      	adds	r3, #1
 8005f16:	673b      	str	r3, [r7, #112]	; 0x70
	while (*fmt != '\0') {
 8005f18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f47f ae7f 	bne.w	8005c20 <term_printf+0x10>
	}
	va_end(ap);
}
 8005f22:	bf00      	nop
 8005f24:	bf00      	nop
 8005f26:	3760      	adds	r7, #96	; 0x60
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8005f2e:	b004      	add	sp, #16
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	f3af 8000 	nop.w
 8005f38:	00000000 	.word	0x00000000
 8005f3c:	40000000 	.word	0x40000000
 8005f40:	49800000 	.word	0x49800000
 8005f44:	2000f788 	.word	0x2000f788

08005f48 <__libc_init_array>:
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	4d0d      	ldr	r5, [pc, #52]	; (8005f80 <__libc_init_array+0x38>)
 8005f4c:	4c0d      	ldr	r4, [pc, #52]	; (8005f84 <__libc_init_array+0x3c>)
 8005f4e:	1b64      	subs	r4, r4, r5
 8005f50:	10a4      	asrs	r4, r4, #2
 8005f52:	2600      	movs	r6, #0
 8005f54:	42a6      	cmp	r6, r4
 8005f56:	d109      	bne.n	8005f6c <__libc_init_array+0x24>
 8005f58:	4d0b      	ldr	r5, [pc, #44]	; (8005f88 <__libc_init_array+0x40>)
 8005f5a:	4c0c      	ldr	r4, [pc, #48]	; (8005f8c <__libc_init_array+0x44>)
 8005f5c:	f000 f880 	bl	8006060 <_init>
 8005f60:	1b64      	subs	r4, r4, r5
 8005f62:	10a4      	asrs	r4, r4, #2
 8005f64:	2600      	movs	r6, #0
 8005f66:	42a6      	cmp	r6, r4
 8005f68:	d105      	bne.n	8005f76 <__libc_init_array+0x2e>
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}
 8005f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f70:	4798      	blx	r3
 8005f72:	3601      	adds	r6, #1
 8005f74:	e7ee      	b.n	8005f54 <__libc_init_array+0xc>
 8005f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7a:	4798      	blx	r3
 8005f7c:	3601      	adds	r6, #1
 8005f7e:	e7f2      	b.n	8005f66 <__libc_init_array+0x1e>
 8005f80:	0800619c 	.word	0x0800619c
 8005f84:	0800619c 	.word	0x0800619c
 8005f88:	0800619c 	.word	0x0800619c
 8005f8c:	080061a4 	.word	0x080061a4

08005f90 <register_fini>:
 8005f90:	4b02      	ldr	r3, [pc, #8]	; (8005f9c <register_fini+0xc>)
 8005f92:	b113      	cbz	r3, 8005f9a <register_fini+0xa>
 8005f94:	4802      	ldr	r0, [pc, #8]	; (8005fa0 <register_fini+0x10>)
 8005f96:	f000 b805 	b.w	8005fa4 <atexit>
 8005f9a:	4770      	bx	lr
 8005f9c:	00000000 	.word	0x00000000
 8005fa0:	08005fb1 	.word	0x08005fb1

08005fa4 <atexit>:
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4601      	mov	r1, r0
 8005fa8:	461a      	mov	r2, r3
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 b816 	b.w	8005fdc <__register_exitproc>

08005fb0 <__libc_fini_array>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4d07      	ldr	r5, [pc, #28]	; (8005fd0 <__libc_fini_array+0x20>)
 8005fb4:	4c07      	ldr	r4, [pc, #28]	; (8005fd4 <__libc_fini_array+0x24>)
 8005fb6:	1b64      	subs	r4, r4, r5
 8005fb8:	10a4      	asrs	r4, r4, #2
 8005fba:	b91c      	cbnz	r4, 8005fc4 <__libc_fini_array+0x14>
 8005fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fc0:	f000 b854 	b.w	800606c <_fini>
 8005fc4:	3c01      	subs	r4, #1
 8005fc6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005fca:	4798      	blx	r3
 8005fcc:	e7f5      	b.n	8005fba <__libc_fini_array+0xa>
 8005fce:	bf00      	nop
 8005fd0:	080061a4 	.word	0x080061a4
 8005fd4:	080061a8 	.word	0x080061a8

08005fd8 <__retarget_lock_acquire_recursive>:
 8005fd8:	4770      	bx	lr

08005fda <__retarget_lock_release_recursive>:
 8005fda:	4770      	bx	lr

08005fdc <__register_exitproc>:
 8005fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe0:	f8df a078 	ldr.w	sl, [pc, #120]	; 800605c <__register_exitproc+0x80>
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	f8da 0000 	ldr.w	r0, [sl]
 8005fea:	4698      	mov	r8, r3
 8005fec:	460f      	mov	r7, r1
 8005fee:	4691      	mov	r9, r2
 8005ff0:	f7ff fff2 	bl	8005fd8 <__retarget_lock_acquire_recursive>
 8005ff4:	4b18      	ldr	r3, [pc, #96]	; (8006058 <__register_exitproc+0x7c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8005ffc:	b91c      	cbnz	r4, 8006006 <__register_exitproc+0x2a>
 8005ffe:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8006002:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8006006:	6865      	ldr	r5, [r4, #4]
 8006008:	f8da 0000 	ldr.w	r0, [sl]
 800600c:	2d1f      	cmp	r5, #31
 800600e:	dd05      	ble.n	800601c <__register_exitproc+0x40>
 8006010:	f7ff ffe3 	bl	8005fda <__retarget_lock_release_recursive>
 8006014:	f04f 30ff 	mov.w	r0, #4294967295
 8006018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601c:	b19e      	cbz	r6, 8006046 <__register_exitproc+0x6a>
 800601e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8006022:	2201      	movs	r2, #1
 8006024:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8006028:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800602c:	40aa      	lsls	r2, r5
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8006034:	2e02      	cmp	r6, #2
 8006036:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800603a:	bf02      	ittt	eq
 800603c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8006040:	4313      	orreq	r3, r2
 8006042:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8006046:	1c6b      	adds	r3, r5, #1
 8006048:	3502      	adds	r5, #2
 800604a:	6063      	str	r3, [r4, #4]
 800604c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8006050:	f7ff ffc3 	bl	8005fda <__retarget_lock_release_recursive>
 8006054:	2000      	movs	r0, #0
 8006056:	e7df      	b.n	8006018 <__register_exitproc+0x3c>
 8006058:	08006198 	.word	0x08006198
 800605c:	2000f1e0 	.word	0x2000f1e0

08006060 <_init>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	bf00      	nop
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr

0800606c <_fini>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	bf00      	nop
 8006070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006072:	bc08      	pop	{r3}
 8006074:	469e      	mov	lr, r3
 8006076:	4770      	bx	lr
